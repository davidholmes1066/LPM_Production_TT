
Debug_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dde  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000e52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000280c  00802000  00802000  00000e52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e9f  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a44  00000000  00000000  00007f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014d6  00000000  00000000  0000b95f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  0000ce38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000367a  00000000  00000000  0000d378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001532  00000000  00000000  000109f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00011f24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__vector_47>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__vector_64>
 104:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__vector_65>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__vector_119>
 1e0:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_120>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ee ed       	ldi	r30, 0xDE	; 222
 214:	fd e0       	ldi	r31, 0x0D	; 13
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	28 e4       	ldi	r18, 0x48	; 72
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ac 30       	cpi	r26, 0x0C	; 12
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 43 05 	call	0xa86	; 0xa86 <main>
 23a:	0c 94 ed 06 	jmp	0xdda	; 0xdda <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <read_UART>:
double calc_DACDATA(double dac_output)
{
	double dac_data;
	dac_data = (dac_output*4095)/DAC_VREF;											//calculate dac_channel_data for desired DAC output voltage
	return dac_data;
}
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	04 c0       	rjmp	.+8      	; 0x250 <read_UART+0xe>
 248:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
 24c:	20 78       	andi	r18, 0x80	; 128
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	21 15       	cp	r18, r1
 252:	31 05       	cpc	r19, r1
 254:	c9 f3       	breq	.-14     	; 0x248 <read_UART+0x6>
 256:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
 25a:	06 c0       	rjmp	.+12     	; 0x268 <read_UART+0x26>
 25c:	e0 ea       	ldi	r30, 0xA0	; 160
 25e:	fa e0       	ldi	r31, 0x0A	; 10
 260:	21 81       	ldd	r18, Z+1	; 0x01
 262:	20 78       	andi	r18, 0x80	; 128
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	90 81       	ld	r25, Z
 268:	23 2b       	or	r18, r19
 26a:	c1 f7       	brne	.-16     	; 0x25c <read_UART+0x1a>
 26c:	08 95       	ret

0000026e <write8_UART>:
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	04 c0       	rjmp	.+8      	; 0x27c <write8_UART+0xe>
 274:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
 278:	20 72       	andi	r18, 0x20	; 32
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	23 2b       	or	r18, r19
 27e:	d1 f3       	breq	.-12     	; 0x274 <write8_UART+0x6>
 280:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	04 c0       	rjmp	.+8      	; 0x292 <write8_UART+0x24>
 28a:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
 28e:	80 72       	andi	r24, 0x20	; 32
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	89 2b       	or	r24, r25
 294:	d1 f3       	breq	.-12     	; 0x28a <write8_UART+0x1c>
 296:	08 95       	ret

00000298 <start_DELAY>:
 298:	e0 e4       	ldi	r30, 0x40	; 64
 29a:	f9 e0       	ldi	r31, 0x09	; 9
 29c:	10 a2       	std	Z+32, r1	; 0x20
 29e:	11 a2       	std	Z+33, r1	; 0x21
 2a0:	85 e0       	ldi	r24, 0x05	; 5
 2a2:	80 83       	st	Z, r24
 2a4:	08 95       	ret

000002a6 <stop_DELAY>:
 2a6:	e0 e4       	ldi	r30, 0x40	; 64
 2a8:	f9 e0       	ldi	r31, 0x09	; 9
 2aa:	10 82       	st	Z, r1
 2ac:	10 a2       	std	Z+32, r1	; 0x20
 2ae:	11 a2       	std	Z+33, r1	; 0x21
 2b0:	08 95       	ret

000002b2 <read_voltages>:
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	e0 e0       	ldi	r30, 0x00	; 0
 2b8:	f2 e0       	ldi	r31, 0x02	; 2
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	84 83       	std	Z+4, r24	; 0x04
 2be:	a0 e4       	ldi	r26, 0x40	; 64
 2c0:	b2 e0       	ldi	r27, 0x02	; 2
 2c2:	14 96       	adiw	r26, 0x04	; 4
 2c4:	8c 93       	st	X, r24
 2c6:	14 97       	sbiw	r26, 0x04	; 4
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	80 83       	st	Z, r24
 2cc:	8c 93       	st	X, r24
 2ce:	88 e0       	ldi	r24, 0x08	; 8
 2d0:	81 a7       	std	Z+41, r24	; 0x29
 2d2:	11 a2       	std	Z+33, r1	; 0x21
 2d4:	90 e1       	ldi	r25, 0x10	; 16
 2d6:	91 ab       	std	Z+49, r25	; 0x31
 2d8:	98 e1       	ldi	r25, 0x18	; 24
 2da:	91 af       	std	Z+57, r25	; 0x39
 2dc:	91 96       	adiw	r26, 0x21	; 33
 2de:	1c 92       	st	X, r1
 2e0:	91 97       	sbiw	r26, 0x21	; 33
 2e2:	99 96       	adiw	r26, 0x29	; 41
 2e4:	8c 93       	st	X, r24
 2e6:	99 97       	sbiw	r26, 0x29	; 41
 2e8:	80 e2       	ldi	r24, 0x20	; 32
 2ea:	d1 96       	adiw	r26, 0x31	; 49
 2ec:	8c 93       	st	X, r24
 2ee:	d1 97       	sbiw	r26, 0x31	; 49
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 83       	st	Z, r24
 2f4:	8c 93       	st	X, r24
 2f6:	80 81       	ld	r24, Z
 2f8:	80 6c       	ori	r24, 0xC0	; 192
 2fa:	80 83       	st	Z, r24
 2fc:	8c 91       	ld	r24, X
 2fe:	80 68       	ori	r24, 0x80	; 128
 300:	8c 93       	st	X, r24
 302:	80 81       	ld	r24, Z
 304:	8c 63       	ori	r24, 0x3C	; 60
 306:	80 83       	st	Z, r24
 308:	8c 91       	ld	r24, X
 30a:	8c 61       	ori	r24, 0x1C	; 28
 30c:	8c 93       	st	X, r24
 30e:	86 81       	ldd	r24, Z+6	; 0x06
 310:	8f 70       	andi	r24, 0x0F	; 15
 312:	16 96       	adiw	r26, 0x06	; 6
 314:	9c 91       	ld	r25, X
 316:	9f 70       	andi	r25, 0x0F	; 15
 318:	06 c0       	rjmp	.+12     	; 0x326 <read_voltages+0x74>
 31a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7be206>
 31e:	8f 70       	andi	r24, 0x0F	; 15
 320:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
 324:	9f 70       	andi	r25, 0x0F	; 15
 326:	8f 30       	cpi	r24, 0x0F	; 15
 328:	11 f0       	breq	.+4      	; 0x32e <read_voltages+0x7c>
 32a:	97 30       	cpi	r25, 0x07	; 7
 32c:	b1 f7       	brne	.-20     	; 0x31a <read_voltages+0x68>
 32e:	e0 e0       	ldi	r30, 0x00	; 0
 330:	f2 e0       	ldi	r31, 0x02	; 2
 332:	84 a1       	ldd	r24, Z+36	; 0x24
 334:	95 a1       	ldd	r25, Z+37	; 0x25
 336:	c3 ef       	ldi	r28, 0xF3	; 243
 338:	d7 e4       	ldi	r29, 0x47	; 71
 33a:	88 83       	st	Y, r24
 33c:	99 83       	std	Y+1, r25	; 0x01
 33e:	84 a5       	ldd	r24, Z+44	; 0x2c
 340:	95 a5       	ldd	r25, Z+45	; 0x2d
 342:	8a 83       	std	Y+2, r24	; 0x02
 344:	9b 83       	std	Y+3, r25	; 0x03
 346:	84 a9       	ldd	r24, Z+52	; 0x34
 348:	95 a9       	ldd	r25, Z+53	; 0x35
 34a:	8c 83       	std	Y+4, r24	; 0x04
 34c:	9d 83       	std	Y+5, r25	; 0x05
 34e:	84 ad       	ldd	r24, Z+60	; 0x3c
 350:	95 ad       	ldd	r25, Z+61	; 0x3d
 352:	8e 83       	std	Y+6, r24	; 0x06
 354:	9f 83       	std	Y+7, r25	; 0x07
 356:	a0 e4       	ldi	r26, 0x40	; 64
 358:	b2 e0       	ldi	r27, 0x02	; 2
 35a:	94 96       	adiw	r26, 0x24	; 36
 35c:	8d 91       	ld	r24, X+
 35e:	9c 91       	ld	r25, X
 360:	95 97       	sbiw	r26, 0x25	; 37
 362:	88 87       	std	Y+8, r24	; 0x08
 364:	99 87       	std	Y+9, r25	; 0x09
 366:	9c 96       	adiw	r26, 0x2c	; 44
 368:	8d 91       	ld	r24, X+
 36a:	9c 91       	ld	r25, X
 36c:	9d 97       	sbiw	r26, 0x2d	; 45
 36e:	8a 87       	std	Y+10, r24	; 0x0a
 370:	9b 87       	std	Y+11, r25	; 0x0b
 372:	d4 96       	adiw	r26, 0x34	; 52
 374:	8d 91       	ld	r24, X+
 376:	9c 91       	ld	r25, X
 378:	d5 97       	sbiw	r26, 0x35	; 53
 37a:	8c 87       	std	Y+12, r24	; 0x0c
 37c:	9d 87       	std	Y+13, r25	; 0x0d
 37e:	86 81       	ldd	r24, Z+6	; 0x06
 380:	8f 60       	ori	r24, 0x0F	; 15
 382:	86 83       	std	Z+6, r24	; 0x06
 384:	16 96       	adiw	r26, 0x06	; 6
 386:	8c 91       	ld	r24, X
 388:	16 97       	sbiw	r26, 0x06	; 6
 38a:	8f 60       	ori	r24, 0x0F	; 15
 38c:	16 96       	adiw	r26, 0x06	; 6
 38e:	8c 93       	st	X, r24
 390:	16 97       	sbiw	r26, 0x06	; 6
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	84 83       	std	Z+4, r24	; 0x04
 396:	14 96       	adiw	r26, 0x04	; 4
 398:	8c 93       	st	X, r24
 39a:	14 97       	sbiw	r26, 0x04	; 4
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	80 83       	st	Z, r24
 3a0:	8c 93       	st	X, r24
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <fread_D0>:
 3a8:	cf 92       	push	r12
 3aa:	df 92       	push	r13
 3ac:	ef 92       	push	r14
 3ae:	ff 92       	push	r15
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
 3bc:	e0 97       	sbiw	r28, 0x30	; 48
 3be:	cd bf       	out	0x3d, r28	; 61
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__TEXT_REGION_LENGTH__+0x7be204>
 3c8:	e0 e4       	ldi	r30, 0x40	; 64
 3ca:	f2 e0       	ldi	r31, 0x02	; 2
 3cc:	84 83       	std	Z+4, r24	; 0x04
 3ce:	92 e0       	ldi	r25, 0x02	; 2
 3d0:	90 83       	st	Z, r25
 3d2:	98 e2       	ldi	r25, 0x28	; 40
 3d4:	91 a3       	std	Z+33, r25	; 0x21
 3d6:	80 83       	st	Z, r24
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	50 e0       	ldi	r21, 0x00	; 0
 3dc:	ba 01       	movw	r22, r20
 3de:	1b c0       	rjmp	.+54     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3e0:	e0 e4       	ldi	r30, 0x40	; 64
 3e2:	f2 e0       	ldi	r31, 0x02	; 2
 3e4:	80 81       	ld	r24, Z
 3e6:	8c 61       	ori	r24, 0x1C	; 28
 3e8:	80 83       	st	Z, r24
 3ea:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
 3ee:	80 ff       	sbrs	r24, 0
 3f0:	fc cf       	rjmp	.-8      	; 0x3ea <fread_D0+0x42>
 3f2:	e0 e4       	ldi	r30, 0x40	; 64
 3f4:	f2 e0       	ldi	r31, 0x02	; 2
 3f6:	84 a1       	ldd	r24, Z+36	; 0x24
 3f8:	95 a1       	ldd	r25, Z+37	; 0x25
 3fa:	da 01       	movw	r26, r20
 3fc:	aa 0f       	add	r26, r26
 3fe:	bb 1f       	adc	r27, r27
 400:	af 51       	subi	r26, 0x1F	; 31
 402:	bf 4d       	sbci	r27, 0xDF	; 223
 404:	8d 93       	st	X+, r24
 406:	9c 93       	st	X, r25
 408:	86 81       	ldd	r24, Z+6	; 0x06
 40a:	8f 60       	ori	r24, 0x0F	; 15
 40c:	86 83       	std	Z+6, r24	; 0x06
 40e:	4f 5f       	subi	r20, 0xFF	; 255
 410:	5f 4f       	sbci	r21, 0xFF	; 255
 412:	6f 4f       	sbci	r22, 0xFF	; 255
 414:	7f 4f       	sbci	r23, 0xFF	; 255
 416:	48 38       	cpi	r20, 0x88	; 136
 418:	23 e1       	ldi	r18, 0x13	; 19
 41a:	52 07       	cpc	r21, r18
 41c:	61 05       	cpc	r22, r1
 41e:	71 05       	cpc	r23, r1
 420:	f8 f2       	brcs	.-66     	; 0x3e0 <fread_D0+0x38>
 422:	c1 2c       	mov	r12, r1
 424:	d1 2c       	mov	r13, r1
 426:	76 01       	movw	r14, r12
 428:	12 c0       	rjmp	.+36     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 42a:	86 01       	movw	r16, r12
 42c:	00 0f       	add	r16, r16
 42e:	11 1f       	adc	r17, r17
 430:	0f 51       	subi	r16, 0x1F	; 31
 432:	1f 4d       	sbci	r17, 0xDF	; 223
 434:	d8 01       	movw	r26, r16
 436:	8c 91       	ld	r24, X
 438:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 43c:	f8 01       	movw	r30, r16
 43e:	81 81       	ldd	r24, Z+1	; 0x01
 440:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 444:	ff ef       	ldi	r31, 0xFF	; 255
 446:	cf 1a       	sub	r12, r31
 448:	df 0a       	sbc	r13, r31
 44a:	ef 0a       	sbc	r14, r31
 44c:	ff 0a       	sbc	r15, r31
 44e:	28 e8       	ldi	r18, 0x88	; 136
 450:	c2 16       	cp	r12, r18
 452:	23 e1       	ldi	r18, 0x13	; 19
 454:	d2 06       	cpc	r13, r18
 456:	e1 04       	cpc	r14, r1
 458:	f1 04       	cpc	r15, r1
 45a:	38 f3       	brcs	.-50     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 45c:	a0 e0       	ldi	r26, 0x00	; 0
 45e:	b2 e0       	ldi	r27, 0x02	; 2
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	14 96       	adiw	r26, 0x04	; 4
 464:	8c 93       	st	X, r24
 466:	14 97       	sbiw	r26, 0x04	; 4
 468:	e0 e4       	ldi	r30, 0x40	; 64
 46a:	f2 e0       	ldi	r31, 0x02	; 2
 46c:	84 83       	std	Z+4, r24	; 0x04
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	8c 93       	st	X, r24
 472:	80 83       	st	Z, r24
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	dc 01       	movw	r26, r24
 47c:	51 e0       	ldi	r21, 0x01	; 1
 47e:	2d c0       	rjmp	.+90     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 480:	fc 01       	movw	r30, r24
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	ef 51       	subi	r30, 0x1F	; 31
 488:	ff 4d       	sbci	r31, 0xDF	; 223
 48a:	20 81       	ld	r18, Z
 48c:	31 81       	ldd	r19, Z+1	; 0x01
 48e:	29 3e       	cpi	r18, 0xE9	; 233
 490:	63 e0       	ldi	r22, 0x03	; 3
 492:	36 07       	cpc	r19, r22
 494:	c0 f0       	brcs	.+48     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 496:	55 31       	cpi	r21, 0x15	; 21
 498:	b0 f0       	brcs	.+44     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 49a:	e4 2f       	mov	r30, r20
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	ee 0f       	add	r30, r30
 4a0:	ff 1f       	adc	r31, r31
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	21 e0       	ldi	r18, 0x01	; 1
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	2c 0f       	add	r18, r28
 4ac:	3d 1f       	adc	r19, r29
 4ae:	e2 0f       	add	r30, r18
 4b0:	f3 1f       	adc	r31, r19
 4b2:	80 83       	st	Z, r24
 4b4:	91 83       	std	Z+1, r25	; 0x01
 4b6:	a2 83       	std	Z+2, r26	; 0x02
 4b8:	b3 83       	std	Z+3, r27	; 0x03
 4ba:	20 e1       	ldi	r18, 0x10	; 16
 4bc:	20 93 85 06 	sts	0x0685, r18	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
 4c0:	4f 5f       	subi	r20, 0xFF	; 255
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	07 c0       	rjmp	.+14     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4c6:	28 3e       	cpi	r18, 0xE8	; 232
 4c8:	33 40       	sbci	r19, 0x03	; 3
 4ca:	20 f4       	brcc	.+8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4cc:	5f 5f       	subi	r21, 0xFF	; 255
 4ce:	20 e1       	ldi	r18, 0x10	; 16
 4d0:	20 93 86 06 	sts	0x0686, r18	; 0x800686 <__TEXT_REGION_LENGTH__+0x7be686>
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	a1 1d       	adc	r26, r1
 4d8:	b1 1d       	adc	r27, r1
 4da:	88 38       	cpi	r24, 0x88	; 136
 4dc:	e3 e1       	ldi	r30, 0x13	; 19
 4de:	9e 07       	cpc	r25, r30
 4e0:	a1 05       	cpc	r26, r1
 4e2:	b1 05       	cpc	r27, r1
 4e4:	10 f4       	brcc	.+4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e6:	4b 30       	cpi	r20, 0x0B	; 11
 4e8:	58 f2       	brcs	.-106    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 4ea:	4b 30       	cpi	r20, 0x0B	; 11
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4ee:	52 c0       	rjmp	.+164    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 4f0:	29 c0       	rjmp	.+82     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 4f2:	fc 01       	movw	r30, r24
 4f4:	32 96       	adiw	r30, 0x02	; 2
 4f6:	ee 0f       	add	r30, r30
 4f8:	ff 1f       	adc	r31, r31
 4fa:	ee 0f       	add	r30, r30
 4fc:	ff 1f       	adc	r31, r31
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	50 e0       	ldi	r21, 0x00	; 0
 502:	4c 0f       	add	r20, r28
 504:	5d 1f       	adc	r21, r29
 506:	e4 0f       	add	r30, r20
 508:	f5 1f       	adc	r31, r21
 50a:	40 81       	ld	r20, Z
 50c:	51 81       	ldd	r21, Z+1	; 0x01
 50e:	62 81       	ldd	r22, Z+2	; 0x02
 510:	73 81       	ldd	r23, Z+3	; 0x03
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	fc 01       	movw	r30, r24
 516:	ee 0f       	add	r30, r30
 518:	ff 1f       	adc	r31, r31
 51a:	ee 0f       	add	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	a1 e0       	ldi	r26, 0x01	; 1
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	ac 0f       	add	r26, r28
 524:	bd 1f       	adc	r27, r29
 526:	ea 0f       	add	r30, r26
 528:	fb 1f       	adc	r31, r27
 52a:	c0 80       	ld	r12, Z
 52c:	d1 80       	ldd	r13, Z+1	; 0x01
 52e:	e2 80       	ldd	r14, Z+2	; 0x02
 530:	f3 80       	ldd	r15, Z+3	; 0x03
 532:	4c 19       	sub	r20, r12
 534:	5d 09       	sbc	r21, r13
 536:	6e 09       	sbc	r22, r14
 538:	7f 09       	sbc	r23, r15
 53a:	04 0f       	add	r16, r20
 53c:	15 1f       	adc	r17, r21
 53e:	26 1f       	adc	r18, r22
 540:	37 1f       	adc	r19, r23
 542:	05 c0       	rjmp	.+10     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	00 e0       	ldi	r16, 0x00	; 0
 54a:	10 e0       	ldi	r17, 0x00	; 0
 54c:	98 01       	movw	r18, r16
 54e:	89 30       	cpi	r24, 0x09	; 9
 550:	91 05       	cpc	r25, r1
 552:	7c f2       	brlt	.-98     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 554:	c9 01       	movw	r24, r18
 556:	b8 01       	movw	r22, r16
 558:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	40 e0       	ldi	r20, 0x00	; 0
 562:	5e e3       	ldi	r21, 0x3E	; 62
 564:	0e 94 71 06 	call	0xce2	; 0xce2 <__mulsf3>
 568:	26 2f       	mov	r18, r22
 56a:	46 2f       	mov	r20, r22
 56c:	57 2f       	mov	r21, r23
 56e:	68 2f       	mov	r22, r24
 570:	79 2f       	mov	r23, r25
 572:	4d a7       	std	Y+45, r20	; 0x2d
 574:	5e a7       	std	Y+46, r21	; 0x2e
 576:	6f a7       	std	Y+47, r22	; 0x2f
 578:	78 ab       	std	Y+48, r23	; 0x30
 57a:	82 2f       	mov	r24, r18
 57c:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 580:	8e a5       	ldd	r24, Y+46	; 0x2e
 582:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 586:	8f a5       	ldd	r24, Y+47	; 0x2f
 588:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 58c:	88 a9       	ldd	r24, Y+48	; 0x30
 58e:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 592:	0c c0       	rjmp	.+24     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 594:	8f ef       	ldi	r24, 0xFF	; 255
 596:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 5a6:	8f ef       	ldi	r24, 0xFF	; 255
 5a8:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 5ac:	e0 96       	adiw	r28, 0x30	; 48
 5ae:	cd bf       	out	0x3d, r28	; 61
 5b0:	de bf       	out	0x3e, r29	; 62
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	ff 90       	pop	r15
 5bc:	ef 90       	pop	r14
 5be:	df 90       	pop	r13
 5c0:	cf 90       	pop	r12
 5c2:	08 95       	ret

000005c4 <write_volt>:
	
	write8_UART(hbyte);																//Send high byte
}

void write_volt(void)
{
 5c4:	0f 93       	push	r16
 5c6:	1f 93       	push	r17
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
	uint16_t bit_test;
	uint8_t hbyte;																	//High 8 bits I_bat
	uint8_t lbyte;
	
	read_voltages();
 5cc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <read_voltages>
	
	for(int i = 0; i < 7; i ++)
 5d0:	00 e0       	ldi	r16, 0x00	; 0
 5d2:	10 e0       	ldi	r17, 0x00	; 0
 5d4:	10 c0       	rjmp	.+32     	; 0x5f6 <write_volt+0x32>
	{
		lbyte = VOLT[i]&(0xFF);														//Check for set bits lower byte
 5d6:	e8 01       	movw	r28, r16
 5d8:	cc 0f       	add	r28, r28
 5da:	dd 1f       	adc	r29, r29
 5dc:	cd 50       	subi	r28, 0x0D	; 13
 5de:	d8 4b       	sbci	r29, 0xB8	; 184
		
		write8_UART(lbyte);															//Send lower byte
 5e0:	88 81       	ld	r24, Y
 5e2:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
		
		bit_test = VOLT[i]&(0xFF00);												//test 8 set bits high byte
 5e6:	88 81       	ld	r24, Y
 5e8:	99 81       	ldd	r25, Y+1	; 0x01
 5ea:	88 27       	eor	r24, r24
		bit_test >>= 8;																//Bit shift high byte to low byte register
		hbyte = (uint8_t)bit_test;													//typecast to 1 register
		
		write8_UART(hbyte);															//Send high byte
 5ec:	89 2f       	mov	r24, r25
 5ee:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
	uint8_t hbyte;																	//High 8 bits I_bat
	uint8_t lbyte;
	
	read_voltages();
	
	for(int i = 0; i < 7; i ++)
 5f2:	0f 5f       	subi	r16, 0xFF	; 255
 5f4:	1f 4f       	sbci	r17, 0xFF	; 255
 5f6:	07 30       	cpi	r16, 0x07	; 7
 5f8:	11 05       	cpc	r17, r1
 5fa:	6c f3       	brlt	.-38     	; 0x5d6 <write_volt+0x12>
		bit_test = 0;																//Reset just to be safe
		hbyte = 0;
		lbyte = 0;
	}
	
}
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	1f 91       	pop	r17
 602:	0f 91       	pop	r16
 604:	08 95       	ret

00000606 <TIMEOUT>:
	return average_I;
}

void TIMEOUT(void)
{
	start_DELAY();
 606:	0e 94 4c 01 	call	0x298	; 0x298 <start_DELAY>
	while(TCD1.CNT<50000)															//Do nothing for 0.1sec
 60a:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <__TEXT_REGION_LENGTH__+0x7be960>
 60e:	90 91 61 09 	lds	r25, 0x0961	; 0x800961 <__TEXT_REGION_LENGTH__+0x7be961>
 612:	80 35       	cpi	r24, 0x50	; 80
 614:	93 4c       	sbci	r25, 0xC3	; 195
 616:	c8 f3       	brcs	.-14     	; 0x60a <TIMEOUT+0x4>
	{
		//Do nothing
	}
	stop_DELAY();
 618:	0e 94 53 01 	call	0x2a6	; 0x2a6 <stop_DELAY>
 61c:	08 95       	ret

0000061e <read_IT>:
		write8_UART((0xFF));
	}	
}

void read_IT(void)
{
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
	
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCA clock speed to 62.5kHz
 622:	e0 e0       	ldi	r30, 0x00	; 0
 624:	f2 e0       	ldi	r31, 0x02	; 2
 626:	83 e0       	ldi	r24, 0x03	; 3
 628:	84 83       	std	Z+4, r24	; 0x04
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCB clock speed to 62.5kHz
 62a:	a0 e4       	ldi	r26, 0x40	; 64
 62c:	b2 e0       	ldi	r27, 0x02	; 2
 62e:	14 96       	adiw	r26, 0x04	; 4
 630:	8c 93       	st	X, r24
 632:	14 97       	sbiw	r26, 0x04	; 4
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;										//Set ADCA CH0 to Pin A4 as input for I_external
 634:	80 e2       	ldi	r24, 0x20	; 32
 636:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;										//Set ADCA CH1 to Pin A5 as input for I_battery
 638:	88 e2       	ldi	r24, 0x28	; 40
 63a:	81 a7       	std	Z+41, r24	; 0x29
	
	//ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;										//Set ADCB CH0 to Pin B5 as input for Temp_ambient

	ADCA.CTRLA |= ADC_FLUSH_bm;														//Enables ADCA
 63c:	80 81       	ld	r24, Z
 63e:	82 60       	ori	r24, 0x02	; 2
 640:	80 83       	st	Z, r24
	ADCB.CTRLA |= ADC_FLUSH_bm;														//Enables ADCB
 642:	8c 91       	ld	r24, X
 644:	82 60       	ori	r24, 0x02	; 2
 646:	8c 93       	st	X, r24
	
	ADCA.CTRLA |= ADC_ENABLE_bm;													//Enables ADCA
 648:	80 81       	ld	r24, Z
 64a:	81 60       	ori	r24, 0x01	; 1
 64c:	80 83       	st	Z, r24
	ADCB.CTRLA |= ADC_ENABLE_bm;													//Enables ADCB
 64e:	8c 91       	ld	r24, X
 650:	81 60       	ori	r24, 0x01	; 1
 652:	8c 93       	st	X, r24
	
	//TIMEOUT();
	
	
	ADCA.CTRLA |= (0x03 << 2);														//Start ADCA Conversion first two channels
 654:	80 81       	ld	r24, Z
 656:	8c 60       	ori	r24, 0x0C	; 12
 658:	80 83       	st	Z, r24
	ADCB.CTRLA |= (0x01 << 2);														//Start ADCB conversion CH0
 65a:	8c 91       	ld	r24, X
 65c:	84 60       	ori	r24, 0x04	; 4
 65e:	8c 93       	st	X, r24
	
	while( !((ADCA.INTFLAGS & 0x3) & (ADCB.INTFLAGS & 0x01)))                       //Wait for ADC conversion
 660:	02 c0       	rjmp	.+4      	; 0x666 <read_IT+0x48>
	
	TIMEOUT();
 662:	0e 94 03 03 	call	0x606	; 0x606 <TIMEOUT>
	
	
	ADCA.CTRLA |= (0x03 << 2);														//Start ADCA Conversion first two channels
	ADCB.CTRLA |= (0x01 << 2);														//Start ADCB conversion CH0
	
	while( !((ADCA.INTFLAGS & 0x3) & (ADCB.INTFLAGS & 0x01)))                       //Wait for ADC conversion
 666:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7be206>
 66a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
 66e:	81 70       	andi	r24, 0x01	; 1
 670:	89 23       	and	r24, r25
 672:	b9 f3       	breq	.-18     	; 0x662 <read_IT+0x44>
	
	TIMEOUT();
	
	IT[0] = (int16_t)ADCA.CH0.RES;													//Read I_external
 674:	e0 e0       	ldi	r30, 0x00	; 0
 676:	f2 e0       	ldi	r31, 0x02	; 2
 678:	84 a1       	ldd	r24, Z+36	; 0x24
 67a:	95 a1       	ldd	r25, Z+37	; 0x25
 67c:	c6 e0       	ldi	r28, 0x06	; 6
 67e:	d8 e4       	ldi	r29, 0x48	; 72
 680:	88 83       	st	Y, r24
 682:	99 83       	std	Y+1, r25	; 0x01
	IT[1] = (int16_t)ADCA.CH1.RES;													//Read I_battery
 684:	84 a5       	ldd	r24, Z+44	; 0x2c
 686:	95 a5       	ldd	r25, Z+45	; 0x2d
 688:	8a 83       	std	Y+2, r24	; 0x02
 68a:	9b 83       	std	Y+3, r25	; 0x03
	
	IT[2] = (int16_t)ADCB.CH0.RES;													//Read Temp_ambient
 68c:	a0 e4       	ldi	r26, 0x40	; 64
 68e:	b2 e0       	ldi	r27, 0x02	; 2
 690:	94 96       	adiw	r26, 0x24	; 36
 692:	8d 91       	ld	r24, X+
 694:	9c 91       	ld	r25, X
 696:	95 97       	sbiw	r26, 0x25	; 37
 698:	8c 83       	std	Y+4, r24	; 0x04
 69a:	9d 83       	std	Y+5, r25	; 0x05
	
	ADCA.INTFLAGS |= (0x03);														//clear interrupt flags ADCA
 69c:	86 81       	ldd	r24, Z+6	; 0x06
 69e:	83 60       	ori	r24, 0x03	; 3
 6a0:	86 83       	std	Z+6, r24	; 0x06
	ADCB.INTFLAGS |= (0x01);														//clear interrupt flags ADCB
 6a2:	16 96       	adiw	r26, 0x06	; 6
 6a4:	8c 91       	ld	r24, X
 6a6:	16 97       	sbiw	r26, 0x06	; 6
 6a8:	81 60       	ori	r24, 0x01	; 1
 6aa:	16 96       	adiw	r26, 0x06	; 6
 6ac:	8c 93       	st	X, r24
}
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret

000006b4 <read_supply_ext>:
	dac_data = (dac_output*4095)/DAC_VREF;											//calculate dac_channel_data for desired DAC output voltage
	return dac_data;
}

uint16_t read_supply_ext(void)
{
 6b4:	0f 93       	push	r16
 6b6:	1f 93       	push	r17
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
 6c0:	64 97       	sbiw	r28, 0x14	; 20
 6c2:	cd bf       	out	0x3d, r28	; 61
 6c4:	de bf       	out	0x3e, r29	; 62
	uint16_t current[10];
	uint16_t average_I;
	uint16_t sum = 0;																//Big enough sum of 10 12bit uints;
	
//	supply_ext();	
	PORTB_OUTSET = PIN2_bm;															//supply bat
 6c6:	84 e0       	ldi	r24, 0x04	; 4
 6c8:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
	TIMEOUT();
 6cc:	0e 94 03 03 	call	0x606	; 0x606 <TIMEOUT>
	PORTB_OUTCLR = PIN3_bm;															//disable ext
 6d0:	88 e0       	ldi	r24, 0x08	; 8
 6d2:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
	TIMEOUT();
 6d6:	0e 94 03 03 	call	0x606	; 0x606 <TIMEOUT>
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
 6da:	00 e0       	ldi	r16, 0x00	; 0
 6dc:	10 e0       	ldi	r17, 0x00	; 0
 6de:	15 c0       	rjmp	.+42     	; 0x70a <read_supply_ext+0x56>
	{
		read_IT();
 6e0:	0e 94 0f 03 	call	0x61e	; 0x61e <read_IT>
		current[i] = IT[0];
 6e4:	80 91 06 48 	lds	r24, 0x4806	; 0x804806 <IT>
 6e8:	90 91 07 48 	lds	r25, 0x4807	; 0x804807 <IT+0x1>
 6ec:	f8 01       	movw	r30, r16
 6ee:	ee 0f       	add	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	21 e0       	ldi	r18, 0x01	; 1
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	2c 0f       	add	r18, r28
 6f8:	3d 1f       	adc	r19, r29
 6fa:	e2 0f       	add	r30, r18
 6fc:	f3 1f       	adc	r31, r19
 6fe:	80 83       	st	Z, r24
 700:	91 83       	std	Z+1, r25	; 0x01
		TIMEOUT();
 702:	0e 94 03 03 	call	0x606	; 0x606 <TIMEOUT>
	PORTB_OUTSET = PIN2_bm;															//supply bat
	TIMEOUT();
	PORTB_OUTCLR = PIN3_bm;															//disable ext
	TIMEOUT();
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
 706:	0f 5f       	subi	r16, 0xFF	; 255
 708:	1f 4f       	sbci	r17, 0xFF	; 255
 70a:	0a 30       	cpi	r16, 0x0A	; 10
 70c:	11 05       	cpc	r17, r1
 70e:	44 f3       	brlt	.-48     	; 0x6e0 <read_supply_ext+0x2c>
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	20 e0       	ldi	r18, 0x00	; 0
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	0e c0       	rjmp	.+28     	; 0x736 <read_supply_ext+0x82>
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
	{
		sum += current[i];
 71a:	fc 01       	movw	r30, r24
 71c:	ee 0f       	add	r30, r30
 71e:	ff 1f       	adc	r31, r31
 720:	41 e0       	ldi	r20, 0x01	; 1
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	4c 0f       	add	r20, r28
 726:	5d 1f       	adc	r21, r29
 728:	e4 0f       	add	r30, r20
 72a:	f5 1f       	adc	r31, r21
 72c:	40 81       	ld	r20, Z
 72e:	51 81       	ldd	r21, Z+1	; 0x01
 730:	24 0f       	add	r18, r20
 732:	35 1f       	adc	r19, r21
		read_IT();
		current[i] = IT[0];
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
 734:	01 96       	adiw	r24, 0x01	; 1
 736:	8a 30       	cpi	r24, 0x0A	; 10
 738:	91 05       	cpc	r25, r1
 73a:	7c f3       	brlt	.-34     	; 0x71a <read_supply_ext+0x66>
	{
		sum += current[i];
	}
	
	average_I = sum/10;
 73c:	ad ec       	ldi	r26, 0xCD	; 205
 73e:	bc ec       	ldi	r27, 0xCC	; 204
 740:	0e 94 de 06 	call	0xdbc	; 0xdbc <__umulhisi3>
	
	return average_I;
}
 744:	96 95       	lsr	r25
 746:	87 95       	ror	r24
 748:	96 95       	lsr	r25
 74a:	87 95       	ror	r24
 74c:	96 95       	lsr	r25
 74e:	87 95       	ror	r24
 750:	64 96       	adiw	r28, 0x14	; 20
 752:	cd bf       	out	0x3d, r28	; 61
 754:	de bf       	out	0x3e, r29	; 62
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	1f 91       	pop	r17
 75c:	0f 91       	pop	r16
 75e:	08 95       	ret

00000760 <write_ext>:
	
	write8_UART(hbyte);																//Send high byte											
}

void write_ext(void)
{
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
	uint16_t I_ext;
	uint16_t bit_test;
	uint8_t hbyte;																	//High 8 bits I_bat
	uint8_t lbyte;																	//Low 8 bits I_bat
	
	I_ext = read_supply_ext();														//Enables battery supply and reads the average current
 764:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <read_supply_ext>
 768:	ec 01       	movw	r28, r24
	lbyte = I_ext&(0xFF);															//Check for set bits lower byte
	
	write8_UART(lbyte);																//Send lower byte
 76a:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
	
	bit_test = I_ext&(0xFF00);														//test 8 set bits high byte
 76e:	cc 27       	eor	r28, r28
	bit_test >>= 8;																	//Bit shift high byte to low byte register
	hbyte = (uint8_t)bit_test;														//typecast to 1 register
	
	write8_UART(hbyte);																//Send high byte
 770:	8d 2f       	mov	r24, r29
 772:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
}
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	08 95       	ret

0000077c <read_supply_bat>:
	write8_UART(hbyte);																//Send high byte
}
#endif

uint16_t read_supply_bat(void)
{
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
 788:	64 97       	sbiw	r28, 0x14	; 20
 78a:	cd bf       	out	0x3d, r28	; 61
 78c:	de bf       	out	0x3e, r29	; 62
	uint16_t current[10];
	uint16_t average_I;
	uint16_t sum = 0;																//Big enough sum of 10 12bit uints;
	
	//supply_bat();
	PORTB_OUTSET = PIN3_bm;															//enable ext
 78e:	88 e0       	ldi	r24, 0x08	; 8
 790:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
	TIMEOUT();
 794:	0e 94 03 03 	call	0x606	; 0x606 <TIMEOUT>
	PORTB_OUTCLR = PIN2_bm;															//disable bat
 798:	84 e0       	ldi	r24, 0x04	; 4
 79a:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
	TIMEOUT();
 79e:	0e 94 03 03 	call	0x606	; 0x606 <TIMEOUT>
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
 7a2:	00 e0       	ldi	r16, 0x00	; 0
 7a4:	10 e0       	ldi	r17, 0x00	; 0
 7a6:	15 c0       	rjmp	.+42     	; 0x7d2 <read_supply_bat+0x56>
	{
		read_IT();
 7a8:	0e 94 0f 03 	call	0x61e	; 0x61e <read_IT>
		current[i] = IT[1];
 7ac:	80 91 08 48 	lds	r24, 0x4808	; 0x804808 <IT+0x2>
 7b0:	90 91 09 48 	lds	r25, 0x4809	; 0x804809 <IT+0x3>
 7b4:	f8 01       	movw	r30, r16
 7b6:	ee 0f       	add	r30, r30
 7b8:	ff 1f       	adc	r31, r31
 7ba:	21 e0       	ldi	r18, 0x01	; 1
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	2c 0f       	add	r18, r28
 7c0:	3d 1f       	adc	r19, r29
 7c2:	e2 0f       	add	r30, r18
 7c4:	f3 1f       	adc	r31, r19
 7c6:	80 83       	st	Z, r24
 7c8:	91 83       	std	Z+1, r25	; 0x01
		TIMEOUT();
 7ca:	0e 94 03 03 	call	0x606	; 0x606 <TIMEOUT>
	PORTB_OUTSET = PIN3_bm;															//enable ext
	TIMEOUT();
	PORTB_OUTCLR = PIN2_bm;															//disable bat
	TIMEOUT();
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
 7ce:	0f 5f       	subi	r16, 0xFF	; 255
 7d0:	1f 4f       	sbci	r17, 0xFF	; 255
 7d2:	0a 30       	cpi	r16, 0x0A	; 10
 7d4:	11 05       	cpc	r17, r1
 7d6:	44 f3       	brlt	.-48     	; 0x7a8 <read_supply_bat+0x2c>
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	20 e0       	ldi	r18, 0x00	; 0
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	0e c0       	rjmp	.+28     	; 0x7fe <read_supply_bat+0x82>
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
	{
		sum += current[i];
 7e2:	fc 01       	movw	r30, r24
 7e4:	ee 0f       	add	r30, r30
 7e6:	ff 1f       	adc	r31, r31
 7e8:	41 e0       	ldi	r20, 0x01	; 1
 7ea:	50 e0       	ldi	r21, 0x00	; 0
 7ec:	4c 0f       	add	r20, r28
 7ee:	5d 1f       	adc	r21, r29
 7f0:	e4 0f       	add	r30, r20
 7f2:	f5 1f       	adc	r31, r21
 7f4:	40 81       	ld	r20, Z
 7f6:	51 81       	ldd	r21, Z+1	; 0x01
 7f8:	24 0f       	add	r18, r20
 7fa:	35 1f       	adc	r19, r21
		read_IT();
		current[i] = IT[1];
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
 7fc:	01 96       	adiw	r24, 0x01	; 1
 7fe:	8a 30       	cpi	r24, 0x0A	; 10
 800:	91 05       	cpc	r25, r1
 802:	7c f3       	brlt	.-34     	; 0x7e2 <read_supply_bat+0x66>
	{
		sum += current[i];
	}
	
	average_I = sum/10;
 804:	ad ec       	ldi	r26, 0xCD	; 205
 806:	bc ec       	ldi	r27, 0xCC	; 204
 808:	0e 94 de 06 	call	0xdbc	; 0xdbc <__umulhisi3>
	
	return average_I;
}
 80c:	96 95       	lsr	r25
 80e:	87 95       	ror	r24
 810:	96 95       	lsr	r25
 812:	87 95       	ror	r24
 814:	96 95       	lsr	r25
 816:	87 95       	ror	r24
 818:	64 96       	adiw	r28, 0x14	; 20
 81a:	cd bf       	out	0x3d, r28	; 61
 81c:	de bf       	out	0x3e, r29	; 62
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	1f 91       	pop	r17
 824:	0f 91       	pop	r16
 826:	08 95       	ret

00000828 <write_bat>:
	
	return average_I;
}

void write_bat(void)
{
 828:	cf 93       	push	r28
 82a:	df 93       	push	r29
	uint16_t I_bat;
	uint16_t bit_test;
	uint8_t hbyte;																	//High 8 bits I_bat
	uint8_t lbyte;																	//Low 8 bits I_bat
	
	I_bat = read_supply_bat();														//Enables battery supply and reads the average current
 82c:	0e 94 be 03 	call	0x77c	; 0x77c <read_supply_bat>
 830:	ec 01       	movw	r28, r24
	lbyte = I_bat&(0xFF);															//Check for set bits lower byte
	
	write8_UART(lbyte);																//Send lower byte
 832:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
	
	bit_test = I_bat&(0xFF00);														//test 8 set bits high byte
 836:	cc 27       	eor	r28, r28
	bit_test >>= 8;																	//Bit shift high byte to low byte register
	hbyte = (uint8_t)bit_test;														//typecast to 1 register
	
	write8_UART(hbyte);																//Send high byte											
 838:	8d 2f       	mov	r24, r29
 83a:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
}
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	08 95       	ret

00000844 <LPM_P_OFF>:
}
#endif

void LPM_P_OFF(void)
{
	PORTB_OUTCLR = PIN2_bm;															//turn battery supply off
 844:	e6 e2       	ldi	r30, 0x26	; 38
 846:	f6 e0       	ldi	r31, 0x06	; 6
 848:	84 e0       	ldi	r24, 0x04	; 4
 84a:	80 83       	st	Z, r24
	PORTB_OUTCLR = PIN3_bm;															//turn external supply off 
 84c:	88 e0       	ldi	r24, 0x08	; 8
 84e:	80 83       	st	Z, r24
 850:	08 95       	ret

00000852 <init_UART>:
#include <stdio.h>
#include "start.h"

void init_UART(void)
{
	PORTE_DIRCLR = PIN2_bm;												//Set RX pin USARTE0 E2 as input
 852:	84 e0       	ldi	r24, 0x04	; 4
 854:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x7be682>
	PORTE_DIRSET = PIN3_bm;												//Set TX pin USARTE0 E3 as output
 858:	88 e0       	ldi	r24, 0x08	; 8
 85a:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	PORTE_OUTSET = PIN3_bm;												//Set TX pin to high
 85e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	USARTE0.BAUDCTRLB |= (0x0D<<4);										//Set BSCALE to -3 for baud 115200
 862:	e0 ea       	ldi	r30, 0xA0	; 160
 864:	fa e0       	ldi	r31, 0x0A	; 10
 866:	87 81       	ldd	r24, Z+7	; 0x07
 868:	80 6d       	ori	r24, 0xD0	; 208
 86a:	87 83       	std	Z+7, r24	; 0x07
	USARTE0.BAUDCTRLA |= (0x83);										//Set BSEL to 131 for baud 115200
 86c:	86 81       	ldd	r24, Z+6	; 0x06
 86e:	83 68       	ori	r24, 0x83	; 131
 870:	86 83       	std	Z+6, r24	; 0x06
	
	USARTE0.CTRLC |= (0x03);											//Sets amount of data bits to 8
 872:	85 81       	ldd	r24, Z+5	; 0x05
 874:	83 60       	ori	r24, 0x03	; 3
 876:	85 83       	std	Z+5, r24	; 0x05
	USARTE0.CTRLB |= (0x03<<3);											//Sets the Rx and TX enable bits.
 878:	84 81       	ldd	r24, Z+4	; 0x04
 87a:	88 61       	ori	r24, 0x18	; 24
 87c:	84 83       	std	Z+4, r24	; 0x04
 87e:	08 95       	ret

00000880 <init_CLK>:
}

void init_CLK(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;											// Enable internal 32 MHz oscillator
 880:	e0 e5       	ldi	r30, 0x50	; 80
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	80 81       	ld	r24, Z
 886:	82 60       	ori	r24, 0x02	; 2
 888:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));								// Wait for oscillator is ready
 88a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
 88e:	81 ff       	sbrs	r24, 1
 890:	fc cf       	rjmp	.-8      	; 0x88a <init_CLK+0xa>
	CCP = CCP_IOREG_gc;													// Security signature to modify clock
 892:	88 ed       	ldi	r24, 0xD8	; 216
 894:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;									// Select 32 MHz oscillator
 896:	e0 e4       	ldi	r30, 0x40	; 64
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	80 83       	st	Z, r24
	CLK.PSCTRL = CLK_PSADIV_1_gc;										// Set PSA to 1
 89e:	11 82       	std	Z+1, r1	; 0x01
	CLK.PSCTRL = CLK_PSBCDIV_1_1_gc;									// Set PSB&PSC to 1
 8a0:	11 82       	std	Z+1, r1	; 0x01
 8a2:	08 95       	ret

000008a4 <init_TIMER>:
}

void init_TIMER(void)
{
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;									//Set timer E0 to normal mode
 8a4:	e0 e0       	ldi	r30, 0x00	; 0
 8a6:	fa e0       	ldi	r31, 0x0A	; 10
 8a8:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;										//Timer is off until clksel is changed
 8aa:	10 82       	st	Z, r1
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;									//Set overflow interrupt TCE0 to low level
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	86 83       	std	Z+6, r24	; 0x06
	TCE0.PERL = 0xFF;
 8b0:	8f ef       	ldi	r24, 0xFF	; 255
 8b2:	86 a3       	std	Z+38, r24	; 0x26
	TCE0.PERH = 0xFF;													//t = N*(PER + 1)/F_CPU = 0.25
 8b4:	87 a3       	std	Z+39, r24	; 0x27
 8b6:	08 95       	ret

000008b8 <init_DELAY>:
}

void init_DELAY(void)													//Uses two 16Bit TC's to form 32 Bit one
{
	TCD1.CTRLB = TC_WGMODE_NORMAL_gc;									//Set timer E0 to normal mode
 8b8:	e0 e4       	ldi	r30, 0x40	; 64
 8ba:	f9 e0       	ldi	r31, 0x09	; 9
 8bc:	11 82       	std	Z+1, r1	; 0x01
	TCD1.CTRLA = TC_CLKSEL_OFF_gc;										//Timer is off until clksel is changed
 8be:	10 82       	st	Z, r1
	TCD1.PER = 0xFFFF;													//t = N*(PER + 1)/F_CPU = 0.25
 8c0:	8f ef       	ldi	r24, 0xFF	; 255
 8c2:	9f ef       	ldi	r25, 0xFF	; 255
 8c4:	86 a3       	std	Z+38, r24	; 0x26
 8c6:	97 a3       	std	Z+39, r25	; 0x27
 8c8:	08 95       	ret

000008ca <init_ADC>:
}

void init_ADC(void)
{
	PORTA_DIRCLR = PIN0_bm;												//VCC_main
 8ca:	e2 e0       	ldi	r30, 0x02	; 2
 8cc:	f6 e0       	ldi	r31, 0x06	; 6
 8ce:	31 e0       	ldi	r19, 0x01	; 1
 8d0:	30 83       	st	Z, r19
	PORTA_DIRCLR = PIN1_bm;												//CORE_VDD
 8d2:	22 e0       	ldi	r18, 0x02	; 2
 8d4:	20 83       	st	Z, r18
	PORTA_DIRCLR = PIN2_bm;												//+1.8VDD
 8d6:	84 e0       	ldi	r24, 0x04	; 4
 8d8:	80 83       	st	Z, r24
	PORTA_DIRCLR = PIN3_bm;												//+3.0VIO
 8da:	88 e0       	ldi	r24, 0x08	; 8
 8dc:	80 83       	st	Z, r24
	PORTA_DIRCLR = PIN4_bm;												//I_external
 8de:	90 e1       	ldi	r25, 0x10	; 16
 8e0:	90 83       	st	Z, r25
	PORTA_DIRCLR = PIN5_bm;												//I_battery
 8e2:	80 e2       	ldi	r24, 0x20	; 32
 8e4:	80 83       	st	Z, r24
	
	PORTB_DIRCLR = PIN0_bm;												//VPP_2V5
 8e6:	e2 e2       	ldi	r30, 0x22	; 34
 8e8:	f6 e0       	ldi	r31, 0x06	; 6
 8ea:	30 83       	st	Z, r19
	PORTB_DIRCLR = PIN1_bm;												//+1.8VIO
 8ec:	20 83       	st	Z, r18
	PORTB_DIRCLR = PIN4_bm;												//BLE_VDD
 8ee:	90 83       	st	Z, r25
	PORTB_DIRCLR = PIN5_bm;												//D0 samples
 8f0:	80 83       	st	Z, r24
	PORTB_DIRCLR = PIN6_bm;												//D1 samples
 8f2:	80 e4       	ldi	r24, 0x40	; 64
 8f4:	80 83       	st	Z, r24
	
	//ADCA.PRESCALER |= ADC_PRESCALER_DIV8_gc;							//Set ADCA clock speed to 62.5kHz
	//ADCB.PRESCALER |= ADC_PRESCALER_DIV8_gc;							//Set ADCB clock speed to 62.5kHz
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCA clock speed to 62.5kHz
 8f6:	a0 e0       	ldi	r26, 0x00	; 0
 8f8:	b2 e0       	ldi	r27, 0x02	; 2
 8fa:	83 e0       	ldi	r24, 0x03	; 3
 8fc:	14 96       	adiw	r26, 0x04	; 4
 8fe:	8c 93       	st	X, r24
 900:	14 97       	sbiw	r26, 0x04	; 4
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCB clock speed to 62.5kHz
 902:	e0 e4       	ldi	r30, 0x40	; 64
 904:	f2 e0       	ldi	r31, 0x02	; 2
 906:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCA to 12bit resolution
 908:	12 96       	adiw	r26, 0x02	; 2
 90a:	8c 91       	ld	r24, X
 90c:	12 97       	sbiw	r26, 0x02	; 2
 90e:	12 96       	adiw	r26, 0x02	; 2
 910:	8c 93       	st	X, r24
 912:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCB to 12bit resolution
 914:	82 81       	ldd	r24, Z+2	; 0x02
 916:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCA reference voltage to internal VCC
 918:	12 96       	adiw	r26, 0x02	; 2
 91a:	8c 91       	ld	r24, X
 91c:	12 97       	sbiw	r26, 0x02	; 2
 91e:	80 61       	ori	r24, 0x10	; 16
 920:	12 96       	adiw	r26, 0x02	; 2
 922:	8c 93       	st	X, r24
 924:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCB reference voltage to internal VCC
 926:	82 81       	ldd	r24, Z+2	; 0x02
 928:	80 61       	ori	r24, 0x10	; 16
 92a:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 0 differential input
 92c:	90 96       	adiw	r26, 0x20	; 32
 92e:	8c 91       	ld	r24, X
 930:	90 97       	sbiw	r26, 0x20	; 32
 932:	81 60       	ori	r24, 0x01	; 1
 934:	90 96       	adiw	r26, 0x20	; 32
 936:	8c 93       	st	X, r24
 938:	90 97       	sbiw	r26, 0x20	; 32
	ADCA.CH1.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 1 differential input
 93a:	98 96       	adiw	r26, 0x28	; 40
 93c:	8c 91       	ld	r24, X
 93e:	98 97       	sbiw	r26, 0x28	; 40
 940:	81 60       	ori	r24, 0x01	; 1
 942:	98 96       	adiw	r26, 0x28	; 40
 944:	8c 93       	st	X, r24
 946:	98 97       	sbiw	r26, 0x28	; 40
	ADCA.CH2.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 2 differential input
 948:	d0 96       	adiw	r26, 0x30	; 48
 94a:	8c 91       	ld	r24, X
 94c:	d0 97       	sbiw	r26, 0x30	; 48
 94e:	81 60       	ori	r24, 0x01	; 1
 950:	d0 96       	adiw	r26, 0x30	; 48
 952:	8c 93       	st	X, r24
 954:	d0 97       	sbiw	r26, 0x30	; 48
	ADCA.CH3.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 3 differential input
 956:	d8 96       	adiw	r26, 0x38	; 56
 958:	8c 91       	ld	r24, X
 95a:	d8 97       	sbiw	r26, 0x38	; 56
 95c:	81 60       	ori	r24, 0x01	; 1
 95e:	d8 96       	adiw	r26, 0x38	; 56
 960:	8c 93       	st	X, r24
 962:	d8 97       	sbiw	r26, 0x38	; 56
	
	ADCB.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 0 differential input
 964:	80 a1       	ldd	r24, Z+32	; 0x20
 966:	81 60       	ori	r24, 0x01	; 1
 968:	80 a3       	std	Z+32, r24	; 0x20
	ADCB.CH1.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 1 differential input
 96a:	80 a5       	ldd	r24, Z+40	; 0x28
 96c:	81 60       	ori	r24, 0x01	; 1
 96e:	80 a7       	std	Z+40, r24	; 0x28
	ADCB.CH2.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 2 differential input
 970:	80 a9       	ldd	r24, Z+48	; 0x30
 972:	81 60       	ori	r24, 0x01	; 1
 974:	80 ab       	std	Z+48, r24	; 0x30
	ADCB.CH3.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 3 differential input
 976:	80 ad       	ldd	r24, Z+56	; 0x38
 978:	81 60       	ori	r24, 0x01	; 1
 97a:	80 af       	std	Z+56, r24	; 0x38
	
	ADCA.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 0 reference voltage to internal GND
 97c:	91 96       	adiw	r26, 0x21	; 33
 97e:	8c 91       	ld	r24, X
 980:	91 97       	sbiw	r26, 0x21	; 33
 982:	87 60       	ori	r24, 0x07	; 7
 984:	91 96       	adiw	r26, 0x21	; 33
 986:	8c 93       	st	X, r24
 988:	91 97       	sbiw	r26, 0x21	; 33
	ADCA.CH1.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 1 reference voltage to internal GND
 98a:	99 96       	adiw	r26, 0x29	; 41
 98c:	8c 91       	ld	r24, X
 98e:	99 97       	sbiw	r26, 0x29	; 41
 990:	87 60       	ori	r24, 0x07	; 7
 992:	99 96       	adiw	r26, 0x29	; 41
 994:	8c 93       	st	X, r24
 996:	99 97       	sbiw	r26, 0x29	; 41
	ADCA.CH2.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 2 reference voltage to internal GND
 998:	d1 96       	adiw	r26, 0x31	; 49
 99a:	8c 91       	ld	r24, X
 99c:	d1 97       	sbiw	r26, 0x31	; 49
 99e:	87 60       	ori	r24, 0x07	; 7
 9a0:	d1 96       	adiw	r26, 0x31	; 49
 9a2:	8c 93       	st	X, r24
 9a4:	d1 97       	sbiw	r26, 0x31	; 49
	ADCA.CH3.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 3 reference voltage to internal GND
 9a6:	d9 96       	adiw	r26, 0x39	; 57
 9a8:	8c 91       	ld	r24, X
 9aa:	d9 97       	sbiw	r26, 0x39	; 57
 9ac:	87 60       	ori	r24, 0x07	; 7
 9ae:	d9 96       	adiw	r26, 0x39	; 57
 9b0:	8c 93       	st	X, r24
	
	ADCB.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 0 reference voltage to internal GND
 9b2:	81 a1       	ldd	r24, Z+33	; 0x21
 9b4:	87 60       	ori	r24, 0x07	; 7
 9b6:	81 a3       	std	Z+33, r24	; 0x21
	ADCB.CH1.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 1 reference voltage to internal GND
 9b8:	81 a5       	ldd	r24, Z+41	; 0x29
 9ba:	87 60       	ori	r24, 0x07	; 7
 9bc:	81 a7       	std	Z+41, r24	; 0x29
	ADCB.CH2.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 2 reference voltage to internal GND
 9be:	81 a9       	ldd	r24, Z+49	; 0x31
 9c0:	87 60       	ori	r24, 0x07	; 7
 9c2:	81 ab       	std	Z+49, r24	; 0x31
	ADCB.CH3.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 3 reference voltage to internal GND
 9c4:	81 ad       	ldd	r24, Z+57	; 0x39
 9c6:	87 60       	ori	r24, 0x07	; 7
 9c8:	81 af       	std	Z+57, r24	; 0x39
 9ca:	08 95       	ret

000009cc <init_supply>:
}
#endif

void init_supply(void)
{
	PORTB_DIRSET = PIN2_bm;												//Set pin as output to enable ... supply
 9cc:	e1 e2       	ldi	r30, 0x21	; 33
 9ce:	f6 e0       	ldi	r31, 0x06	; 6
 9d0:	84 e0       	ldi	r24, 0x04	; 4
 9d2:	80 83       	st	Z, r24
	PORTB_DIRSET = PIN3_bm;												//Set pin as output to enable ... supply
 9d4:	88 e0       	ldi	r24, 0x08	; 8
 9d6:	80 83       	st	Z, r24
 9d8:	08 95       	ret

000009da <__vector_47>:
char OUTPUTBUF[5];
int16_t OutVar;
uint16_t D0_raw[SAMPLE_WINDOW];

ISR(TCE0_OVF_vect)														//Do something every timer E0 overflow
{
 9da:	1f 92       	push	r1
 9dc:	0f 92       	push	r0
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	0f 92       	push	r0
 9e2:	11 24       	eor	r1, r1
 9e4:	8f 93       	push	r24
 9e6:	9f 93       	push	r25
	PTimeOut = 1;														//If TC overflow occurs before collecting pulses stop while loop
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <PTimeOut>
 9f0:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <PTimeOut+0x1>
}
 9f4:	9f 91       	pop	r25
 9f6:	8f 91       	pop	r24
 9f8:	0f 90       	pop	r0
 9fa:	0f be       	out	0x3f, r0	; 63
 9fc:	0f 90       	pop	r0
 9fe:	1f 90       	pop	r1
 a00:	18 95       	reti

00000a02 <__vector_64>:

ISR(PORTD_INT0_vect)													//Do something when PD2 encounters falling edge
{
 a02:	1f 92       	push	r1
 a04:	0f 92       	push	r0
 a06:	0f b6       	in	r0, 0x3f	; 63
 a08:	0f 92       	push	r0
 a0a:	11 24       	eor	r1, r1
 a0c:	0b b6       	in	r0, 0x3b	; 59
 a0e:	0f 92       	push	r0
 a10:	2f 93       	push	r18
 a12:	3f 93       	push	r19
 a14:	4f 93       	push	r20
 a16:	8f 93       	push	r24
 a18:	9f 93       	push	r25
 a1a:	ef 93       	push	r30
 a1c:	ff 93       	push	r31
	PTime[TC_samples] = (((TCE0.CNTH+1)<<8)+TCE0.CNTL+1);
 a1e:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 a22:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 a26:	e0 e0       	ldi	r30, 0x00	; 0
 a28:	fa e0       	ldi	r31, 0x0A	; 10
 a2a:	81 a1       	ldd	r24, Z+33	; 0x21
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	01 96       	adiw	r24, 0x01	; 1
 a30:	98 2f       	mov	r25, r24
 a32:	88 27       	eor	r24, r24
 a34:	40 a1       	ldd	r20, Z+32	; 0x20
 a36:	84 0f       	add	r24, r20
 a38:	91 1d       	adc	r25, r1
 a3a:	01 96       	adiw	r24, 0x01	; 1
 a3c:	f9 01       	movw	r30, r18
 a3e:	ee 0f       	add	r30, r30
 a40:	ff 1f       	adc	r31, r31
 a42:	ed 52       	subi	r30, 0x2D	; 45
 a44:	ff 4d       	sbci	r31, 0xDF	; 223
 a46:	80 83       	st	Z, r24
 a48:	91 83       	std	Z+1, r25	; 0x01
	TC_samples++;
 a4a:	2f 5f       	subi	r18, 0xFF	; 255
 a4c:	3f 4f       	sbci	r19, 0xFF	; 255
 a4e:	20 93 00 20 	sts	0x2000, r18	; 0x802000 <__DATA_REGION_ORIGIN__>
 a52:	30 93 01 20 	sts	0x2001, r19	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
}
 a56:	ff 91       	pop	r31
 a58:	ef 91       	pop	r30
 a5a:	9f 91       	pop	r25
 a5c:	8f 91       	pop	r24
 a5e:	4f 91       	pop	r20
 a60:	3f 91       	pop	r19
 a62:	2f 91       	pop	r18
 a64:	0f 90       	pop	r0
 a66:	0b be       	out	0x3b, r0	; 59
 a68:	0f 90       	pop	r0
 a6a:	0f be       	out	0x3f, r0	; 63
 a6c:	0f 90       	pop	r0
 a6e:	1f 90       	pop	r1
 a70:	18 95       	reti

00000a72 <__vector_65>:

ISR(PORTD_INT1_vect)													//Do something when PD1 encounters falling edge
{
 a72:	1f 92       	push	r1
 a74:	0f 92       	push	r0
 a76:	0f b6       	in	r0, 0x3f	; 63
 a78:	0f 92       	push	r0
 a7a:	11 24       	eor	r1, r1
	//Do something
}
 a7c:	0f 90       	pop	r0
 a7e:	0f be       	out	0x3f, r0	; 63
 a80:	0f 90       	pop	r0
 a82:	1f 90       	pop	r1
 a84:	18 95       	reti

00000a86 <main>:

int main(void)
{
	init_CLK();
 a86:	0e 94 40 04 	call	0x880	; 0x880 <init_CLK>
//	init_stream(F_CPU);
	init_TIMER();
 a8a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <init_TIMER>
	init_DELAY();
 a8e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <init_DELAY>
	init_ADC();
 a92:	0e 94 65 04 	call	0x8ca	; 0x8ca <init_ADC>
//	init_DAC();
	init_UART();
 a96:	0e 94 29 04 	call	0x852	; 0x852 <init_UART>
	init_supply();
 a9a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <init_supply>
	sei();
 a9e:	78 94       	sei
	PMIC.CTRL |= PMIC_LOLVLEN_bm;										//Set low level interrupts
 aa0:	e0 ea       	ldi	r30, 0xA0	; 160
 aa2:	f0 e0       	ldi	r31, 0x00	; 0
 aa4:	82 81       	ldd	r24, Z+2	; 0x02
 aa6:	81 60       	ori	r24, 0x01	; 1
 aa8:	82 83       	std	Z+2, r24	; 0x02
	
	PORTA_DIRSET = PIN7_bm;												//Set I'm alive pin as output
 aaa:	80 e8       	ldi	r24, 0x80	; 128
 aac:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7be601>
	PORTA_OUTSET = PIN7_bm;												//Enable I'm alive LED
 ab0:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
	
	PORTE_DIRSET = PIN4_bm;												//Timing debug pin
 ab4:	80 e1       	ldi	r24, 0x10	; 16
 ab6:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
   
   uint8_t uart_data;

    while (1) 
    {
		uart_data = read_UART();
 aba:	0e 94 21 01 	call	0x242	; 0x242 <read_UART>
		switch(uart_data)
 abe:	8e 31       	cpi	r24, 0x1E	; 30
 ac0:	99 f0       	breq	.+38     	; 0xae8 <main+0x62>
 ac2:	28 f4       	brcc	.+10     	; 0xace <main+0x48>
 ac4:	8a 30       	cpi	r24, 0x0A	; 10
 ac6:	51 f0       	breq	.+20     	; 0xadc <main+0x56>
 ac8:	84 31       	cpi	r24, 0x14	; 20
 aca:	59 f0       	breq	.+22     	; 0xae2 <main+0x5c>
 acc:	1d c0       	rjmp	.+58     	; 0xb08 <main+0x82>
 ace:	82 33       	cpi	r24, 0x32	; 50
 ad0:	a9 f0       	breq	.+42     	; 0xafc <main+0x76>
 ad2:	8c 33       	cpi	r24, 0x3C	; 60
 ad4:	b1 f0       	breq	.+44     	; 0xb02 <main+0x7c>
 ad6:	88 32       	cpi	r24, 0x28	; 40
 ad8:	b9 f4       	brne	.+46     	; 0xb08 <main+0x82>
 ada:	09 c0       	rjmp	.+18     	; 0xaee <main+0x68>
		{
			case(10):
				write_ext();											//Enables external supply + reads average current 1 sec + writes lbyte and then hbyte
 adc:	0e 94 b0 03 	call	0x760	; 0x760 <write_ext>
				break;
 ae0:	ec cf       	rjmp	.-40     	; 0xaba <main+0x34>
				
			case(20):
				write_bat();											//Enables battery supply + reads average current 1 sec
 ae2:	0e 94 14 04 	call	0x828	; 0x828 <write_bat>
				break;
 ae6:	e9 cf       	rjmp	.-46     	; 0xaba <main+0x34>
				
			case(30):
				write_volt();											//Reads voltages and converts them to two uint8_t data packages (14 packages total)
 ae8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <write_volt>
				//read_voltages();
				break;
 aec:	e6 cf       	rjmp	.-52     	; 0xaba <main+0x34>
				
			case(40):
				write8_UART((0xFF));									//Write error code max 16bit value as other functions cant reach 0xFFFF
 aee:	8f ef       	ldi	r24, 0xFF	; 255
 af0:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				write8_UART((0xFF));									//Place D0 function here
 af4:	8f ef       	ldi	r24, 0xFF	; 255
 af6:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				break;
 afa:	df cf       	rjmp	.-66     	; 0xaba <main+0x34>
				
			case(50):
				fread_D0();												//read the frequency of Digital outputs
 afc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <fread_D0>
				//write8_UART((uint8_t)D0_raw[0]);						//debug print to MATLAB
				break;
 b00:	dc cf       	rjmp	.-72     	; 0xaba <main+0x34>
				
			case(60):
				LPM_P_OFF();											//turn of both external and bat supply to LPM
 b02:	0e 94 22 04 	call	0x844	; 0x844 <LPM_P_OFF>
				//write8_UART((0xFF));
				break;
 b06:	d9 cf       	rjmp	.-78     	; 0xaba <main+0x34>
				
			default:
				write8_UART((0xFF));									//Write error code max 16bit value as other functions cant reach 0xFFFF
 b08:	8f ef       	ldi	r24, 0xFF	; 255
 b0a:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				write8_UART((0xFF));
 b0e:	8f ef       	ldi	r24, 0xFF	; 255
 b10:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				break;	
 b14:	d2 cf       	rjmp	.-92     	; 0xaba <main+0x34>

00000b16 <__vector_119>:
} // WriteByte_F0 

/*  \brief  ISR for receiving bytes from UARTF0.
 *          It puts the received byte in the RX buffer
 */
ISR(USARTF0_RXC_vect) {
 b16:	1f 92       	push	r1
 b18:	0f 92       	push	r0
 b1a:	0f b6       	in	r0, 0x3f	; 63
 b1c:	0f 92       	push	r0
 b1e:	11 24       	eor	r1, r1
 b20:	0b b6       	in	r0, 0x3b	; 59
 b22:	0f 92       	push	r0
 b24:	8f 93       	push	r24
 b26:	9f 93       	push	r25
 b28:	ef 93       	push	r30
 b2a:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_f0_wridx;
 b2c:	80 91 69 20 	lds	r24, 0x2069	; 0x802069 <rx_f0_wridx>
	rx_f0_buf[curSlot] = USARTF0.DATA;
 b30:	e8 2f       	mov	r30, r24
 b32:	f0 e0       	ldi	r31, 0x00	; 0
 b34:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x7beba0>
 b38:	ec 5f       	subi	r30, 0xFC	; 252
 b3a:	ff 4d       	sbci	r31, 0xDF	; 223
 b3c:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
 b3e:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_F0)
 b40:	84 36       	cpi	r24, 0x64	; 100
 b42:	08 f0       	brcs	.+2      	; 0xb46 <__vector_119+0x30>
	nextSlot = 0;
 b44:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_f0_rdidx)
 b46:	90 91 68 20 	lds	r25, 0x2068	; 0x802068 <rx_f0_rdidx>
 b4a:	89 13       	cpse	r24, r25
	rx_f0_wridx = nextSlot;
 b4c:	80 93 69 20 	sts	0x2069, r24	; 0x802069 <rx_f0_wridx>
	
} // ISR(USARTF0_RXC_vect)
 b50:	ff 91       	pop	r31
 b52:	ef 91       	pop	r30
 b54:	9f 91       	pop	r25
 b56:	8f 91       	pop	r24
 b58:	0f 90       	pop	r0
 b5a:	0b be       	out	0x3b, r0	; 59
 b5c:	0f 90       	pop	r0
 b5e:	0f be       	out	0x3f, r0	; 63
 b60:	0f 90       	pop	r0
 b62:	1f 90       	pop	r1
 b64:	18 95       	reti

00000b66 <__vector_120>:


/*  \brief  ISR for transmitting bytes to UARTF0.
 *          If there is a byte to send in the TX buffer, it will be send
 */
ISR(USARTF0_DRE_vect) {
 b66:	1f 92       	push	r1
 b68:	0f 92       	push	r0
 b6a:	0f b6       	in	r0, 0x3f	; 63
 b6c:	0f 92       	push	r0
 b6e:	11 24       	eor	r1, r1
 b70:	0b b6       	in	r0, 0x3b	; 59
 b72:	0f 92       	push	r0
 b74:	2f 93       	push	r18
 b76:	8f 93       	push	r24
 b78:	9f 93       	push	r25
 b7a:	ef 93       	push	r30
 b7c:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_f0_rdidx;
 b7e:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <tx_f0_rdidx>
	lastSlot = tx_f0_wridx;
 b82:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <tx_f0_wridx>
	
	if(curSlot != lastSlot) {
 b86:	89 17       	cp	r24, r25
 b88:	59 f0       	breq	.+22     	; 0xba0 <__vector_120+0x3a>
		USARTF0.DATA = tx_f0_buf[curSlot];
 b8a:	e8 2f       	mov	r30, r24
 b8c:	f0 e0       	ldi	r31, 0x00	; 0
 b8e:	e6 59       	subi	r30, 0x96	; 150
 b90:	ff 4d       	sbci	r31, 0xDF	; 223
 b92:	20 81       	ld	r18, Z
 b94:	20 93 a0 0b 	sts	0x0BA0, r18	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x7beba0>
		nextSlot = curSlot + 1;
 b98:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_F0)
 b9a:	84 36       	cpi	r24, 0x64	; 100
 b9c:	08 f0       	brcs	.+2      	; 0xba0 <__vector_120+0x3a>
		nextSlot = 0;
 b9e:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
 ba0:	89 13       	cpse	r24, r25
 ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__vector_120+0x44>
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
 ba4:	90 e2       	ldi	r25, 0x20	; 32
 ba6:	90 93 a3 0b 	sts	0x0BA3, r25	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x7beba3>
	
	tx_f0_rdidx = nextSlot;
 baa:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <tx_f0_rdidx>
	
} // ISR(USARTF0_DRE_vect) 
 bae:	ff 91       	pop	r31
 bb0:	ef 91       	pop	r30
 bb2:	9f 91       	pop	r25
 bb4:	8f 91       	pop	r24
 bb6:	2f 91       	pop	r18
 bb8:	0f 90       	pop	r0
 bba:	0b be       	out	0x3b, r0	; 59
 bbc:	0f 90       	pop	r0
 bbe:	0f be       	out	0x3f, r0	; 63
 bc0:	0f 90       	pop	r0
 bc2:	1f 90       	pop	r1
 bc4:	18 95       	reti

00000bc6 <__floatunsisf>:
 bc6:	e8 94       	clt
 bc8:	09 c0       	rjmp	.+18     	; 0xbdc <__floatsisf+0x12>

00000bca <__floatsisf>:
 bca:	97 fb       	bst	r25, 7
 bcc:	3e f4       	brtc	.+14     	; 0xbdc <__floatsisf+0x12>
 bce:	90 95       	com	r25
 bd0:	80 95       	com	r24
 bd2:	70 95       	com	r23
 bd4:	61 95       	neg	r22
 bd6:	7f 4f       	sbci	r23, 0xFF	; 255
 bd8:	8f 4f       	sbci	r24, 0xFF	; 255
 bda:	9f 4f       	sbci	r25, 0xFF	; 255
 bdc:	99 23       	and	r25, r25
 bde:	a9 f0       	breq	.+42     	; 0xc0a <__floatsisf+0x40>
 be0:	f9 2f       	mov	r31, r25
 be2:	96 e9       	ldi	r25, 0x96	; 150
 be4:	bb 27       	eor	r27, r27
 be6:	93 95       	inc	r25
 be8:	f6 95       	lsr	r31
 bea:	87 95       	ror	r24
 bec:	77 95       	ror	r23
 bee:	67 95       	ror	r22
 bf0:	b7 95       	ror	r27
 bf2:	f1 11       	cpse	r31, r1
 bf4:	f8 cf       	rjmp	.-16     	; 0xbe6 <__floatsisf+0x1c>
 bf6:	fa f4       	brpl	.+62     	; 0xc36 <__floatsisf+0x6c>
 bf8:	bb 0f       	add	r27, r27
 bfa:	11 f4       	brne	.+4      	; 0xc00 <__floatsisf+0x36>
 bfc:	60 ff       	sbrs	r22, 0
 bfe:	1b c0       	rjmp	.+54     	; 0xc36 <__floatsisf+0x6c>
 c00:	6f 5f       	subi	r22, 0xFF	; 255
 c02:	7f 4f       	sbci	r23, 0xFF	; 255
 c04:	8f 4f       	sbci	r24, 0xFF	; 255
 c06:	9f 4f       	sbci	r25, 0xFF	; 255
 c08:	16 c0       	rjmp	.+44     	; 0xc36 <__floatsisf+0x6c>
 c0a:	88 23       	and	r24, r24
 c0c:	11 f0       	breq	.+4      	; 0xc12 <__floatsisf+0x48>
 c0e:	96 e9       	ldi	r25, 0x96	; 150
 c10:	11 c0       	rjmp	.+34     	; 0xc34 <__floatsisf+0x6a>
 c12:	77 23       	and	r23, r23
 c14:	21 f0       	breq	.+8      	; 0xc1e <__floatsisf+0x54>
 c16:	9e e8       	ldi	r25, 0x8E	; 142
 c18:	87 2f       	mov	r24, r23
 c1a:	76 2f       	mov	r23, r22
 c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__floatsisf+0x5e>
 c1e:	66 23       	and	r22, r22
 c20:	71 f0       	breq	.+28     	; 0xc3e <__floatsisf+0x74>
 c22:	96 e8       	ldi	r25, 0x86	; 134
 c24:	86 2f       	mov	r24, r22
 c26:	70 e0       	ldi	r23, 0x00	; 0
 c28:	60 e0       	ldi	r22, 0x00	; 0
 c2a:	2a f0       	brmi	.+10     	; 0xc36 <__floatsisf+0x6c>
 c2c:	9a 95       	dec	r25
 c2e:	66 0f       	add	r22, r22
 c30:	77 1f       	adc	r23, r23
 c32:	88 1f       	adc	r24, r24
 c34:	da f7       	brpl	.-10     	; 0xc2c <__floatsisf+0x62>
 c36:	88 0f       	add	r24, r24
 c38:	96 95       	lsr	r25
 c3a:	87 95       	ror	r24
 c3c:	97 f9       	bld	r25, 7
 c3e:	08 95       	ret

00000c40 <__fp_inf>:
 c40:	97 f9       	bld	r25, 7
 c42:	9f 67       	ori	r25, 0x7F	; 127
 c44:	80 e8       	ldi	r24, 0x80	; 128
 c46:	70 e0       	ldi	r23, 0x00	; 0
 c48:	60 e0       	ldi	r22, 0x00	; 0
 c4a:	08 95       	ret

00000c4c <__fp_nan>:
 c4c:	9f ef       	ldi	r25, 0xFF	; 255
 c4e:	80 ec       	ldi	r24, 0xC0	; 192
 c50:	08 95       	ret

00000c52 <__fp_pscA>:
 c52:	00 24       	eor	r0, r0
 c54:	0a 94       	dec	r0
 c56:	16 16       	cp	r1, r22
 c58:	17 06       	cpc	r1, r23
 c5a:	18 06       	cpc	r1, r24
 c5c:	09 06       	cpc	r0, r25
 c5e:	08 95       	ret

00000c60 <__fp_pscB>:
 c60:	00 24       	eor	r0, r0
 c62:	0a 94       	dec	r0
 c64:	12 16       	cp	r1, r18
 c66:	13 06       	cpc	r1, r19
 c68:	14 06       	cpc	r1, r20
 c6a:	05 06       	cpc	r0, r21
 c6c:	08 95       	ret

00000c6e <__fp_round>:
 c6e:	09 2e       	mov	r0, r25
 c70:	03 94       	inc	r0
 c72:	00 0c       	add	r0, r0
 c74:	11 f4       	brne	.+4      	; 0xc7a <__fp_round+0xc>
 c76:	88 23       	and	r24, r24
 c78:	52 f0       	brmi	.+20     	; 0xc8e <__fp_round+0x20>
 c7a:	bb 0f       	add	r27, r27
 c7c:	40 f4       	brcc	.+16     	; 0xc8e <__fp_round+0x20>
 c7e:	bf 2b       	or	r27, r31
 c80:	11 f4       	brne	.+4      	; 0xc86 <__fp_round+0x18>
 c82:	60 ff       	sbrs	r22, 0
 c84:	04 c0       	rjmp	.+8      	; 0xc8e <__fp_round+0x20>
 c86:	6f 5f       	subi	r22, 0xFF	; 255
 c88:	7f 4f       	sbci	r23, 0xFF	; 255
 c8a:	8f 4f       	sbci	r24, 0xFF	; 255
 c8c:	9f 4f       	sbci	r25, 0xFF	; 255
 c8e:	08 95       	ret

00000c90 <__fp_split3>:
 c90:	57 fd       	sbrc	r21, 7
 c92:	90 58       	subi	r25, 0x80	; 128
 c94:	44 0f       	add	r20, r20
 c96:	55 1f       	adc	r21, r21
 c98:	59 f0       	breq	.+22     	; 0xcb0 <__fp_splitA+0x10>
 c9a:	5f 3f       	cpi	r21, 0xFF	; 255
 c9c:	71 f0       	breq	.+28     	; 0xcba <__fp_splitA+0x1a>
 c9e:	47 95       	ror	r20

00000ca0 <__fp_splitA>:
 ca0:	88 0f       	add	r24, r24
 ca2:	97 fb       	bst	r25, 7
 ca4:	99 1f       	adc	r25, r25
 ca6:	61 f0       	breq	.+24     	; 0xcc0 <__fp_splitA+0x20>
 ca8:	9f 3f       	cpi	r25, 0xFF	; 255
 caa:	79 f0       	breq	.+30     	; 0xcca <__fp_splitA+0x2a>
 cac:	87 95       	ror	r24
 cae:	08 95       	ret
 cb0:	12 16       	cp	r1, r18
 cb2:	13 06       	cpc	r1, r19
 cb4:	14 06       	cpc	r1, r20
 cb6:	55 1f       	adc	r21, r21
 cb8:	f2 cf       	rjmp	.-28     	; 0xc9e <__fp_split3+0xe>
 cba:	46 95       	lsr	r20
 cbc:	f1 df       	rcall	.-30     	; 0xca0 <__fp_splitA>
 cbe:	08 c0       	rjmp	.+16     	; 0xcd0 <__fp_splitA+0x30>
 cc0:	16 16       	cp	r1, r22
 cc2:	17 06       	cpc	r1, r23
 cc4:	18 06       	cpc	r1, r24
 cc6:	99 1f       	adc	r25, r25
 cc8:	f1 cf       	rjmp	.-30     	; 0xcac <__fp_splitA+0xc>
 cca:	86 95       	lsr	r24
 ccc:	71 05       	cpc	r23, r1
 cce:	61 05       	cpc	r22, r1
 cd0:	08 94       	sec
 cd2:	08 95       	ret

00000cd4 <__fp_zero>:
 cd4:	e8 94       	clt

00000cd6 <__fp_szero>:
 cd6:	bb 27       	eor	r27, r27
 cd8:	66 27       	eor	r22, r22
 cda:	77 27       	eor	r23, r23
 cdc:	cb 01       	movw	r24, r22
 cde:	97 f9       	bld	r25, 7
 ce0:	08 95       	ret

00000ce2 <__mulsf3>:
 ce2:	0e 94 84 06 	call	0xd08	; 0xd08 <__mulsf3x>
 ce6:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_round>
 cea:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_pscA>
 cee:	38 f0       	brcs	.+14     	; 0xcfe <__mulsf3+0x1c>
 cf0:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_pscB>
 cf4:	20 f0       	brcs	.+8      	; 0xcfe <__mulsf3+0x1c>
 cf6:	95 23       	and	r25, r21
 cf8:	11 f0       	breq	.+4      	; 0xcfe <__mulsf3+0x1c>
 cfa:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_inf>
 cfe:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_nan>
 d02:	11 24       	eor	r1, r1
 d04:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_szero>

00000d08 <__mulsf3x>:
 d08:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_split3>
 d0c:	70 f3       	brcs	.-36     	; 0xcea <__mulsf3+0x8>

00000d0e <__mulsf3_pse>:
 d0e:	95 9f       	mul	r25, r21
 d10:	c1 f3       	breq	.-16     	; 0xd02 <__mulsf3+0x20>
 d12:	95 0f       	add	r25, r21
 d14:	50 e0       	ldi	r21, 0x00	; 0
 d16:	55 1f       	adc	r21, r21
 d18:	62 9f       	mul	r22, r18
 d1a:	f0 01       	movw	r30, r0
 d1c:	72 9f       	mul	r23, r18
 d1e:	bb 27       	eor	r27, r27
 d20:	f0 0d       	add	r31, r0
 d22:	b1 1d       	adc	r27, r1
 d24:	63 9f       	mul	r22, r19
 d26:	aa 27       	eor	r26, r26
 d28:	f0 0d       	add	r31, r0
 d2a:	b1 1d       	adc	r27, r1
 d2c:	aa 1f       	adc	r26, r26
 d2e:	64 9f       	mul	r22, r20
 d30:	66 27       	eor	r22, r22
 d32:	b0 0d       	add	r27, r0
 d34:	a1 1d       	adc	r26, r1
 d36:	66 1f       	adc	r22, r22
 d38:	82 9f       	mul	r24, r18
 d3a:	22 27       	eor	r18, r18
 d3c:	b0 0d       	add	r27, r0
 d3e:	a1 1d       	adc	r26, r1
 d40:	62 1f       	adc	r22, r18
 d42:	73 9f       	mul	r23, r19
 d44:	b0 0d       	add	r27, r0
 d46:	a1 1d       	adc	r26, r1
 d48:	62 1f       	adc	r22, r18
 d4a:	83 9f       	mul	r24, r19
 d4c:	a0 0d       	add	r26, r0
 d4e:	61 1d       	adc	r22, r1
 d50:	22 1f       	adc	r18, r18
 d52:	74 9f       	mul	r23, r20
 d54:	33 27       	eor	r19, r19
 d56:	a0 0d       	add	r26, r0
 d58:	61 1d       	adc	r22, r1
 d5a:	23 1f       	adc	r18, r19
 d5c:	84 9f       	mul	r24, r20
 d5e:	60 0d       	add	r22, r0
 d60:	21 1d       	adc	r18, r1
 d62:	82 2f       	mov	r24, r18
 d64:	76 2f       	mov	r23, r22
 d66:	6a 2f       	mov	r22, r26
 d68:	11 24       	eor	r1, r1
 d6a:	9f 57       	subi	r25, 0x7F	; 127
 d6c:	50 40       	sbci	r21, 0x00	; 0
 d6e:	9a f0       	brmi	.+38     	; 0xd96 <__mulsf3_pse+0x88>
 d70:	f1 f0       	breq	.+60     	; 0xdae <__mulsf3_pse+0xa0>
 d72:	88 23       	and	r24, r24
 d74:	4a f0       	brmi	.+18     	; 0xd88 <__mulsf3_pse+0x7a>
 d76:	ee 0f       	add	r30, r30
 d78:	ff 1f       	adc	r31, r31
 d7a:	bb 1f       	adc	r27, r27
 d7c:	66 1f       	adc	r22, r22
 d7e:	77 1f       	adc	r23, r23
 d80:	88 1f       	adc	r24, r24
 d82:	91 50       	subi	r25, 0x01	; 1
 d84:	50 40       	sbci	r21, 0x00	; 0
 d86:	a9 f7       	brne	.-22     	; 0xd72 <__mulsf3_pse+0x64>
 d88:	9e 3f       	cpi	r25, 0xFE	; 254
 d8a:	51 05       	cpc	r21, r1
 d8c:	80 f0       	brcs	.+32     	; 0xdae <__mulsf3_pse+0xa0>
 d8e:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_inf>
 d92:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_szero>
 d96:	5f 3f       	cpi	r21, 0xFF	; 255
 d98:	e4 f3       	brlt	.-8      	; 0xd92 <__mulsf3_pse+0x84>
 d9a:	98 3e       	cpi	r25, 0xE8	; 232
 d9c:	d4 f3       	brlt	.-12     	; 0xd92 <__mulsf3_pse+0x84>
 d9e:	86 95       	lsr	r24
 da0:	77 95       	ror	r23
 da2:	67 95       	ror	r22
 da4:	b7 95       	ror	r27
 da6:	f7 95       	ror	r31
 da8:	e7 95       	ror	r30
 daa:	9f 5f       	subi	r25, 0xFF	; 255
 dac:	c1 f7       	brne	.-16     	; 0xd9e <__mulsf3_pse+0x90>
 dae:	fe 2b       	or	r31, r30
 db0:	88 0f       	add	r24, r24
 db2:	91 1d       	adc	r25, r1
 db4:	96 95       	lsr	r25
 db6:	87 95       	ror	r24
 db8:	97 f9       	bld	r25, 7
 dba:	08 95       	ret

00000dbc <__umulhisi3>:
 dbc:	a2 9f       	mul	r26, r18
 dbe:	b0 01       	movw	r22, r0
 dc0:	b3 9f       	mul	r27, r19
 dc2:	c0 01       	movw	r24, r0
 dc4:	a3 9f       	mul	r26, r19
 dc6:	70 0d       	add	r23, r0
 dc8:	81 1d       	adc	r24, r1
 dca:	11 24       	eor	r1, r1
 dcc:	91 1d       	adc	r25, r1
 dce:	b2 9f       	mul	r27, r18
 dd0:	70 0d       	add	r23, r0
 dd2:	81 1d       	adc	r24, r1
 dd4:	11 24       	eor	r1, r1
 dd6:	91 1d       	adc	r25, r1
 dd8:	08 95       	ret

00000dda <_exit>:
 dda:	f8 94       	cli

00000ddc <__stop_program>:
 ddc:	ff cf       	rjmp	.-2      	; 0xddc <__stop_program>
