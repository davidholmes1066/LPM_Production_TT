
Debug_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001022  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00001096  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000274e  00802000  00802000  00001096  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001096  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006224  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036e2  00000000  00000000  00007454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fed  00000000  00000000  0000ab36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  0000bb24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000031ef  00000000  00000000  0000be24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000977  00000000  00000000  0000f013  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000f98a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 13 01 	jmp	0x226	; 0x226 <__ctors_end>
       4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
       8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
       c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      10:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      14:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      18:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      1c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      20:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      24:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      28:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      2c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      30:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      34:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      38:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      3c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      40:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      44:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      48:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      4c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      50:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      54:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      58:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      5c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      60:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      64:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      68:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      6c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      70:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      74:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      78:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      7c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      80:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      84:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      88:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      8c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      90:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      94:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      98:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      9c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      a0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      a4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      a8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      ac:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      b0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      b4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      b8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      bc:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_47>
      c0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      c4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      c8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      cc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      d0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      d4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      d8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      dc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      e0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      e4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      e8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      ec:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      f0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      f4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      f8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      fc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     100:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_64>
     104:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__vector_65>
     108:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     10c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     110:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     114:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     118:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     11c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     120:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     124:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     128:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     12c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     130:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     134:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     138:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     13c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     140:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     144:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     148:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     14c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     150:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     154:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     158:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     15c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     160:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     164:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     168:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     16c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     170:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     174:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     178:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     17c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     180:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     184:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     188:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     18c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     190:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     194:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     198:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     19c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1a0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1a4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1a8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1ac:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1b0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1b4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1b8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1bc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1c0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1c4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1c8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1cc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1d0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1d4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1d8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1dc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1e0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1e4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1e8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1ec:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1f0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1f4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1f8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1fc:	18 06       	cpc	r1, r24
     1fe:	1b 06       	cpc	r1, r27
     200:	1e 06       	cpc	r1, r30
     202:	21 06       	cpc	r2, r17
     204:	24 06       	cpc	r2, r20
     206:	27 06       	cpc	r2, r23
     208:	2a 06       	cpc	r2, r26

0000020a <__trampolines_start>:
     20a:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <main+0x72>
     20e:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <main+0x54>
     212:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x6c>
     216:	0c 94 21 06 	jmp	0xc42	; 0xc42 <main+0x60>
     21a:	0c 94 18 06 	jmp	0xc30	; 0xc30 <main+0x4e>
     21e:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <main+0x5a>
     222:	0c 94 24 06 	jmp	0xc48	; 0xc48 <main+0x66>

00000226 <__ctors_end>:
     226:	11 24       	eor	r1, r1
     228:	1f be       	out	0x3f, r1	; 63
     22a:	cf ef       	ldi	r28, 0xFF	; 255
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	df e5       	ldi	r29, 0x5F	; 95
     230:	de bf       	out	0x3e, r29	; 62
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0c bf       	out	0x3c, r16	; 60

00000236 <__do_clear_bss>:
     236:	27 e4       	ldi	r18, 0x47	; 71
     238:	a0 e0       	ldi	r26, 0x00	; 0
     23a:	b0 e2       	ldi	r27, 0x20	; 32
     23c:	01 c0       	rjmp	.+2      	; 0x240 <.do_clear_bss_start>

0000023e <.do_clear_bss_loop>:
     23e:	1d 92       	st	X+, r1

00000240 <.do_clear_bss_start>:
     240:	ae 34       	cpi	r26, 0x4E	; 78
     242:	b2 07       	cpc	r27, r18
     244:	e1 f7       	brne	.-8      	; 0x23e <.do_clear_bss_loop>
     246:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <main>
     24a:	0c 94 0f 08 	jmp	0x101e	; 0x101e <_exit>

0000024e <__bad_interrupt>:
     24e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000252 <read_UART>:

void start_timer(void)
{
	TCE0.CNT = 0;
	TCE0.INTCTRLA = (TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_OVFINTLVL_LO_gc;			//Turn on overflow interrupt
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;													//turn on TC
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	04 c0       	rjmp	.+8      	; 0x260 <read_UART+0xe>
     258:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     25c:	20 78       	andi	r18, 0x80	; 128
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	21 15       	cp	r18, r1
     262:	31 05       	cpc	r19, r1
     264:	c9 f3       	breq	.-14     	; 0x258 <read_UART+0x6>
     266:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
     26a:	06 c0       	rjmp	.+12     	; 0x278 <read_UART+0x26>
     26c:	e0 ea       	ldi	r30, 0xA0	; 160
     26e:	fa e0       	ldi	r31, 0x0A	; 10
     270:	21 81       	ldd	r18, Z+1	; 0x01
     272:	20 78       	andi	r18, 0x80	; 128
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	90 81       	ld	r25, Z
     278:	23 2b       	or	r18, r19
     27a:	c1 f7       	brne	.-16     	; 0x26c <read_UART+0x1a>
     27c:	08 95       	ret

0000027e <write8_UART>:
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	04 c0       	rjmp	.+8      	; 0x28c <write8_UART+0xe>
     284:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     288:	20 72       	andi	r18, 0x20	; 32
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	23 2b       	or	r18, r19
     28e:	d1 f3       	breq	.-12     	; 0x284 <write8_UART+0x6>
     290:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	04 c0       	rjmp	.+8      	; 0x2a2 <write8_UART+0x24>
     29a:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     29e:	80 72       	andi	r24, 0x20	; 32
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	89 2b       	or	r24, r25
     2a4:	d1 f3       	breq	.-12     	; 0x29a <write8_UART+0x1c>
     2a6:	08 95       	ret

000002a8 <start_DELAY>:



void start_DELAY(void)
{
	TCD1.CNT = 0;																		//set count to 0
     2a8:	e0 e4       	ldi	r30, 0x40	; 64
     2aa:	f9 e0       	ldi	r31, 0x09	; 9
     2ac:	10 a2       	std	Z+32, r1	; 0x20
     2ae:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = TC_CLKSEL_DIV64_gc;													//set clock frequency to 32Mhz/64 = 500kHz
     2b0:	85 e0       	ldi	r24, 0x05	; 5
     2b2:	80 83       	st	Z, r24
     2b4:	08 95       	ret

000002b6 <stop_DELAY>:



void stop_DELAY(void)
{
	TCD1.CTRLA = TC_CLKSEL_OFF_gc;														//stop counter
     2b6:	e0 e4       	ldi	r30, 0x40	; 64
     2b8:	f9 e0       	ldi	r31, 0x09	; 9
     2ba:	10 82       	st	Z, r1
	TCD1.CNT = 0;																		//set count to 0
     2bc:	10 a2       	std	Z+32, r1	; 0x20
     2be:	11 a2       	std	Z+33, r1	; 0x21
     2c0:	08 95       	ret

000002c2 <read_voltages>:
}



void read_voltages(void)
{
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
	
	uint8_t INTFA = (0xF), INTFB = (0xF);
	
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCA clock speed to 62.5kHz
     2ca:	e0 e0       	ldi	r30, 0x00	; 0
     2cc:	f2 e0       	ldi	r31, 0x02	; 2
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	84 83       	std	Z+4, r24	; 0x04
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCB clock speed to 62.5kHz
     2d2:	a0 e4       	ldi	r26, 0x40	; 64
     2d4:	b2 e0       	ldi	r27, 0x02	; 2
     2d6:	14 96       	adiw	r26, 0x04	; 4
     2d8:	8c 93       	st	X, r24
     2da:	14 97       	sbiw	r26, 0x04	; 4
	
	ADCA.CTRLA = ADC_FLUSH_bm;														//Flushes ADCA
     2dc:	82 e0       	ldi	r24, 0x02	; 2
     2de:	80 83       	st	Z, r24
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
     2e0:	8c 93       	st	X, r24
	
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;										//Set ADCA CH1 to pin A1 as input for CORE_VDD
     2e2:	88 e0       	ldi	r24, 0x08	; 8
     2e4:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;										//Set ADCA CH0 to pin A0 as input for VCC_main
     2e6:	11 a2       	std	Z+33, r1	; 0x21
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc;										//Set ADCA CH2 to pin A2 as input for +1.8_VDD
     2e8:	90 e1       	ldi	r25, 0x10	; 16
     2ea:	91 ab       	std	Z+49, r25	; 0x31
	ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;										//Set ADCA CH3 to pin A3 as input for +3.0VIO
     2ec:	98 e1       	ldi	r25, 0x18	; 24
     2ee:	91 af       	std	Z+57, r25	; 0x39
	
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;										//Set ADCB CH0 to pin B0 as input for VPP_2V5
     2f0:	91 96       	adiw	r26, 0x21	; 33
     2f2:	1c 92       	st	X, r1
     2f4:	91 97       	sbiw	r26, 0x21	; 33
	ADCB.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;										//Set ADCB CH1 to pin B1 as input for +1.8VIO
     2f6:	99 96       	adiw	r26, 0x29	; 41
     2f8:	8c 93       	st	X, r24
     2fa:	99 97       	sbiw	r26, 0x29	; 41
	ADCB.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;										//Set ADCB CH2 to pin B4 as input for BLE_VDD
     2fc:	80 e2       	ldi	r24, 0x20	; 32
     2fe:	d1 96       	adiw	r26, 0x31	; 49
     300:	8c 93       	st	X, r24
     302:	d1 97       	sbiw	r26, 0x31	; 49
	
	ADCA.CTRLA = ADC_ENABLE_bm;														//Enables ADCA
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	80 83       	st	Z, r24
	ADCB.CTRLA = ADC_ENABLE_bm;														//Enables ADCB
     308:	8c 93       	st	X, r24
	
	ADCA.CTRLA |= ADC_DMASEL_CH0123_gc;							 					//Allow DMA request all channels
     30a:	80 81       	ld	r24, Z
     30c:	80 6c       	ori	r24, 0xC0	; 192
     30e:	80 83       	st	Z, r24
	ADCB.CTRLA |= ADC_DMASEL_CH012_gc;												//Allow DMA request channel 0,1,2
     310:	8c 91       	ld	r24, X
     312:	80 68       	ori	r24, 0x80	; 128
     314:	8c 93       	st	X, r24
	
	ADCA.CTRLA |= (0x0F << 2);							 							//Start ADCA conversion on all 4 channels
     316:	80 81       	ld	r24, Z
     318:	8c 63       	ori	r24, 0x3C	; 60
     31a:	80 83       	st	Z, r24
	ADCB.CTRLA |= (0x07 << 2);														//Start ADCB conversion on first three channels
     31c:	8c 91       	ld	r24, X
     31e:	8c 61       	ori	r24, 0x1C	; 28
     320:	8c 93       	st	X, r24
	
	INTFA = (ADCA.INTFLAGS & (0x0F));
     322:	86 81       	ldd	r24, Z+6	; 0x06
     324:	8f 70       	andi	r24, 0x0F	; 15
	INTFB = (ADCB.INTFLAGS & (0x0F));
     326:	16 96       	adiw	r26, 0x06	; 6
     328:	9c 91       	ld	r25, X
     32a:	9f 70       	andi	r25, 0x0F	; 15
	
	while( ((INTFA != (0xF)) && (INTFB != (0x7))))									//Wait for ADC conversion
     32c:	06 c0       	rjmp	.+12     	; 0x33a <read_voltages+0x78>
	{
		INTFA = (ADCA.INTFLAGS & (0x0F));
     32e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7be206>
     332:	8f 70       	andi	r24, 0x0F	; 15
		INTFB = (ADCB.INTFLAGS & (0x0F));
     334:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
     338:	9f 70       	andi	r25, 0x0F	; 15
	ADCB.CTRLA |= (0x07 << 2);														//Start ADCB conversion on first three channels
	
	INTFA = (ADCA.INTFLAGS & (0x0F));
	INTFB = (ADCB.INTFLAGS & (0x0F));
	
	while( ((INTFA != (0xF)) && (INTFB != (0x7))))									//Wait for ADC conversion
     33a:	8f 30       	cpi	r24, 0x0F	; 15
     33c:	11 f0       	breq	.+4      	; 0x342 <read_voltages+0x80>
     33e:	97 30       	cpi	r25, 0x07	; 7
     340:	b1 f7       	brne	.-20     	; 0x32e <read_voltages+0x6c>
	{
		INTFA = (ADCA.INTFLAGS & (0x0F));
		INTFB = (ADCB.INTFLAGS & (0x0F));
	}
	
	VOLT[0] = (float)ADCA.CH0.RES;													//Read VCC_main
     342:	00 e0       	ldi	r16, 0x00	; 0
     344:	12 e0       	ldi	r17, 0x02	; 2
     346:	f8 01       	movw	r30, r16
     348:	64 a1       	ldd	r22, Z+36	; 0x24
     34a:	75 a1       	ldd	r23, Z+37	; 0x25
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 0c 07 	call	0xe18	; 0xe18 <__floatunsisf>
     354:	c7 e2       	ldi	r28, 0x27	; 39
     356:	d7 e4       	ldi	r29, 0x47	; 71
     358:	68 83       	st	Y, r22
     35a:	79 83       	std	Y+1, r23	; 0x01
     35c:	8a 83       	std	Y+2, r24	; 0x02
     35e:	9b 83       	std	Y+3, r25	; 0x03
	VOLT[1] = (float)ADCA.CH1.RES;													//Read CORE_VDD
     360:	f8 01       	movw	r30, r16
     362:	64 a5       	ldd	r22, Z+44	; 0x2c
     364:	75 a5       	ldd	r23, Z+45	; 0x2d
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 0c 07 	call	0xe18	; 0xe18 <__floatunsisf>
     36e:	6c 83       	std	Y+4, r22	; 0x04
     370:	7d 83       	std	Y+5, r23	; 0x05
     372:	8e 83       	std	Y+6, r24	; 0x06
     374:	9f 83       	std	Y+7, r25	; 0x07
	VOLT[2] = (float)ADCA.CH2.RES;													//Read +1.8_VDD
     376:	f8 01       	movw	r30, r16
     378:	64 a9       	ldd	r22, Z+52	; 0x34
     37a:	75 a9       	ldd	r23, Z+53	; 0x35
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 0c 07 	call	0xe18	; 0xe18 <__floatunsisf>
     384:	68 87       	std	Y+8, r22	; 0x08
     386:	79 87       	std	Y+9, r23	; 0x09
     388:	8a 87       	std	Y+10, r24	; 0x0a
     38a:	9b 87       	std	Y+11, r25	; 0x0b
	VOLT[3] = (float)ADCA.CH3.RES;													//Read +3.0VIO	
     38c:	f8 01       	movw	r30, r16
     38e:	64 ad       	ldd	r22, Z+60	; 0x3c
     390:	75 ad       	ldd	r23, Z+61	; 0x3d
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 0c 07 	call	0xe18	; 0xe18 <__floatunsisf>
     39a:	6c 87       	std	Y+12, r22	; 0x0c
     39c:	7d 87       	std	Y+13, r23	; 0x0d
     39e:	8e 87       	std	Y+14, r24	; 0x0e
     3a0:	9f 87       	std	Y+15, r25	; 0x0f
	
	VOLT[4] = (float)ADCB.CH0.RES;													//Read VPP_2V5
     3a2:	00 e4       	ldi	r16, 0x40	; 64
     3a4:	12 e0       	ldi	r17, 0x02	; 2
     3a6:	f8 01       	movw	r30, r16
     3a8:	64 a1       	ldd	r22, Z+36	; 0x24
     3aa:	75 a1       	ldd	r23, Z+37	; 0x25
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 0c 07 	call	0xe18	; 0xe18 <__floatunsisf>
     3b4:	68 8b       	std	Y+16, r22	; 0x10
     3b6:	79 8b       	std	Y+17, r23	; 0x11
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	9b 8b       	std	Y+19, r25	; 0x13
	VOLT[5] = (float)ADCB.CH1.RES;													//Read +1.8VIO
     3bc:	f8 01       	movw	r30, r16
     3be:	64 a5       	ldd	r22, Z+44	; 0x2c
     3c0:	75 a5       	ldd	r23, Z+45	; 0x2d
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 0c 07 	call	0xe18	; 0xe18 <__floatunsisf>
     3ca:	6c 8b       	std	Y+20, r22	; 0x14
     3cc:	7d 8b       	std	Y+21, r23	; 0x15
     3ce:	8e 8b       	std	Y+22, r24	; 0x16
     3d0:	9f 8b       	std	Y+23, r25	; 0x17
	VOLT[6] = (float)ADCB.CH2.RES;													//Read BLE_VDD
     3d2:	f8 01       	movw	r30, r16
     3d4:	64 a9       	ldd	r22, Z+52	; 0x34
     3d6:	75 a9       	ldd	r23, Z+53	; 0x35
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 0c 07 	call	0xe18	; 0xe18 <__floatunsisf>
     3e0:	68 8f       	std	Y+24, r22	; 0x18
     3e2:	79 8f       	std	Y+25, r23	; 0x19
     3e4:	8a 8f       	std	Y+26, r24	; 0x1a
     3e6:	9b 8f       	std	Y+27, r25	; 0x1b

	for(uint8_t i = 0; i < 8; i++)
     3e8:	10 e0       	ldi	r17, 0x00	; 0
     3ea:	29 c0       	rjmp	.+82     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	{
		VOLT[i] = ((VOLT[i]*ADC_VREF*ADC_LIN*4)/4095)-ADC_OFFSET;
     3ec:	c1 2f       	mov	r28, r17
     3ee:	d0 e0       	ldi	r29, 0x00	; 0
     3f0:	cc 0f       	add	r28, r28
     3f2:	dd 1f       	adc	r29, r29
     3f4:	cc 0f       	add	r28, r28
     3f6:	dd 1f       	adc	r29, r29
     3f8:	c9 5d       	subi	r28, 0xD9	; 217
     3fa:	d8 4b       	sbci	r29, 0xB8	; 184
     3fc:	68 81       	ld	r22, Y
     3fe:	79 81       	ldd	r23, Y+1	; 0x01
     400:	8a 81       	ldd	r24, Y+2	; 0x02
     402:	9b 81       	ldd	r25, Y+3	; 0x03
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	40 e4       	ldi	r20, 0x40	; 64
     40a:	50 e4       	ldi	r21, 0x40	; 64
     40c:	0e 94 9a 07 	call	0xf34	; 0xf34 <__mulsf3>
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	40 e8       	ldi	r20, 0x80	; 128
     416:	50 e4       	ldi	r21, 0x40	; 64
     418:	0e 94 9a 07 	call	0xf34	; 0xf34 <__mulsf3>
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 ef       	ldi	r19, 0xF0	; 240
     420:	4f e7       	ldi	r20, 0x7F	; 127
     422:	55 e4       	ldi	r21, 0x45	; 69
     424:	0e 94 9a 06 	call	0xd34	; 0xd34 <__divsf3>
     428:	2a e9       	ldi	r18, 0x9A	; 154
     42a:	39 e9       	ldi	r19, 0x99	; 153
     42c:	49 e9       	ldi	r20, 0x99	; 153
     42e:	5e e3       	ldi	r21, 0x3E	; 62
     430:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__subsf3>
     434:	68 83       	st	Y, r22
     436:	79 83       	std	Y+1, r23	; 0x01
     438:	8a 83       	std	Y+2, r24	; 0x02
     43a:	9b 83       	std	Y+3, r25	; 0x03
	
	VOLT[4] = (float)ADCB.CH0.RES;													//Read VPP_2V5
	VOLT[5] = (float)ADCB.CH1.RES;													//Read +1.8VIO
	VOLT[6] = (float)ADCB.CH2.RES;													//Read BLE_VDD

	for(uint8_t i = 0; i < 8; i++)
     43c:	1f 5f       	subi	r17, 0xFF	; 255
     43e:	18 30       	cpi	r17, 0x08	; 8
     440:	a8 f2       	brcs	.-86     	; 0x3ec <read_voltages+0x12a>
	{
		VOLT[i] = ((VOLT[i]*ADC_VREF*ADC_LIN*4)/4095)-ADC_OFFSET;
	}
	
	ADCA.INTFLAGS |= (0x0F);														//clear interrupt flags ADCA
     442:	a0 e0       	ldi	r26, 0x00	; 0
     444:	b2 e0       	ldi	r27, 0x02	; 2
     446:	16 96       	adiw	r26, 0x06	; 6
     448:	8c 91       	ld	r24, X
     44a:	16 97       	sbiw	r26, 0x06	; 6
     44c:	8f 60       	ori	r24, 0x0F	; 15
     44e:	16 96       	adiw	r26, 0x06	; 6
     450:	8c 93       	st	X, r24
     452:	16 97       	sbiw	r26, 0x06	; 6
	ADCB.INTFLAGS |= (0x0F);														//clear interrupt flags ADCB
     454:	e0 e4       	ldi	r30, 0x40	; 64
     456:	f2 e0       	ldi	r31, 0x02	; 2
     458:	86 81       	ldd	r24, Z+6	; 0x06
     45a:	8f 60       	ori	r24, 0x0F	; 15
     45c:	86 83       	std	Z+6, r24	; 0x06
	
	ADCA.PRESCALER = ADC_PRESCALER_DIV8_gc;											//Get clock ADC ready for digital measurements
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	14 96       	adiw	r26, 0x04	; 4
     462:	8c 93       	st	X, r24
     464:	14 97       	sbiw	r26, 0x04	; 4
	ADCB.PRESCALER = ADC_PRESCALER_DIV8_gc;											//Get clock ADC ready for digital measurements
     466:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.CTRLA = ADC_FLUSH_bm;														//Flushes ADCA
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	8c 93       	st	X, r24
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
     46c:	80 83       	st	Z, r24
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	08 95       	ret

00000478 <TIMEOUT>:
	writeF_UART(average_I);															//Return current in uA
}

void TIMEOUT(void)
{
	start_DELAY();
     478:	0e 94 54 01 	call	0x2a8	; 0x2a8 <start_DELAY>
	while(TCD1.CNT<50000)															//Do nothing for 0.1sec
     47c:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <__TEXT_REGION_LENGTH__+0x7be960>
     480:	90 91 61 09 	lds	r25, 0x0961	; 0x800961 <__TEXT_REGION_LENGTH__+0x7be961>
     484:	80 35       	cpi	r24, 0x50	; 80
     486:	93 4c       	sbci	r25, 0xC3	; 195
     488:	c8 f3       	brcs	.-14     	; 0x47c <TIMEOUT+0x4>
	{
		//Do nothing
	}
	stop_DELAY();
     48a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <stop_DELAY>
     48e:	08 95       	ret

00000490 <read_IT>:
		writeF_UART(0.99999);														//Send error message 
	}	
}

void read_IT(void)
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
	
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCA clock speed to 62.5kHz
     494:	e0 e0       	ldi	r30, 0x00	; 0
     496:	f2 e0       	ldi	r31, 0x02	; 2
     498:	83 e0       	ldi	r24, 0x03	; 3
     49a:	84 83       	std	Z+4, r24	; 0x04
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCB clock speed to 62.5kHz
     49c:	a0 e4       	ldi	r26, 0x40	; 64
     49e:	b2 e0       	ldi	r27, 0x02	; 2
     4a0:	14 96       	adiw	r26, 0x04	; 4
     4a2:	8c 93       	st	X, r24
     4a4:	14 97       	sbiw	r26, 0x04	; 4
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;										//Set ADCA CH0 to Pin A4 as input for I_external
     4a6:	80 e2       	ldi	r24, 0x20	; 32
     4a8:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;										//Set ADCA CH1 to Pin A5 as input for I_battery
     4aa:	88 e2       	ldi	r24, 0x28	; 40
     4ac:	81 a7       	std	Z+41, r24	; 0x29

	ADCA.CTRLA |= ADC_FLUSH_bm;														//Enables ADCA
     4ae:	80 81       	ld	r24, Z
     4b0:	82 60       	ori	r24, 0x02	; 2
     4b2:	80 83       	st	Z, r24
	ADCB.CTRLA |= ADC_FLUSH_bm;														//Enables ADCB
     4b4:	8c 91       	ld	r24, X
     4b6:	82 60       	ori	r24, 0x02	; 2
     4b8:	8c 93       	st	X, r24
	
	ADCA.CTRLA |= ADC_ENABLE_bm;													//Enables ADCA
     4ba:	80 81       	ld	r24, Z
     4bc:	81 60       	ori	r24, 0x01	; 1
     4be:	80 83       	st	Z, r24
	ADCB.CTRLA |= ADC_ENABLE_bm;													//Enables ADCB
     4c0:	8c 91       	ld	r24, X
     4c2:	81 60       	ori	r24, 0x01	; 1
     4c4:	8c 93       	st	X, r24
	
	ADCA.CTRLA |= (0x03 << 2);														//Start ADCA Conversion first two channels
     4c6:	80 81       	ld	r24, Z
     4c8:	8c 60       	ori	r24, 0x0C	; 12
     4ca:	80 83       	st	Z, r24
	ADCB.CTRLA |= (0x01 << 2);														//Start ADCB conversion CH0
     4cc:	8c 91       	ld	r24, X
     4ce:	84 60       	ori	r24, 0x04	; 4
     4d0:	8c 93       	st	X, r24
	
	while( !((ADCA.INTFLAGS & 0x3) & (ADCB.INTFLAGS & 0x01)))                       //Wait for ADC conversion
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <read_IT+0x48>
	
	TIMEOUT();
     4d4:	0e 94 3c 02 	call	0x478	; 0x478 <TIMEOUT>
	ADCB.CTRLA |= ADC_ENABLE_bm;													//Enables ADCB
	
	ADCA.CTRLA |= (0x03 << 2);														//Start ADCA Conversion first two channels
	ADCB.CTRLA |= (0x01 << 2);														//Start ADCB conversion CH0
	
	while( !((ADCA.INTFLAGS & 0x3) & (ADCB.INTFLAGS & 0x01)))                       //Wait for ADC conversion
     4d8:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7be206>
     4dc:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	89 23       	and	r24, r25
     4e4:	b9 f3       	breq	.-18     	; 0x4d4 <read_IT+0x44>
	
	TIMEOUT();
	
	IT[0] = (float)ADCA.CH0.RES;													//Read I_external
     4e6:	e0 e0       	ldi	r30, 0x00	; 0
     4e8:	f2 e0       	ldi	r31, 0x02	; 2
     4ea:	84 a1       	ldd	r24, Z+36	; 0x24
     4ec:	95 a1       	ldd	r25, Z+37	; 0x25
     4ee:	c8 e4       	ldi	r28, 0x48	; 72
     4f0:	d7 e4       	ldi	r29, 0x47	; 71
     4f2:	88 83       	st	Y, r24
     4f4:	99 83       	std	Y+1, r25	; 0x01
	IT[1] = (float)ADCA.CH1.RES;													//Read I_battery
     4f6:	84 a5       	ldd	r24, Z+44	; 0x2c
     4f8:	95 a5       	ldd	r25, Z+45	; 0x2d
     4fa:	8a 83       	std	Y+2, r24	; 0x02
     4fc:	9b 83       	std	Y+3, r25	; 0x03
	
	IT[2] = (float)ADCB.CH0.RES;													//Read Temp_ambient
     4fe:	a0 e4       	ldi	r26, 0x40	; 64
     500:	b2 e0       	ldi	r27, 0x02	; 2
     502:	94 96       	adiw	r26, 0x24	; 36
     504:	8d 91       	ld	r24, X+
     506:	9c 91       	ld	r25, X
     508:	95 97       	sbiw	r26, 0x25	; 37
     50a:	8c 83       	std	Y+4, r24	; 0x04
     50c:	9d 83       	std	Y+5, r25	; 0x05
	
	ADCA.INTFLAGS |= (0x03);														//clear interrupt flags ADCA
     50e:	86 81       	ldd	r24, Z+6	; 0x06
     510:	83 60       	ori	r24, 0x03	; 3
     512:	86 83       	std	Z+6, r24	; 0x06
	ADCB.INTFLAGS |= (0x01);														//clear interrupt flags ADCB
     514:	16 96       	adiw	r26, 0x06	; 6
     516:	8c 91       	ld	r24, X
     518:	16 97       	sbiw	r26, 0x06	; 6
     51a:	81 60       	ori	r24, 0x01	; 1
     51c:	16 96       	adiw	r26, 0x06	; 6
     51e:	8c 93       	st	X, r24
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <LPM_P_OFF>:
}


void LPM_P_OFF(void)
{
	PORTB_OUTCLR = PIN2_bm;															//turn external supply off
     526:	e6 e2       	ldi	r30, 0x26	; 38
     528:	f6 e0       	ldi	r31, 0x06	; 6
     52a:	84 e0       	ldi	r24, 0x04	; 4
     52c:	80 83       	st	Z, r24
	PORTB_OUTCLR = PIN3_bm;															//turn battery supply off 
     52e:	88 e0       	ldi	r24, 0x08	; 8
     530:	80 83       	st	Z, r24
     532:	08 95       	ret

00000534 <writeF_UART>:
}

void writeF_UART(float data)
{
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	00 d0       	rcall	.+0      	; 0x53a <writeF_UART+0x6>
     53a:	1f 92       	push	r1
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	69 83       	std	Y+1, r22	; 0x01
     542:	7a 83       	std	Y+2, r23	; 0x02
     544:	8b 83       	std	Y+3, r24	; 0x03
     546:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t *sendarray;
	sendarray = (uint8_t*)(&data);													//converts float to 4 seperate bytes in send array
	write8_UART(sendarray[0]);
     548:	86 2f       	mov	r24, r22
     54a:	0e 94 3f 01 	call	0x27e	; 0x27e <write8_UART>
	write8_UART(sendarray[1]);
     54e:	8a 81       	ldd	r24, Y+2	; 0x02
     550:	0e 94 3f 01 	call	0x27e	; 0x27e <write8_UART>
	write8_UART(sendarray[2]);
     554:	8b 81       	ldd	r24, Y+3	; 0x03
     556:	0e 94 3f 01 	call	0x27e	; 0x27e <write8_UART>
	write8_UART(sendarray[3]);
     55a:	8c 81       	ldd	r24, Y+4	; 0x04
     55c:	0e 94 3f 01 	call	0x27e	; 0x27e <write8_UART>
}
     560:	24 96       	adiw	r28, 0x04	; 4
     562:	cd bf       	out	0x3d, r28	; 61
     564:	de bf       	out	0x3e, r29	; 62
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <fread_DO>:
	ADCA.CTRLA = ADC_FLUSH_bm;														//Flushes ADCA
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
}

void fread_DO(void)
{
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	e0 97       	sbiw	r28, 0x30	; 48
     582:	cd bf       	out	0x3d, r28	; 61
     584:	de bf       	out	0x3e, r29	; 62
	uint8_t Npulses = 0;															//keeps track of detected pulses
	uint32_t sum = 0;																//used for calculating average amount of samples
	float avrageT;																	//average pulse frequency in samples
	uint8_t *sendarray;																//creates an array with 4*8bit values from a float
			
	ADCA.PRESCALER = ADC_PRESCALER_DIV8_gc;											//2MHz system clock use: ADCA clock speed to 62.5kHz
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__TEXT_REGION_LENGTH__+0x7be204>
	ADCB.PRESCALER = ADC_PRESCALER_DIV8_gc;											//2MHz system clock use: ADCB clock speed to 62.5kHz		
     58c:	e0 e4       	ldi	r30, 0x40	; 64
     58e:	f2 e0       	ldi	r31, 0x02	; 2
     590:	84 83       	std	Z+4, r24	; 0x04
		
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
     592:	92 e0       	ldi	r25, 0x02	; 2
     594:	90 83       	st	Z, r25
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;										//Set ADCB CH2 to pin B5 as input for D0
     596:	98 e2       	ldi	r25, 0x28	; 40
     598:	91 a3       	std	Z+33, r25	; 0x21
	ADCB.CTRLA = ADC_ENABLE_bm;														//Enables ADCB
     59a:	80 83       	st	Z, r24
	
	for(uint32_t i = 0; i < SAMPLE_WINDOW; i++)
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	ba 01       	movw	r22, r20
     5a2:	1b c0       	rjmp	.+54     	; 0x5da <fread_DO+0x6e>
	{
		ADCB.CTRLA |= (0x07 << 2);													//Start ADCB conversion on first channel
     5a4:	e0 e4       	ldi	r30, 0x40	; 64
     5a6:	f2 e0       	ldi	r31, 0x02	; 2
     5a8:	80 81       	ld	r24, Z
     5aa:	8c 61       	ori	r24, 0x1C	; 28
     5ac:	80 83       	st	Z, r24
		while (!(ADCB.INTFLAGS & 0x1))												//wait for conversion
     5ae:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
     5b2:	80 ff       	sbrs	r24, 0
     5b4:	fc cf       	rjmp	.-8      	; 0x5ae <fread_DO+0x42>
		{
			//do nothing
		}
		
		D0_raw[i] = (int16_t)ADCB.CH0.RES;											//fill array with raw data
     5b6:	e0 e4       	ldi	r30, 0x40	; 64
     5b8:	f2 e0       	ldi	r31, 0x02	; 2
     5ba:	84 a1       	ldd	r24, Z+36	; 0x24
     5bc:	95 a1       	ldd	r25, Z+37	; 0x25
     5be:	da 01       	movw	r26, r20
     5c0:	aa 0f       	add	r26, r26
     5c2:	bb 1f       	adc	r27, r27
     5c4:	ab 5e       	subi	r26, 0xEB	; 235
     5c6:	bf 4d       	sbci	r27, 0xDF	; 223
     5c8:	8d 93       	st	X+, r24
     5ca:	9c 93       	st	X, r25
		ADCB.INTFLAGS |= (0x0F);													//clear interrupt flags ADCB
     5cc:	86 81       	ldd	r24, Z+6	; 0x06
     5ce:	8f 60       	ori	r24, 0x0F	; 15
     5d0:	86 83       	std	Z+6, r24	; 0x06
		
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;										//Set ADCB CH2 to pin B5 as input for D0
	ADCB.CTRLA = ADC_ENABLE_bm;														//Enables ADCB
	
	for(uint32_t i = 0; i < SAMPLE_WINDOW; i++)
     5d2:	4f 5f       	subi	r20, 0xFF	; 255
     5d4:	5f 4f       	sbci	r21, 0xFF	; 255
     5d6:	6f 4f       	sbci	r22, 0xFF	; 255
     5d8:	7f 4f       	sbci	r23, 0xFF	; 255
     5da:	48 38       	cpi	r20, 0x88	; 136
     5dc:	23 e1       	ldi	r18, 0x13	; 19
     5de:	52 07       	cpc	r21, r18
     5e0:	61 05       	cpc	r22, r1
     5e2:	71 05       	cpc	r23, r1
     5e4:	f8 f2       	brcs	.-66     	; 0x5a4 <fread_DO+0x38>
//	{
//		write8_UART((uint8_t)D0_raw[i]);											//debug print low byte
//		write8_UART((uint8_t)(D0_raw[i]>>8));										//debug print high byte
//	}
	
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCA clock speed to 62.5kHz
     5e6:	a0 e0       	ldi	r26, 0x00	; 0
     5e8:	b2 e0       	ldi	r27, 0x02	; 2
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	14 96       	adiw	r26, 0x04	; 4
     5ee:	8c 93       	st	X, r24
     5f0:	14 97       	sbiw	r26, 0x04	; 4
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCB clock speed to 62.5kHz
     5f2:	e0 e4       	ldi	r30, 0x40	; 64
     5f4:	f2 e0       	ldi	r31, 0x02	; 2
     5f6:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.CTRLA = ADC_FLUSH_bm;														//Flushes ADCA
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	8c 93       	st	X, r24
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
     5fc:	80 83       	st	Z, r24
void fread_DO(void)
{
	uint8_t hmemory = 1;															//keeps track if high signal is already counted
	uint32_t SamplesRisingEdge[11];													//keeps track of samples at rising edge
	uint32_t cnt = 0;																//counter
	uint8_t Npulses = 0;															//keeps track of detected pulses
     5fe:	40 e0       	ldi	r20, 0x00	; 0

void fread_DO(void)
{
	uint8_t hmemory = 1;															//keeps track if high signal is already counted
	uint32_t SamplesRisingEdge[11];													//keeps track of samples at rising edge
	uint32_t cnt = 0;																//counter
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	dc 01       	movw	r26, r24
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
}

void fread_DO(void)
{
	uint8_t hmemory = 1;															//keeps track if high signal is already counted
     606:	51 e0       	ldi	r21, 0x01	; 1
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCB clock speed to 62.5kHz
	
	ADCA.CTRLA = ADC_FLUSH_bm;														//Flushes ADCA
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
	
	while ((cnt<SAMPLE_WINDOW) && (Npulses < 11))
     608:	2d c0       	rjmp	.+90     	; 0x664 <fread_DO+0xf8>
	{
		if((D0_raw[cnt] > 1000) && (hmemory > 20))
     60a:	fc 01       	movw	r30, r24
     60c:	ee 0f       	add	r30, r30
     60e:	ff 1f       	adc	r31, r31
     610:	eb 5e       	subi	r30, 0xEB	; 235
     612:	ff 4d       	sbci	r31, 0xDF	; 223
     614:	20 81       	ld	r18, Z
     616:	31 81       	ldd	r19, Z+1	; 0x01
     618:	29 3e       	cpi	r18, 0xE9	; 233
     61a:	63 e0       	ldi	r22, 0x03	; 3
     61c:	36 07       	cpc	r19, r22
     61e:	c0 f0       	brcs	.+48     	; 0x650 <fread_DO+0xe4>
     620:	55 31       	cpi	r21, 0x15	; 21
     622:	b0 f0       	brcs	.+44     	; 0x650 <fread_DO+0xe4>
		{
			SamplesRisingEdge[Npulses] = cnt;										//note sample rising edge
     624:	e4 2f       	mov	r30, r20
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ee 0f       	add	r30, r30
     62a:	ff 1f       	adc	r31, r31
     62c:	ee 0f       	add	r30, r30
     62e:	ff 1f       	adc	r31, r31
     630:	21 e0       	ldi	r18, 0x01	; 1
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	2c 0f       	add	r18, r28
     636:	3d 1f       	adc	r19, r29
     638:	e2 0f       	add	r30, r18
     63a:	f3 1f       	adc	r31, r19
     63c:	80 83       	st	Z, r24
     63e:	91 83       	std	Z+1, r25	; 0x01
     640:	a2 83       	std	Z+2, r26	; 0x02
     642:	b3 83       	std	Z+3, r27	; 0x03
			hmemory = 1;															//prevent second trigger on same pulse
			PORTE_OUTSET = PIN4_bm;													//debug pin
     644:	20 e1       	ldi	r18, 0x10	; 16
     646:	20 93 85 06 	sts	0x0685, r18	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
			Npulses++;
     64a:	4f 5f       	subi	r20, 0xFF	; 255
			hmemory = 0;
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	07 c0       	rjmp	.+14     	; 0x65e <fread_DO+0xf2>
		}
		
		else if ((D0_raw[cnt]<1000))
     650:	28 3e       	cpi	r18, 0xE8	; 232
     652:	33 40       	sbci	r19, 0x03	; 3
     654:	20 f4       	brcc	.+8      	; 0x65e <fread_DO+0xf2>
		{
			hmemory++;																//Reset latch
     656:	5f 5f       	subi	r21, 0xFF	; 255
			PORTE_OUTCLR = PIN4_bm;													//debug pin
     658:	20 e1       	ldi	r18, 0x10	; 16
     65a:	20 93 86 06 	sts	0x0686, r18	; 0x800686 <__TEXT_REGION_LENGTH__+0x7be686>
		}
		
		cnt++;																		//add cycle
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	a1 1d       	adc	r26, r1
     662:	b1 1d       	adc	r27, r1
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCB clock speed to 62.5kHz
	
	ADCA.CTRLA = ADC_FLUSH_bm;														//Flushes ADCA
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
	
	while ((cnt<SAMPLE_WINDOW) && (Npulses < 11))
     664:	88 38       	cpi	r24, 0x88	; 136
     666:	23 e1       	ldi	r18, 0x13	; 19
     668:	92 07       	cpc	r25, r18
     66a:	a1 05       	cpc	r26, r1
     66c:	b1 05       	cpc	r27, r1
     66e:	10 f4       	brcc	.+4      	; 0x674 <fread_DO+0x108>
     670:	4b 30       	cpi	r20, 0x0B	; 11
     672:	58 f2       	brcs	.-106    	; 0x60a <fread_DO+0x9e>
		}
		
		cnt++;																		//add cycle
	}
	
	if (Npulses == 11)
     674:	4b 30       	cpi	r20, 0x0B	; 11
     676:	09 f0       	breq	.+2      	; 0x67a <fread_DO+0x10e>
     678:	52 c0       	rjmp	.+164    	; 0x71e <fread_DO+0x1b2>
     67a:	29 c0       	rjmp	.+82     	; 0x6ce <fread_DO+0x162>
	{
		for(int i = 0; i < 9; i++)
		{
			sum = sum + (SamplesRisingEdge[i+2] - SamplesRisingEdge[i+1]);			//calculates sum of trigger intervals
     67c:	fc 01       	movw	r30, r24
     67e:	32 96       	adiw	r30, 0x02	; 2
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	ee 0f       	add	r30, r30
     686:	ff 1f       	adc	r31, r31
     688:	41 e0       	ldi	r20, 0x01	; 1
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	4c 0f       	add	r20, r28
     68e:	5d 1f       	adc	r21, r29
     690:	e4 0f       	add	r30, r20
     692:	f5 1f       	adc	r31, r21
     694:	40 81       	ld	r20, Z
     696:	51 81       	ldd	r21, Z+1	; 0x01
     698:	62 81       	ldd	r22, Z+2	; 0x02
     69a:	73 81       	ldd	r23, Z+3	; 0x03
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	fc 01       	movw	r30, r24
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	a1 e0       	ldi	r26, 0x01	; 1
     6aa:	b0 e0       	ldi	r27, 0x00	; 0
     6ac:	ac 0f       	add	r26, r28
     6ae:	bd 1f       	adc	r27, r29
     6b0:	ea 0f       	add	r30, r26
     6b2:	fb 1f       	adc	r31, r27
     6b4:	c0 80       	ld	r12, Z
     6b6:	d1 80       	ldd	r13, Z+1	; 0x01
     6b8:	e2 80       	ldd	r14, Z+2	; 0x02
     6ba:	f3 80       	ldd	r15, Z+3	; 0x03
     6bc:	4c 19       	sub	r20, r12
     6be:	5d 09       	sbc	r21, r13
     6c0:	6e 09       	sbc	r22, r14
     6c2:	7f 09       	sbc	r23, r15
     6c4:	04 0f       	add	r16, r20
     6c6:	15 1f       	adc	r17, r21
     6c8:	26 1f       	adc	r18, r22
     6ca:	37 1f       	adc	r19, r23
     6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <fread_DO+0x16c>
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	00 e0       	ldi	r16, 0x00	; 0
     6d4:	10 e0       	ldi	r17, 0x00	; 0
     6d6:	98 01       	movw	r18, r16
		cnt++;																		//add cycle
	}
	
	if (Npulses == 11)
	{
		for(int i = 0; i < 9; i++)
     6d8:	89 30       	cpi	r24, 0x09	; 9
     6da:	91 05       	cpc	r25, r1
     6dc:	7c f2       	brlt	.-98     	; 0x67c <fread_DO+0x110>
		{
			sum = sum + (SamplesRisingEdge[i+2] - SamplesRisingEdge[i+1]);			//calculates sum of trigger intervals
		}

		avrageT = (float)sum/8;														//calculates average time in samples
     6de:	c9 01       	movw	r24, r18
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 0c 07 	call	0xe18	; 0xe18 <__floatunsisf>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	5e e3       	ldi	r21, 0x3E	; 62
     6ee:	0e 94 9a 07 	call	0xf34	; 0xf34 <__mulsf3>
     6f2:	26 2f       	mov	r18, r22
     6f4:	46 2f       	mov	r20, r22
     6f6:	57 2f       	mov	r21, r23
     6f8:	68 2f       	mov	r22, r24
     6fa:	79 2f       	mov	r23, r25
     6fc:	4d a7       	std	Y+45, r20	; 0x2d
     6fe:	5e a7       	std	Y+46, r21	; 0x2e
     700:	6f a7       	std	Y+47, r22	; 0x2f
     702:	78 ab       	std	Y+48, r23	; 0x30
		sendarray = (uint8_t*)(&avrageT);											//converts float to 4 seperate bytes in send array

		write8_UART(sendarray[0]);
     704:	82 2f       	mov	r24, r18
     706:	0e 94 3f 01 	call	0x27e	; 0x27e <write8_UART>
		write8_UART(sendarray[1]);
     70a:	8e a5       	ldd	r24, Y+46	; 0x2e
     70c:	0e 94 3f 01 	call	0x27e	; 0x27e <write8_UART>
		write8_UART(sendarray[2]);
     710:	8f a5       	ldd	r24, Y+47	; 0x2f
     712:	0e 94 3f 01 	call	0x27e	; 0x27e <write8_UART>
		write8_UART(sendarray[3]);
     716:	88 a9       	ldd	r24, Y+48	; 0x30
     718:	0e 94 3f 01 	call	0x27e	; 0x27e <write8_UART>
     71c:	06 c0       	rjmp	.+12     	; 0x72a <fread_DO+0x1be>
	}
	
	else
	{
		writeF_UART(0.99999);														//Send error message 
     71e:	68 e5       	ldi	r22, 0x58	; 88
     720:	7f ef       	ldi	r23, 0xFF	; 255
     722:	8f e7       	ldi	r24, 0x7F	; 127
     724:	9f e3       	ldi	r25, 0x3F	; 63
     726:	0e 94 9a 02 	call	0x534	; 0x534 <writeF_UART>
	}	
}
     72a:	e0 96       	adiw	r28, 0x30	; 48
     72c:	cd bf       	out	0x3d, r28	; 61
     72e:	de bf       	out	0x3e, r29	; 62
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	df 90       	pop	r13
     73e:	cf 90       	pop	r12
     740:	08 95       	ret

00000742 <read_supply_ext>:
	ADCB.INTFLAGS |= (0x01);														//clear interrupt flags ADCB
}


void read_supply_ext(void)
{
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	a8 97       	sbiw	r28, 0x28	; 40
     754:	cd bf       	out	0x3d, r28	; 61
     756:	de bf       	out	0x3e, r29	; 62
	float current[10];
	float average_I;
	float sum = 0;																	//Big enough sum of 10 12bit uints;
	
	PORTB_OUTSET = PIN2_bm;															//supply ext 
     758:	84 e0       	ldi	r24, 0x04	; 4
     75a:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
	TIMEOUT();
     75e:	0e 94 3c 02 	call	0x478	; 0x478 <TIMEOUT>
	PORTB_OUTCLR = PIN3_bm;															//disable bat 
     762:	88 e0       	ldi	r24, 0x08	; 8
     764:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
	TIMEOUT();
     768:	0e 94 3c 02 	call	0x478	; 0x478 <TIMEOUT>
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
     76c:	00 e0       	ldi	r16, 0x00	; 0
     76e:	10 e0       	ldi	r17, 0x00	; 0
     770:	20 c0       	rjmp	.+64     	; 0x7b2 <read_supply_ext+0x70>
	{
		read_IT();
     772:	0e 94 48 02 	call	0x490	; 0x490 <read_IT>
		current[i] = IT[0];
     776:	60 91 48 47 	lds	r22, 0x4748	; 0x804748 <IT>
     77a:	70 91 49 47 	lds	r23, 0x4749	; 0x804749 <IT+0x1>
     77e:	78 01       	movw	r14, r16
     780:	ee 0c       	add	r14, r14
     782:	ff 1c       	adc	r15, r15
     784:	ee 0c       	add	r14, r14
     786:	ff 1c       	adc	r15, r15
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	2c 0f       	add	r18, r28
     78e:	3d 1f       	adc	r19, r29
     790:	e2 0e       	add	r14, r18
     792:	f3 1e       	adc	r15, r19
     794:	07 2e       	mov	r0, r23
     796:	00 0c       	add	r0, r0
     798:	88 0b       	sbc	r24, r24
     79a:	99 0b       	sbc	r25, r25
     79c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__floatsisf>
     7a0:	f7 01       	movw	r30, r14
     7a2:	60 83       	st	Z, r22
     7a4:	71 83       	std	Z+1, r23	; 0x01
     7a6:	82 83       	std	Z+2, r24	; 0x02
     7a8:	93 83       	std	Z+3, r25	; 0x03
		TIMEOUT();
     7aa:	0e 94 3c 02 	call	0x478	; 0x478 <TIMEOUT>
	PORTB_OUTSET = PIN2_bm;															//supply ext 
	TIMEOUT();
	PORTB_OUTCLR = PIN3_bm;															//disable bat 
	TIMEOUT();
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
     7ae:	0f 5f       	subi	r16, 0xFF	; 255
     7b0:	1f 4f       	sbci	r17, 0xFF	; 255
     7b2:	0a 30       	cpi	r16, 0x0A	; 10
     7b4:	11 05       	cpc	r17, r1
     7b6:	ec f2       	brlt	.-70     	; 0x772 <read_supply_ext+0x30>
     7b8:	00 e0       	ldi	r16, 0x00	; 0
     7ba:	10 e0       	ldi	r17, 0x00	; 0
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	cb 01       	movw	r24, r22
     7c2:	13 c0       	rjmp	.+38     	; 0x7ea <read_supply_ext+0xa8>
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
	{
		sum += current[i];															//Calculate sum of ADC res
     7c4:	f8 01       	movw	r30, r16
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	ee 0f       	add	r30, r30
     7cc:	ff 1f       	adc	r31, r31
     7ce:	21 e0       	ldi	r18, 0x01	; 1
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	2c 0f       	add	r18, r28
     7d4:	3d 1f       	adc	r19, r29
     7d6:	e2 0f       	add	r30, r18
     7d8:	f3 1f       	adc	r31, r19
     7da:	20 81       	ld	r18, Z
     7dc:	31 81       	ldd	r19, Z+1	; 0x01
     7de:	42 81       	ldd	r20, Z+2	; 0x02
     7e0:	53 81       	ldd	r21, Z+3	; 0x03
     7e2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__addsf3>
		read_IT();
		current[i] = IT[0];
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
     7e6:	0f 5f       	subi	r16, 0xFF	; 255
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	0a 30       	cpi	r16, 0x0A	; 10
     7ec:	11 05       	cpc	r17, r1
     7ee:	54 f3       	brlt	.-44     	; 0x7c4 <read_supply_ext+0x82>
	{
		sum += current[i];															//Calculate sum of ADC res
	}
	
	average_I = sum/10;																//Calculate average ADC res
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	40 e2       	ldi	r20, 0x20	; 32
     7f6:	51 e4       	ldi	r21, 0x41	; 65
     7f8:	0e 94 9a 06 	call	0xd34	; 0xd34 <__divsf3>
	average_I = (average_I*ADC_VREF*ADC_LIN)-ADC_OFFSET;							//Calculate ADC voltage
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	40 e4       	ldi	r20, 0x40	; 64
     802:	50 e4       	ldi	r21, 0x40	; 64
     804:	0e 94 9a 07 	call	0xf34	; 0xf34 <__mulsf3>
     808:	2a e9       	ldi	r18, 0x9A	; 154
     80a:	39 e9       	ldi	r19, 0x99	; 153
     80c:	49 e9       	ldi	r20, 0x99	; 153
     80e:	5e e3       	ldi	r21, 0x3E	; 62
     810:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__subsf3>
	average_I = (average_I/(165))*1000000;											//Convert voltage to current in uA
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	45 e2       	ldi	r20, 0x25	; 37
     81a:	53 e4       	ldi	r21, 0x43	; 67
     81c:	0e 94 9a 06 	call	0xd34	; 0xd34 <__divsf3>
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	34 e2       	ldi	r19, 0x24	; 36
     824:	44 e7       	ldi	r20, 0x74	; 116
     826:	59 e4       	ldi	r21, 0x49	; 73
     828:	0e 94 9a 07 	call	0xf34	; 0xf34 <__mulsf3>
	
	writeF_UART(average_I);															//Return current in uA
     82c:	0e 94 9a 02 	call	0x534	; 0x534 <writeF_UART>
}
     830:	a8 96       	adiw	r28, 0x28	; 40
     832:	cd bf       	out	0x3d, r28	; 61
     834:	de bf       	out	0x3e, r29	; 62
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	08 95       	ret

00000844 <write_volt>:


void write_volt(void)
{
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
	read_voltages();
     848:	0e 94 61 01 	call	0x2c2	; 0x2c2 <read_voltages>
	
	for(int i = 0; i < 7; i ++)
     84c:	c0 e0       	ldi	r28, 0x00	; 0
     84e:	d0 e0       	ldi	r29, 0x00	; 0
     850:	0e c0       	rjmp	.+28     	; 0x86e <write_volt+0x2a>
	{
		writeF_UART(VOLT[i]);														//Write voltages to MATLAB app
     852:	fe 01       	movw	r30, r28
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	e9 5d       	subi	r30, 0xD9	; 217
     85e:	f8 4b       	sbci	r31, 0xB8	; 184
     860:	60 81       	ld	r22, Z
     862:	71 81       	ldd	r23, Z+1	; 0x01
     864:	82 81       	ldd	r24, Z+2	; 0x02
     866:	93 81       	ldd	r25, Z+3	; 0x03
     868:	0e 94 9a 02 	call	0x534	; 0x534 <writeF_UART>

void write_volt(void)
{
	read_voltages();
	
	for(int i = 0; i < 7; i ++)
     86c:	21 96       	adiw	r28, 0x01	; 1
     86e:	c7 30       	cpi	r28, 0x07	; 7
     870:	d1 05       	cpc	r29, r1
     872:	7c f3       	brlt	.-34     	; 0x852 <write_volt+0xe>
	{
		writeF_UART(VOLT[i]);														//Write voltages to MATLAB app
	}
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <read_supply_bat>:

void read_supply_bat(void)
{
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	a8 97       	sbiw	r28, 0x28	; 40
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	de bf       	out	0x3e, r29	; 62
	float current[10];
	float average_I;
	float sum = 0;																	//Big enough sum of 10 12bit uints;
	
	PORTB_OUTSET = PIN3_bm;															//enable bat
     890:	88 e0       	ldi	r24, 0x08	; 8
     892:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
	TIMEOUT();
     896:	0e 94 3c 02 	call	0x478	; 0x478 <TIMEOUT>
	PORTB_OUTCLR = PIN2_bm;															//disable ext 
     89a:	84 e0       	ldi	r24, 0x04	; 4
     89c:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
	TIMEOUT();
     8a0:	0e 94 3c 02 	call	0x478	; 0x478 <TIMEOUT>
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
     8a4:	00 e0       	ldi	r16, 0x00	; 0
     8a6:	10 e0       	ldi	r17, 0x00	; 0
     8a8:	20 c0       	rjmp	.+64     	; 0x8ea <read_supply_bat+0x70>
	{
		read_IT();
     8aa:	0e 94 48 02 	call	0x490	; 0x490 <read_IT>
		current[i] = IT[1];
     8ae:	60 91 4a 47 	lds	r22, 0x474A	; 0x80474a <IT+0x2>
     8b2:	70 91 4b 47 	lds	r23, 0x474B	; 0x80474b <IT+0x3>
     8b6:	78 01       	movw	r14, r16
     8b8:	ee 0c       	add	r14, r14
     8ba:	ff 1c       	adc	r15, r15
     8bc:	ee 0c       	add	r14, r14
     8be:	ff 1c       	adc	r15, r15
     8c0:	21 e0       	ldi	r18, 0x01	; 1
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	2c 0f       	add	r18, r28
     8c6:	3d 1f       	adc	r19, r29
     8c8:	e2 0e       	add	r14, r18
     8ca:	f3 1e       	adc	r15, r19
     8cc:	07 2e       	mov	r0, r23
     8ce:	00 0c       	add	r0, r0
     8d0:	88 0b       	sbc	r24, r24
     8d2:	99 0b       	sbc	r25, r25
     8d4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__floatsisf>
     8d8:	f7 01       	movw	r30, r14
     8da:	60 83       	st	Z, r22
     8dc:	71 83       	std	Z+1, r23	; 0x01
     8de:	82 83       	std	Z+2, r24	; 0x02
     8e0:	93 83       	std	Z+3, r25	; 0x03
		TIMEOUT();
     8e2:	0e 94 3c 02 	call	0x478	; 0x478 <TIMEOUT>
	PORTB_OUTSET = PIN3_bm;															//enable bat
	TIMEOUT();
	PORTB_OUTCLR = PIN2_bm;															//disable ext 
	TIMEOUT();
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
     8e6:	0f 5f       	subi	r16, 0xFF	; 255
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ea:	0a 30       	cpi	r16, 0x0A	; 10
     8ec:	11 05       	cpc	r17, r1
     8ee:	ec f2       	brlt	.-70     	; 0x8aa <read_supply_bat+0x30>
     8f0:	00 e0       	ldi	r16, 0x00	; 0
     8f2:	10 e0       	ldi	r17, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	cb 01       	movw	r24, r22
     8fa:	13 c0       	rjmp	.+38     	; 0x922 <read_supply_bat+0xa8>
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
	{
		sum += current[i];
     8fc:	f8 01       	movw	r30, r16
     8fe:	ee 0f       	add	r30, r30
     900:	ff 1f       	adc	r31, r31
     902:	ee 0f       	add	r30, r30
     904:	ff 1f       	adc	r31, r31
     906:	21 e0       	ldi	r18, 0x01	; 1
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	2c 0f       	add	r18, r28
     90c:	3d 1f       	adc	r19, r29
     90e:	e2 0f       	add	r30, r18
     910:	f3 1f       	adc	r31, r19
     912:	20 81       	ld	r18, Z
     914:	31 81       	ldd	r19, Z+1	; 0x01
     916:	42 81       	ldd	r20, Z+2	; 0x02
     918:	53 81       	ldd	r21, Z+3	; 0x03
     91a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__addsf3>
		read_IT();
		current[i] = IT[1];
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
     91e:	0f 5f       	subi	r16, 0xFF	; 255
     920:	1f 4f       	sbci	r17, 0xFF	; 255
     922:	0a 30       	cpi	r16, 0x0A	; 10
     924:	11 05       	cpc	r17, r1
     926:	54 f3       	brlt	.-44     	; 0x8fc <read_supply_bat+0x82>
	{
		sum += current[i];
	}
	
	average_I = sum/10;																//Calculate average ADC res
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	40 e2       	ldi	r20, 0x20	; 32
     92e:	51 e4       	ldi	r21, 0x41	; 65
     930:	0e 94 9a 06 	call	0xd34	; 0xd34 <__divsf3>
	average_I = (average_I*ADC_VREF*ADC_LIN)-ADC_OFFSET;							//Calculate ADC voltage
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	40 e4       	ldi	r20, 0x40	; 64
     93a:	50 e4       	ldi	r21, 0x40	; 64
     93c:	0e 94 9a 07 	call	0xf34	; 0xf34 <__mulsf3>
     940:	2a e9       	ldi	r18, 0x9A	; 154
     942:	39 e9       	ldi	r19, 0x99	; 153
     944:	49 e9       	ldi	r20, 0x99	; 153
     946:	5e e3       	ldi	r21, 0x3E	; 62
     948:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__subsf3>
	average_I = (average_I/(500))*1000000;										//Convert voltage to current in uA
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	4a ef       	ldi	r20, 0xFA	; 250
     952:	53 e4       	ldi	r21, 0x43	; 67
     954:	0e 94 9a 06 	call	0xd34	; 0xd34 <__divsf3>
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	34 e2       	ldi	r19, 0x24	; 36
     95c:	44 e7       	ldi	r20, 0x74	; 116
     95e:	59 e4       	ldi	r21, 0x49	; 73
     960:	0e 94 9a 07 	call	0xf34	; 0xf34 <__mulsf3>
	
	writeF_UART(average_I);															//Return current in uA
     964:	0e 94 9a 02 	call	0x534	; 0x534 <writeF_UART>
}
     968:	a8 96       	adiw	r28, 0x28	; 40
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	08 95       	ret

0000097c <supply_ext>:
}


void supply_ext(void)
{
	PORTB_OUTSET = PIN2_bm;															//supply ext
     97c:	84 e0       	ldi	r24, 0x04	; 4
     97e:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
	TIMEOUT();
     982:	0e 94 3c 02 	call	0x478	; 0x478 <TIMEOUT>
	PORTB_OUTCLR = PIN3_bm;															//disable bat
     986:	88 e0       	ldi	r24, 0x08	; 8
     988:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
	TIMEOUT();
     98c:	0e 94 3c 02 	call	0x478	; 0x478 <TIMEOUT>
     990:	08 95       	ret

00000992 <supply_bat>:
}

void supply_bat(void)
{
	PORTB_OUTSET = PIN3_bm;															//disable bat
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
	TIMEOUT();
     998:	0e 94 3c 02 	call	0x478	; 0x478 <TIMEOUT>
	PORTB_OUTCLR = PIN2_bm;															//supply ext
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
	TIMEOUT();
     9a2:	0e 94 3c 02 	call	0x478	; 0x478 <TIMEOUT>
     9a6:	08 95       	ret

000009a8 <init_UART>:
#include <stdio.h>
#include "start.h"

void init_UART(void)
{
	PORTE_DIRCLR = PIN2_bm;												//Set RX pin USARTE0 E2 as input
     9a8:	84 e0       	ldi	r24, 0x04	; 4
     9aa:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x7be682>
	PORTE_DIRSET = PIN3_bm;												//Set TX pin USARTE0 E3 as output
     9ae:	88 e0       	ldi	r24, 0x08	; 8
     9b0:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	PORTE_OUTSET = PIN3_bm;												//Set TX pin to high
     9b4:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	USARTE0.BAUDCTRLB |= (0x09<<4);										//Set BSCALE to -7 for baud 115200
     9b8:	e0 ea       	ldi	r30, 0xA0	; 160
     9ba:	fa e0       	ldi	r31, 0x0A	; 10
     9bc:	87 81       	ldd	r24, Z+7	; 0x07
     9be:	80 69       	ori	r24, 0x90	; 144
     9c0:	87 83       	std	Z+7, r24	; 0x07
	USARTE0.BAUDCTRLA |= (0x2E);										//Set BSEL to 2094 for baud 115200
     9c2:	86 81       	ldd	r24, Z+6	; 0x06
     9c4:	8e 62       	ori	r24, 0x2E	; 46
     9c6:	86 83       	std	Z+6, r24	; 0x06
	USARTE0.BAUDCTRLB |= (0x08);										//Set BSel to 2094 for baud 115200
     9c8:	87 81       	ldd	r24, Z+7	; 0x07
     9ca:	88 60       	ori	r24, 0x08	; 8
     9cc:	87 83       	std	Z+7, r24	; 0x07
	
	USARTE0.CTRLC |= (0x03);											//Sets amount of data bits to 8
     9ce:	85 81       	ldd	r24, Z+5	; 0x05
     9d0:	83 60       	ori	r24, 0x03	; 3
     9d2:	85 83       	std	Z+5, r24	; 0x05
	USARTE0.CTRLB |= (0x03<<3);											//Sets the Rx and TX enable bits.
     9d4:	84 81       	ldd	r24, Z+4	; 0x04
     9d6:	88 61       	ori	r24, 0x18	; 24
     9d8:	84 83       	std	Z+4, r24	; 0x04
     9da:	08 95       	ret

000009dc <init_CLK>:
}

void init_CLK(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;											// Enable internal 32 MHz oscillator
     9dc:	e0 e5       	ldi	r30, 0x50	; 80
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	82 60       	ori	r24, 0x02	; 2
     9e4:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));								// Wait for oscillator is ready
     9e6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
     9ea:	81 ff       	sbrs	r24, 1
     9ec:	fc cf       	rjmp	.-8      	; 0x9e6 <init_CLK+0xa>
	CCP = CCP_IOREG_gc;													// Security signature to modify clock
     9ee:	88 ed       	ldi	r24, 0xD8	; 216
     9f0:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;									// Select 32 MHz oscillator
     9f2:	e0 e4       	ldi	r30, 0x40	; 64
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	80 83       	st	Z, r24
	CLK.PSCTRL = CLK_PSADIV_1_gc;										// Set PSA to 1
     9fa:	11 82       	std	Z+1, r1	; 0x01
	CLK.PSCTRL = CLK_PSBCDIV_1_1_gc;									// Set PSB&PSC to 1
     9fc:	11 82       	std	Z+1, r1	; 0x01
     9fe:	08 95       	ret

00000a00 <init_TIMER>:
}

void init_TIMER(void)
{
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;									//Set timer E0 to normal mode
     a00:	e0 e0       	ldi	r30, 0x00	; 0
     a02:	fa e0       	ldi	r31, 0x0A	; 10
     a04:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;										//Timer is off until clksel is changed
     a06:	10 82       	st	Z, r1
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;									//Set overflow interrupt TCE0 to low level
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	86 83       	std	Z+6, r24	; 0x06
	TCE0.PERL = 0xFF;
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	86 a3       	std	Z+38, r24	; 0x26
	TCE0.PERH = 0xFF;													//t = N*(PER + 1)/F_CPU = 0.25
     a10:	87 a3       	std	Z+39, r24	; 0x27
     a12:	08 95       	ret

00000a14 <init_DELAY>:
}

void init_DELAY(void)													//Uses two 16Bit TC's to form 32 Bit one
{
	TCD1.CTRLB = TC_WGMODE_NORMAL_gc;									//Set timer E0 to normal mode
     a14:	e0 e4       	ldi	r30, 0x40	; 64
     a16:	f9 e0       	ldi	r31, 0x09	; 9
     a18:	11 82       	std	Z+1, r1	; 0x01
	TCD1.CTRLA = TC_CLKSEL_OFF_gc;										//Timer is off until clksel is changed
     a1a:	10 82       	st	Z, r1
	TCD1.PER = 0xFFFF;													//t = N*(PER + 1)/F_CPU = 0.25
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	9f ef       	ldi	r25, 0xFF	; 255
     a20:	86 a3       	std	Z+38, r24	; 0x26
     a22:	97 a3       	std	Z+39, r25	; 0x27
     a24:	08 95       	ret

00000a26 <init_ADC>:
}

void init_ADC(void)
{
	PORTA_DIRCLR = PIN0_bm;												//VCC_main
     a26:	e2 e0       	ldi	r30, 0x02	; 2
     a28:	f6 e0       	ldi	r31, 0x06	; 6
     a2a:	31 e0       	ldi	r19, 0x01	; 1
     a2c:	30 83       	st	Z, r19
	PORTA_DIRCLR = PIN1_bm;												//CORE_VDD
     a2e:	22 e0       	ldi	r18, 0x02	; 2
     a30:	20 83       	st	Z, r18
	PORTA_DIRCLR = PIN2_bm;												//+1.8VDD
     a32:	84 e0       	ldi	r24, 0x04	; 4
     a34:	80 83       	st	Z, r24
	PORTA_DIRCLR = PIN3_bm;												//+3.0VIO
     a36:	88 e0       	ldi	r24, 0x08	; 8
     a38:	80 83       	st	Z, r24
	PORTA_DIRCLR = PIN4_bm;												//I_external
     a3a:	90 e1       	ldi	r25, 0x10	; 16
     a3c:	90 83       	st	Z, r25
	PORTA_DIRCLR = PIN5_bm;												//I_battery
     a3e:	80 e2       	ldi	r24, 0x20	; 32
     a40:	80 83       	st	Z, r24
	
	PORTB_DIRCLR = PIN0_bm;												//VPP_2V5
     a42:	e2 e2       	ldi	r30, 0x22	; 34
     a44:	f6 e0       	ldi	r31, 0x06	; 6
     a46:	30 83       	st	Z, r19
	PORTB_DIRCLR = PIN1_bm;												//+1.8VIO
     a48:	20 83       	st	Z, r18
	PORTB_DIRCLR = PIN4_bm;												//BLE_VDD
     a4a:	90 83       	st	Z, r25
	PORTB_DIRCLR = PIN5_bm;												//D0 samples
     a4c:	80 83       	st	Z, r24
	PORTB_DIRCLR = PIN6_bm;												//D1 samples
     a4e:	80 e4       	ldi	r24, 0x40	; 64
     a50:	80 83       	st	Z, r24
	
	//ADCA.PRESCALER |= ADC_PRESCALER_DIV8_gc;							//Set ADCA clock speed to 62.5kHz
	//ADCB.PRESCALER |= ADC_PRESCALER_DIV8_gc;							//Set ADCB clock speed to 62.5kHz
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCA clock speed to 62.5kHz
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	b2 e0       	ldi	r27, 0x02	; 2
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	14 96       	adiw	r26, 0x04	; 4
     a5a:	8c 93       	st	X, r24
     a5c:	14 97       	sbiw	r26, 0x04	; 4
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCB clock speed to 62.5kHz
     a5e:	e0 e4       	ldi	r30, 0x40	; 64
     a60:	f2 e0       	ldi	r31, 0x02	; 2
     a62:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCA to 12bit resolution
     a64:	12 96       	adiw	r26, 0x02	; 2
     a66:	8c 91       	ld	r24, X
     a68:	12 97       	sbiw	r26, 0x02	; 2
     a6a:	12 96       	adiw	r26, 0x02	; 2
     a6c:	8c 93       	st	X, r24
     a6e:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCB to 12bit resolution
     a70:	82 81       	ldd	r24, Z+2	; 0x02
     a72:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCA reference voltage to internal VCC
     a74:	12 96       	adiw	r26, 0x02	; 2
     a76:	8c 91       	ld	r24, X
     a78:	12 97       	sbiw	r26, 0x02	; 2
     a7a:	80 61       	ori	r24, 0x10	; 16
     a7c:	12 96       	adiw	r26, 0x02	; 2
     a7e:	8c 93       	st	X, r24
     a80:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCB reference voltage to internal VCC
     a82:	82 81       	ldd	r24, Z+2	; 0x02
     a84:	80 61       	ori	r24, 0x10	; 16
     a86:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 0 differential input
     a88:	90 96       	adiw	r26, 0x20	; 32
     a8a:	8c 91       	ld	r24, X
     a8c:	90 97       	sbiw	r26, 0x20	; 32
     a8e:	81 60       	ori	r24, 0x01	; 1
     a90:	90 96       	adiw	r26, 0x20	; 32
     a92:	8c 93       	st	X, r24
     a94:	90 97       	sbiw	r26, 0x20	; 32
	ADCA.CH1.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 1 differential input
     a96:	98 96       	adiw	r26, 0x28	; 40
     a98:	8c 91       	ld	r24, X
     a9a:	98 97       	sbiw	r26, 0x28	; 40
     a9c:	81 60       	ori	r24, 0x01	; 1
     a9e:	98 96       	adiw	r26, 0x28	; 40
     aa0:	8c 93       	st	X, r24
     aa2:	98 97       	sbiw	r26, 0x28	; 40
	ADCA.CH2.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 2 differential input
     aa4:	d0 96       	adiw	r26, 0x30	; 48
     aa6:	8c 91       	ld	r24, X
     aa8:	d0 97       	sbiw	r26, 0x30	; 48
     aaa:	81 60       	ori	r24, 0x01	; 1
     aac:	d0 96       	adiw	r26, 0x30	; 48
     aae:	8c 93       	st	X, r24
     ab0:	d0 97       	sbiw	r26, 0x30	; 48
	ADCA.CH3.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 3 differential input
     ab2:	d8 96       	adiw	r26, 0x38	; 56
     ab4:	8c 91       	ld	r24, X
     ab6:	d8 97       	sbiw	r26, 0x38	; 56
     ab8:	81 60       	ori	r24, 0x01	; 1
     aba:	d8 96       	adiw	r26, 0x38	; 56
     abc:	8c 93       	st	X, r24
     abe:	d8 97       	sbiw	r26, 0x38	; 56
	
	ADCB.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 0 differential input
     ac0:	80 a1       	ldd	r24, Z+32	; 0x20
     ac2:	81 60       	ori	r24, 0x01	; 1
     ac4:	80 a3       	std	Z+32, r24	; 0x20
	ADCB.CH1.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 1 differential input
     ac6:	80 a5       	ldd	r24, Z+40	; 0x28
     ac8:	81 60       	ori	r24, 0x01	; 1
     aca:	80 a7       	std	Z+40, r24	; 0x28
	ADCB.CH2.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 2 differential input
     acc:	80 a9       	ldd	r24, Z+48	; 0x30
     ace:	81 60       	ori	r24, 0x01	; 1
     ad0:	80 ab       	std	Z+48, r24	; 0x30
	ADCB.CH3.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 3 differential input
     ad2:	80 ad       	ldd	r24, Z+56	; 0x38
     ad4:	81 60       	ori	r24, 0x01	; 1
     ad6:	80 af       	std	Z+56, r24	; 0x38
	
	ADCA.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 0 reference voltage to internal GND
     ad8:	91 96       	adiw	r26, 0x21	; 33
     ada:	8c 91       	ld	r24, X
     adc:	91 97       	sbiw	r26, 0x21	; 33
     ade:	87 60       	ori	r24, 0x07	; 7
     ae0:	91 96       	adiw	r26, 0x21	; 33
     ae2:	8c 93       	st	X, r24
     ae4:	91 97       	sbiw	r26, 0x21	; 33
	ADCA.CH1.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 1 reference voltage to internal GND
     ae6:	99 96       	adiw	r26, 0x29	; 41
     ae8:	8c 91       	ld	r24, X
     aea:	99 97       	sbiw	r26, 0x29	; 41
     aec:	87 60       	ori	r24, 0x07	; 7
     aee:	99 96       	adiw	r26, 0x29	; 41
     af0:	8c 93       	st	X, r24
     af2:	99 97       	sbiw	r26, 0x29	; 41
	ADCA.CH2.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 2 reference voltage to internal GND
     af4:	d1 96       	adiw	r26, 0x31	; 49
     af6:	8c 91       	ld	r24, X
     af8:	d1 97       	sbiw	r26, 0x31	; 49
     afa:	87 60       	ori	r24, 0x07	; 7
     afc:	d1 96       	adiw	r26, 0x31	; 49
     afe:	8c 93       	st	X, r24
     b00:	d1 97       	sbiw	r26, 0x31	; 49
	ADCA.CH3.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 3 reference voltage to internal GND
     b02:	d9 96       	adiw	r26, 0x39	; 57
     b04:	8c 91       	ld	r24, X
     b06:	d9 97       	sbiw	r26, 0x39	; 57
     b08:	87 60       	ori	r24, 0x07	; 7
     b0a:	d9 96       	adiw	r26, 0x39	; 57
     b0c:	8c 93       	st	X, r24
	
	ADCB.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 0 reference voltage to internal GND
     b0e:	81 a1       	ldd	r24, Z+33	; 0x21
     b10:	87 60       	ori	r24, 0x07	; 7
     b12:	81 a3       	std	Z+33, r24	; 0x21
	ADCB.CH1.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 1 reference voltage to internal GND
     b14:	81 a5       	ldd	r24, Z+41	; 0x29
     b16:	87 60       	ori	r24, 0x07	; 7
     b18:	81 a7       	std	Z+41, r24	; 0x29
	ADCB.CH2.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 2 reference voltage to internal GND
     b1a:	81 a9       	ldd	r24, Z+49	; 0x31
     b1c:	87 60       	ori	r24, 0x07	; 7
     b1e:	81 ab       	std	Z+49, r24	; 0x31
	ADCB.CH3.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 3 reference voltage to internal GND
     b20:	81 ad       	ldd	r24, Z+57	; 0x39
     b22:	87 60       	ori	r24, 0x07	; 7
     b24:	81 af       	std	Z+57, r24	; 0x39
     b26:	08 95       	ret

00000b28 <init_supply>:
}
#endif

void init_supply(void)
{
	PORTB_DIRSET = PIN2_bm;												//Set pin as output to enable ... supply
     b28:	e1 e2       	ldi	r30, 0x21	; 33
     b2a:	f6 e0       	ldi	r31, 0x06	; 6
     b2c:	84 e0       	ldi	r24, 0x04	; 4
     b2e:	80 83       	st	Z, r24
	PORTB_DIRSET = PIN3_bm;												//Set pin as output to enable ... supply
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	80 83       	st	Z, r24
     b34:	08 95       	ret

00000b36 <__vector_47>:
char OUTPUTBUF[5];
int16_t OutVar;
uint16_t D0_raw[SAMPLE_WINDOW];

ISR(TCE0_OVF_vect)														//Do something every timer E0 overflow
{
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
	PTimeOut = 1;														//If TC overflow occurs before collecting pulses stop while loop
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <PTimeOut>
     b4c:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <PTimeOut+0x1>
}
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <__vector_64>:

ISR(PORTD_INT0_vect)													//Do something when PD2 encounters falling edge
{
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	0b b6       	in	r0, 0x3b	; 59
     b6a:	0f 92       	push	r0
     b6c:	2f 93       	push	r18
     b6e:	3f 93       	push	r19
     b70:	4f 93       	push	r20
     b72:	8f 93       	push	r24
     b74:	9f 93       	push	r25
     b76:	ef 93       	push	r30
     b78:	ff 93       	push	r31
	PTime[TC_samples] = (((TCE0.CNTH+1)<<8)+TCE0.CNTL+1);
     b7a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     b7e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     b82:	e0 e0       	ldi	r30, 0x00	; 0
     b84:	fa e0       	ldi	r31, 0x0A	; 10
     b86:	81 a1       	ldd	r24, Z+33	; 0x21
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	98 2f       	mov	r25, r24
     b8e:	88 27       	eor	r24, r24
     b90:	40 a1       	ldd	r20, Z+32	; 0x20
     b92:	84 0f       	add	r24, r20
     b94:	91 1d       	adc	r25, r1
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	f9 01       	movw	r30, r18
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	e9 5f       	subi	r30, 0xF9	; 249
     ba0:	ff 4d       	sbci	r31, 0xDF	; 223
     ba2:	80 83       	st	Z, r24
     ba4:	91 83       	std	Z+1, r25	; 0x01
	TC_samples++;
     ba6:	2f 5f       	subi	r18, 0xFF	; 255
     ba8:	3f 4f       	sbci	r19, 0xFF	; 255
     baa:	20 93 00 20 	sts	0x2000, r18	; 0x802000 <__DATA_REGION_ORIGIN__>
     bae:	30 93 01 20 	sts	0x2001, r19	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
}
     bb2:	ff 91       	pop	r31
     bb4:	ef 91       	pop	r30
     bb6:	9f 91       	pop	r25
     bb8:	8f 91       	pop	r24
     bba:	4f 91       	pop	r20
     bbc:	3f 91       	pop	r19
     bbe:	2f 91       	pop	r18
     bc0:	0f 90       	pop	r0
     bc2:	0b be       	out	0x3b, r0	; 59
     bc4:	0f 90       	pop	r0
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	0f 90       	pop	r0
     bca:	1f 90       	pop	r1
     bcc:	18 95       	reti

00000bce <__vector_65>:

ISR(PORTD_INT1_vect)													//Do something when PD1 encounters falling edge
{
     bce:	1f 92       	push	r1
     bd0:	0f 92       	push	r0
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	0f 92       	push	r0
     bd6:	11 24       	eor	r1, r1
	//Do something
}
     bd8:	0f 90       	pop	r0
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	0f 90       	pop	r0
     bde:	1f 90       	pop	r1
     be0:	18 95       	reti

00000be2 <main>:

int main(void)
{
	init_CLK();
     be2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <init_CLK>
	init_TIMER();
     be6:	0e 94 00 05 	call	0xa00	; 0xa00 <init_TIMER>
	init_DELAY();
     bea:	0e 94 0a 05 	call	0xa14	; 0xa14 <init_DELAY>
	init_ADC();
     bee:	0e 94 13 05 	call	0xa26	; 0xa26 <init_ADC>
	init_UART();
     bf2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <init_UART>
	init_supply();
     bf6:	0e 94 94 05 	call	0xb28	; 0xb28 <init_supply>
	sei();
     bfa:	78 94       	sei
	PMIC.CTRL |= PMIC_LOLVLEN_bm;										//Set low level interrupts
     bfc:	e0 ea       	ldi	r30, 0xA0	; 160
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	81 60       	ori	r24, 0x01	; 1
     c04:	82 83       	std	Z+2, r24	; 0x02
	
	PORTA_DIRSET = PIN7_bm;												//Set I'm alive pin as output
     c06:	80 e8       	ldi	r24, 0x80	; 128
     c08:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7be601>
	PORTA_OUTSET = PIN7_bm;												//Enable I'm alive LED
     c0c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
	
	PORTE_DIRSET = PIN4_bm;												//Timing debug pin
     c10:	80 e1       	ldi	r24, 0x10	; 16
     c12:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
   
   uint8_t uart_data;

    while (1) 
    {
		uart_data = read_UART();
     c16:	0e 94 29 01 	call	0x252	; 0x252 <read_UART>
		switch(uart_data)
     c1a:	e8 2f       	mov	r30, r24
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	e7 30       	cpi	r30, 0x07	; 7
     c20:	f1 05       	cpc	r31, r1
     c22:	c8 f7       	brcc	.-14     	; 0xc16 <main+0x34>
     c24:	88 27       	eor	r24, r24
     c26:	e2 50       	subi	r30, 0x02	; 2
     c28:	ff 4f       	sbci	r31, 0xFF	; 255
     c2a:	8f 4f       	sbci	r24, 0xFF	; 255
     c2c:	0c 94 07 08 	jmp	0x100e	; 0x100e <__tablejump2__>
		{
			case(SupBat):
				supply_bat();											//Enables battery power supply and disables ext
     c30:	0e 94 c9 04 	call	0x992	; 0x992 <supply_bat>
				break;
     c34:	f0 cf       	rjmp	.-32     	; 0xc16 <main+0x34>
				
			case(SupExt):
				supply_ext();											//Enables ext power supply and disables battery
     c36:	0e 94 be 04 	call	0x97c	; 0x97c <supply_ext>
				break;
     c3a:	ed cf       	rjmp	.-38     	; 0xc16 <main+0x34>

			case(SupOff):
				LPM_P_OFF();											//turn of both external and bat supply to LPM
     c3c:	0e 94 93 02 	call	0x526	; 0x526 <LPM_P_OFF>
				break;
     c40:	ea cf       	rjmp	.-44     	; 0xc16 <main+0x34>
				
			case(IBat):
				read_supply_bat();										//measures Ibat in uA	
     c42:	0e 94 3d 04 	call	0x87a	; 0x87a <read_supply_bat>
				break;
     c46:	e7 cf       	rjmp	.-50     	; 0xc16 <main+0x34>
				
			case(IExt):
				read_supply_ext();										//measures IExt in uA
     c48:	0e 94 a1 03 	call	0x742	; 0x742 <read_supply_ext>
				break;
     c4c:	e4 cf       	rjmp	.-56     	; 0xc16 <main+0x34>
				
			case(RVolt):
				write_volt();											//Reads voltages and converts them to two uint8_t data packages (14 packages total)
     c4e:	0e 94 22 04 	call	0x844	; 0x844 <write_volt>
				break;
     c52:	e1 cf       	rjmp	.-62     	; 0xc16 <main+0x34>
				
			case(RFrequency):
				fread_DO();												//read the frequency of Digital outputs
     c54:	0e 94 b6 02 	call	0x56c	; 0x56c <fread_DO>
				break;
     c58:	de cf       	rjmp	.-68     	; 0xc16 <main+0x34>

00000c5a <__subsf3>:
     c5a:	50 58       	subi	r21, 0x80	; 128

00000c5c <__addsf3>:
     c5c:	bb 27       	eor	r27, r27
     c5e:	aa 27       	eor	r26, r26
     c60:	0e 94 45 06 	call	0xc8a	; 0xc8a <__addsf3x>
     c64:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__fp_round>
     c68:	0e 94 52 07 	call	0xea4	; 0xea4 <__fp_pscA>
     c6c:	38 f0       	brcs	.+14     	; 0xc7c <__addsf3+0x20>
     c6e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__fp_pscB>
     c72:	20 f0       	brcs	.+8      	; 0xc7c <__addsf3+0x20>
     c74:	39 f4       	brne	.+14     	; 0xc84 <__addsf3+0x28>
     c76:	9f 3f       	cpi	r25, 0xFF	; 255
     c78:	19 f4       	brne	.+6      	; 0xc80 <__addsf3+0x24>
     c7a:	26 f4       	brtc	.+8      	; 0xc84 <__addsf3+0x28>
     c7c:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__fp_nan>
     c80:	0e f4       	brtc	.+2      	; 0xc84 <__addsf3+0x28>
     c82:	e0 95       	com	r30
     c84:	e7 fb       	bst	r30, 7
     c86:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_inf>

00000c8a <__addsf3x>:
     c8a:	e9 2f       	mov	r30, r25
     c8c:	0e 94 71 07 	call	0xee2	; 0xee2 <__fp_split3>
     c90:	58 f3       	brcs	.-42     	; 0xc68 <__addsf3+0xc>
     c92:	ba 17       	cp	r27, r26
     c94:	62 07       	cpc	r22, r18
     c96:	73 07       	cpc	r23, r19
     c98:	84 07       	cpc	r24, r20
     c9a:	95 07       	cpc	r25, r21
     c9c:	20 f0       	brcs	.+8      	; 0xca6 <__addsf3x+0x1c>
     c9e:	79 f4       	brne	.+30     	; 0xcbe <__addsf3x+0x34>
     ca0:	a6 f5       	brtc	.+104    	; 0xd0a <__addsf3x+0x80>
     ca2:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__fp_zero>
     ca6:	0e f4       	brtc	.+2      	; 0xcaa <__addsf3x+0x20>
     ca8:	e0 95       	com	r30
     caa:	0b 2e       	mov	r0, r27
     cac:	ba 2f       	mov	r27, r26
     cae:	a0 2d       	mov	r26, r0
     cb0:	0b 01       	movw	r0, r22
     cb2:	b9 01       	movw	r22, r18
     cb4:	90 01       	movw	r18, r0
     cb6:	0c 01       	movw	r0, r24
     cb8:	ca 01       	movw	r24, r20
     cba:	a0 01       	movw	r20, r0
     cbc:	11 24       	eor	r1, r1
     cbe:	ff 27       	eor	r31, r31
     cc0:	59 1b       	sub	r21, r25
     cc2:	99 f0       	breq	.+38     	; 0xcea <__addsf3x+0x60>
     cc4:	59 3f       	cpi	r21, 0xF9	; 249
     cc6:	50 f4       	brcc	.+20     	; 0xcdc <__addsf3x+0x52>
     cc8:	50 3e       	cpi	r21, 0xE0	; 224
     cca:	68 f1       	brcs	.+90     	; 0xd26 <__addsf3x+0x9c>
     ccc:	1a 16       	cp	r1, r26
     cce:	f0 40       	sbci	r31, 0x00	; 0
     cd0:	a2 2f       	mov	r26, r18
     cd2:	23 2f       	mov	r18, r19
     cd4:	34 2f       	mov	r19, r20
     cd6:	44 27       	eor	r20, r20
     cd8:	58 5f       	subi	r21, 0xF8	; 248
     cda:	f3 cf       	rjmp	.-26     	; 0xcc2 <__addsf3x+0x38>
     cdc:	46 95       	lsr	r20
     cde:	37 95       	ror	r19
     ce0:	27 95       	ror	r18
     ce2:	a7 95       	ror	r26
     ce4:	f0 40       	sbci	r31, 0x00	; 0
     ce6:	53 95       	inc	r21
     ce8:	c9 f7       	brne	.-14     	; 0xcdc <__addsf3x+0x52>
     cea:	7e f4       	brtc	.+30     	; 0xd0a <__addsf3x+0x80>
     cec:	1f 16       	cp	r1, r31
     cee:	ba 0b       	sbc	r27, r26
     cf0:	62 0b       	sbc	r22, r18
     cf2:	73 0b       	sbc	r23, r19
     cf4:	84 0b       	sbc	r24, r20
     cf6:	ba f0       	brmi	.+46     	; 0xd26 <__addsf3x+0x9c>
     cf8:	91 50       	subi	r25, 0x01	; 1
     cfa:	a1 f0       	breq	.+40     	; 0xd24 <__addsf3x+0x9a>
     cfc:	ff 0f       	add	r31, r31
     cfe:	bb 1f       	adc	r27, r27
     d00:	66 1f       	adc	r22, r22
     d02:	77 1f       	adc	r23, r23
     d04:	88 1f       	adc	r24, r24
     d06:	c2 f7       	brpl	.-16     	; 0xcf8 <__addsf3x+0x6e>
     d08:	0e c0       	rjmp	.+28     	; 0xd26 <__addsf3x+0x9c>
     d0a:	ba 0f       	add	r27, r26
     d0c:	62 1f       	adc	r22, r18
     d0e:	73 1f       	adc	r23, r19
     d10:	84 1f       	adc	r24, r20
     d12:	48 f4       	brcc	.+18     	; 0xd26 <__addsf3x+0x9c>
     d14:	87 95       	ror	r24
     d16:	77 95       	ror	r23
     d18:	67 95       	ror	r22
     d1a:	b7 95       	ror	r27
     d1c:	f7 95       	ror	r31
     d1e:	9e 3f       	cpi	r25, 0xFE	; 254
     d20:	08 f0       	brcs	.+2      	; 0xd24 <__addsf3x+0x9a>
     d22:	b0 cf       	rjmp	.-160    	; 0xc84 <__addsf3+0x28>
     d24:	93 95       	inc	r25
     d26:	88 0f       	add	r24, r24
     d28:	08 f0       	brcs	.+2      	; 0xd2c <__addsf3x+0xa2>
     d2a:	99 27       	eor	r25, r25
     d2c:	ee 0f       	add	r30, r30
     d2e:	97 95       	ror	r25
     d30:	87 95       	ror	r24
     d32:	08 95       	ret

00000d34 <__divsf3>:
     d34:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__divsf3x>
     d38:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__fp_round>
     d3c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__fp_pscB>
     d40:	58 f0       	brcs	.+22     	; 0xd58 <__divsf3+0x24>
     d42:	0e 94 52 07 	call	0xea4	; 0xea4 <__fp_pscA>
     d46:	40 f0       	brcs	.+16     	; 0xd58 <__divsf3+0x24>
     d48:	29 f4       	brne	.+10     	; 0xd54 <__divsf3+0x20>
     d4a:	5f 3f       	cpi	r21, 0xFF	; 255
     d4c:	29 f0       	breq	.+10     	; 0xd58 <__divsf3+0x24>
     d4e:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_inf>
     d52:	51 11       	cpse	r21, r1
     d54:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__fp_szero>
     d58:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__fp_nan>

00000d5c <__divsf3x>:
     d5c:	0e 94 71 07 	call	0xee2	; 0xee2 <__fp_split3>
     d60:	68 f3       	brcs	.-38     	; 0xd3c <__divsf3+0x8>

00000d62 <__divsf3_pse>:
     d62:	99 23       	and	r25, r25
     d64:	b1 f3       	breq	.-20     	; 0xd52 <__divsf3+0x1e>
     d66:	55 23       	and	r21, r21
     d68:	91 f3       	breq	.-28     	; 0xd4e <__divsf3+0x1a>
     d6a:	95 1b       	sub	r25, r21
     d6c:	55 0b       	sbc	r21, r21
     d6e:	bb 27       	eor	r27, r27
     d70:	aa 27       	eor	r26, r26
     d72:	62 17       	cp	r22, r18
     d74:	73 07       	cpc	r23, r19
     d76:	84 07       	cpc	r24, r20
     d78:	38 f0       	brcs	.+14     	; 0xd88 <__divsf3_pse+0x26>
     d7a:	9f 5f       	subi	r25, 0xFF	; 255
     d7c:	5f 4f       	sbci	r21, 0xFF	; 255
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	44 1f       	adc	r20, r20
     d84:	aa 1f       	adc	r26, r26
     d86:	a9 f3       	breq	.-22     	; 0xd72 <__divsf3_pse+0x10>
     d88:	35 d0       	rcall	.+106    	; 0xdf4 <__divsf3_pse+0x92>
     d8a:	0e 2e       	mov	r0, r30
     d8c:	3a f0       	brmi	.+14     	; 0xd9c <__divsf3_pse+0x3a>
     d8e:	e0 e8       	ldi	r30, 0x80	; 128
     d90:	32 d0       	rcall	.+100    	; 0xdf6 <__divsf3_pse+0x94>
     d92:	91 50       	subi	r25, 0x01	; 1
     d94:	50 40       	sbci	r21, 0x00	; 0
     d96:	e6 95       	lsr	r30
     d98:	00 1c       	adc	r0, r0
     d9a:	ca f7       	brpl	.-14     	; 0xd8e <__divsf3_pse+0x2c>
     d9c:	2b d0       	rcall	.+86     	; 0xdf4 <__divsf3_pse+0x92>
     d9e:	fe 2f       	mov	r31, r30
     da0:	29 d0       	rcall	.+82     	; 0xdf4 <__divsf3_pse+0x92>
     da2:	66 0f       	add	r22, r22
     da4:	77 1f       	adc	r23, r23
     da6:	88 1f       	adc	r24, r24
     da8:	bb 1f       	adc	r27, r27
     daa:	26 17       	cp	r18, r22
     dac:	37 07       	cpc	r19, r23
     dae:	48 07       	cpc	r20, r24
     db0:	ab 07       	cpc	r26, r27
     db2:	b0 e8       	ldi	r27, 0x80	; 128
     db4:	09 f0       	breq	.+2      	; 0xdb8 <__divsf3_pse+0x56>
     db6:	bb 0b       	sbc	r27, r27
     db8:	80 2d       	mov	r24, r0
     dba:	bf 01       	movw	r22, r30
     dbc:	ff 27       	eor	r31, r31
     dbe:	93 58       	subi	r25, 0x83	; 131
     dc0:	5f 4f       	sbci	r21, 0xFF	; 255
     dc2:	3a f0       	brmi	.+14     	; 0xdd2 <__divsf3_pse+0x70>
     dc4:	9e 3f       	cpi	r25, 0xFE	; 254
     dc6:	51 05       	cpc	r21, r1
     dc8:	78 f0       	brcs	.+30     	; 0xde8 <__divsf3_pse+0x86>
     dca:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_inf>
     dce:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__fp_szero>
     dd2:	5f 3f       	cpi	r21, 0xFF	; 255
     dd4:	e4 f3       	brlt	.-8      	; 0xdce <__divsf3_pse+0x6c>
     dd6:	98 3e       	cpi	r25, 0xE8	; 232
     dd8:	d4 f3       	brlt	.-12     	; 0xdce <__divsf3_pse+0x6c>
     dda:	86 95       	lsr	r24
     ddc:	77 95       	ror	r23
     dde:	67 95       	ror	r22
     de0:	b7 95       	ror	r27
     de2:	f7 95       	ror	r31
     de4:	9f 5f       	subi	r25, 0xFF	; 255
     de6:	c9 f7       	brne	.-14     	; 0xdda <__divsf3_pse+0x78>
     de8:	88 0f       	add	r24, r24
     dea:	91 1d       	adc	r25, r1
     dec:	96 95       	lsr	r25
     dee:	87 95       	ror	r24
     df0:	97 f9       	bld	r25, 7
     df2:	08 95       	ret
     df4:	e1 e0       	ldi	r30, 0x01	; 1
     df6:	66 0f       	add	r22, r22
     df8:	77 1f       	adc	r23, r23
     dfa:	88 1f       	adc	r24, r24
     dfc:	bb 1f       	adc	r27, r27
     dfe:	62 17       	cp	r22, r18
     e00:	73 07       	cpc	r23, r19
     e02:	84 07       	cpc	r24, r20
     e04:	ba 07       	cpc	r27, r26
     e06:	20 f0       	brcs	.+8      	; 0xe10 <__divsf3_pse+0xae>
     e08:	62 1b       	sub	r22, r18
     e0a:	73 0b       	sbc	r23, r19
     e0c:	84 0b       	sbc	r24, r20
     e0e:	ba 0b       	sbc	r27, r26
     e10:	ee 1f       	adc	r30, r30
     e12:	88 f7       	brcc	.-30     	; 0xdf6 <__divsf3_pse+0x94>
     e14:	e0 95       	com	r30
     e16:	08 95       	ret

00000e18 <__floatunsisf>:
     e18:	e8 94       	clt
     e1a:	09 c0       	rjmp	.+18     	; 0xe2e <__floatsisf+0x12>

00000e1c <__floatsisf>:
     e1c:	97 fb       	bst	r25, 7
     e1e:	3e f4       	brtc	.+14     	; 0xe2e <__floatsisf+0x12>
     e20:	90 95       	com	r25
     e22:	80 95       	com	r24
     e24:	70 95       	com	r23
     e26:	61 95       	neg	r22
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	8f 4f       	sbci	r24, 0xFF	; 255
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	99 23       	and	r25, r25
     e30:	a9 f0       	breq	.+42     	; 0xe5c <__floatsisf+0x40>
     e32:	f9 2f       	mov	r31, r25
     e34:	96 e9       	ldi	r25, 0x96	; 150
     e36:	bb 27       	eor	r27, r27
     e38:	93 95       	inc	r25
     e3a:	f6 95       	lsr	r31
     e3c:	87 95       	ror	r24
     e3e:	77 95       	ror	r23
     e40:	67 95       	ror	r22
     e42:	b7 95       	ror	r27
     e44:	f1 11       	cpse	r31, r1
     e46:	f8 cf       	rjmp	.-16     	; 0xe38 <__floatsisf+0x1c>
     e48:	fa f4       	brpl	.+62     	; 0xe88 <__floatsisf+0x6c>
     e4a:	bb 0f       	add	r27, r27
     e4c:	11 f4       	brne	.+4      	; 0xe52 <__floatsisf+0x36>
     e4e:	60 ff       	sbrs	r22, 0
     e50:	1b c0       	rjmp	.+54     	; 0xe88 <__floatsisf+0x6c>
     e52:	6f 5f       	subi	r22, 0xFF	; 255
     e54:	7f 4f       	sbci	r23, 0xFF	; 255
     e56:	8f 4f       	sbci	r24, 0xFF	; 255
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	16 c0       	rjmp	.+44     	; 0xe88 <__floatsisf+0x6c>
     e5c:	88 23       	and	r24, r24
     e5e:	11 f0       	breq	.+4      	; 0xe64 <__floatsisf+0x48>
     e60:	96 e9       	ldi	r25, 0x96	; 150
     e62:	11 c0       	rjmp	.+34     	; 0xe86 <__floatsisf+0x6a>
     e64:	77 23       	and	r23, r23
     e66:	21 f0       	breq	.+8      	; 0xe70 <__floatsisf+0x54>
     e68:	9e e8       	ldi	r25, 0x8E	; 142
     e6a:	87 2f       	mov	r24, r23
     e6c:	76 2f       	mov	r23, r22
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <__floatsisf+0x5e>
     e70:	66 23       	and	r22, r22
     e72:	71 f0       	breq	.+28     	; 0xe90 <__floatsisf+0x74>
     e74:	96 e8       	ldi	r25, 0x86	; 134
     e76:	86 2f       	mov	r24, r22
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	2a f0       	brmi	.+10     	; 0xe88 <__floatsisf+0x6c>
     e7e:	9a 95       	dec	r25
     e80:	66 0f       	add	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	88 1f       	adc	r24, r24
     e86:	da f7       	brpl	.-10     	; 0xe7e <__floatsisf+0x62>
     e88:	88 0f       	add	r24, r24
     e8a:	96 95       	lsr	r25
     e8c:	87 95       	ror	r24
     e8e:	97 f9       	bld	r25, 7
     e90:	08 95       	ret

00000e92 <__fp_inf>:
     e92:	97 f9       	bld	r25, 7
     e94:	9f 67       	ori	r25, 0x7F	; 127
     e96:	80 e8       	ldi	r24, 0x80	; 128
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	08 95       	ret

00000e9e <__fp_nan>:
     e9e:	9f ef       	ldi	r25, 0xFF	; 255
     ea0:	80 ec       	ldi	r24, 0xC0	; 192
     ea2:	08 95       	ret

00000ea4 <__fp_pscA>:
     ea4:	00 24       	eor	r0, r0
     ea6:	0a 94       	dec	r0
     ea8:	16 16       	cp	r1, r22
     eaa:	17 06       	cpc	r1, r23
     eac:	18 06       	cpc	r1, r24
     eae:	09 06       	cpc	r0, r25
     eb0:	08 95       	ret

00000eb2 <__fp_pscB>:
     eb2:	00 24       	eor	r0, r0
     eb4:	0a 94       	dec	r0
     eb6:	12 16       	cp	r1, r18
     eb8:	13 06       	cpc	r1, r19
     eba:	14 06       	cpc	r1, r20
     ebc:	05 06       	cpc	r0, r21
     ebe:	08 95       	ret

00000ec0 <__fp_round>:
     ec0:	09 2e       	mov	r0, r25
     ec2:	03 94       	inc	r0
     ec4:	00 0c       	add	r0, r0
     ec6:	11 f4       	brne	.+4      	; 0xecc <__fp_round+0xc>
     ec8:	88 23       	and	r24, r24
     eca:	52 f0       	brmi	.+20     	; 0xee0 <__fp_round+0x20>
     ecc:	bb 0f       	add	r27, r27
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fp_round+0x20>
     ed0:	bf 2b       	or	r27, r31
     ed2:	11 f4       	brne	.+4      	; 0xed8 <__fp_round+0x18>
     ed4:	60 ff       	sbrs	r22, 0
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <__fp_round+0x20>
     ed8:	6f 5f       	subi	r22, 0xFF	; 255
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	8f 4f       	sbci	r24, 0xFF	; 255
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	08 95       	ret

00000ee2 <__fp_split3>:
     ee2:	57 fd       	sbrc	r21, 7
     ee4:	90 58       	subi	r25, 0x80	; 128
     ee6:	44 0f       	add	r20, r20
     ee8:	55 1f       	adc	r21, r21
     eea:	59 f0       	breq	.+22     	; 0xf02 <__fp_splitA+0x10>
     eec:	5f 3f       	cpi	r21, 0xFF	; 255
     eee:	71 f0       	breq	.+28     	; 0xf0c <__fp_splitA+0x1a>
     ef0:	47 95       	ror	r20

00000ef2 <__fp_splitA>:
     ef2:	88 0f       	add	r24, r24
     ef4:	97 fb       	bst	r25, 7
     ef6:	99 1f       	adc	r25, r25
     ef8:	61 f0       	breq	.+24     	; 0xf12 <__fp_splitA+0x20>
     efa:	9f 3f       	cpi	r25, 0xFF	; 255
     efc:	79 f0       	breq	.+30     	; 0xf1c <__fp_splitA+0x2a>
     efe:	87 95       	ror	r24
     f00:	08 95       	ret
     f02:	12 16       	cp	r1, r18
     f04:	13 06       	cpc	r1, r19
     f06:	14 06       	cpc	r1, r20
     f08:	55 1f       	adc	r21, r21
     f0a:	f2 cf       	rjmp	.-28     	; 0xef0 <__fp_split3+0xe>
     f0c:	46 95       	lsr	r20
     f0e:	f1 df       	rcall	.-30     	; 0xef2 <__fp_splitA>
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <__fp_splitA+0x30>
     f12:	16 16       	cp	r1, r22
     f14:	17 06       	cpc	r1, r23
     f16:	18 06       	cpc	r1, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	f1 cf       	rjmp	.-30     	; 0xefe <__fp_splitA+0xc>
     f1c:	86 95       	lsr	r24
     f1e:	71 05       	cpc	r23, r1
     f20:	61 05       	cpc	r22, r1
     f22:	08 94       	sec
     f24:	08 95       	ret

00000f26 <__fp_zero>:
     f26:	e8 94       	clt

00000f28 <__fp_szero>:
     f28:	bb 27       	eor	r27, r27
     f2a:	66 27       	eor	r22, r22
     f2c:	77 27       	eor	r23, r23
     f2e:	cb 01       	movw	r24, r22
     f30:	97 f9       	bld	r25, 7
     f32:	08 95       	ret

00000f34 <__mulsf3>:
     f34:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__mulsf3x>
     f38:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__fp_round>
     f3c:	0e 94 52 07 	call	0xea4	; 0xea4 <__fp_pscA>
     f40:	38 f0       	brcs	.+14     	; 0xf50 <__mulsf3+0x1c>
     f42:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__fp_pscB>
     f46:	20 f0       	brcs	.+8      	; 0xf50 <__mulsf3+0x1c>
     f48:	95 23       	and	r25, r21
     f4a:	11 f0       	breq	.+4      	; 0xf50 <__mulsf3+0x1c>
     f4c:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_inf>
     f50:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__fp_nan>
     f54:	11 24       	eor	r1, r1
     f56:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__fp_szero>

00000f5a <__mulsf3x>:
     f5a:	0e 94 71 07 	call	0xee2	; 0xee2 <__fp_split3>
     f5e:	70 f3       	brcs	.-36     	; 0xf3c <__mulsf3+0x8>

00000f60 <__mulsf3_pse>:
     f60:	95 9f       	mul	r25, r21
     f62:	c1 f3       	breq	.-16     	; 0xf54 <__mulsf3+0x20>
     f64:	95 0f       	add	r25, r21
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	55 1f       	adc	r21, r21
     f6a:	62 9f       	mul	r22, r18
     f6c:	f0 01       	movw	r30, r0
     f6e:	72 9f       	mul	r23, r18
     f70:	bb 27       	eor	r27, r27
     f72:	f0 0d       	add	r31, r0
     f74:	b1 1d       	adc	r27, r1
     f76:	63 9f       	mul	r22, r19
     f78:	aa 27       	eor	r26, r26
     f7a:	f0 0d       	add	r31, r0
     f7c:	b1 1d       	adc	r27, r1
     f7e:	aa 1f       	adc	r26, r26
     f80:	64 9f       	mul	r22, r20
     f82:	66 27       	eor	r22, r22
     f84:	b0 0d       	add	r27, r0
     f86:	a1 1d       	adc	r26, r1
     f88:	66 1f       	adc	r22, r22
     f8a:	82 9f       	mul	r24, r18
     f8c:	22 27       	eor	r18, r18
     f8e:	b0 0d       	add	r27, r0
     f90:	a1 1d       	adc	r26, r1
     f92:	62 1f       	adc	r22, r18
     f94:	73 9f       	mul	r23, r19
     f96:	b0 0d       	add	r27, r0
     f98:	a1 1d       	adc	r26, r1
     f9a:	62 1f       	adc	r22, r18
     f9c:	83 9f       	mul	r24, r19
     f9e:	a0 0d       	add	r26, r0
     fa0:	61 1d       	adc	r22, r1
     fa2:	22 1f       	adc	r18, r18
     fa4:	74 9f       	mul	r23, r20
     fa6:	33 27       	eor	r19, r19
     fa8:	a0 0d       	add	r26, r0
     faa:	61 1d       	adc	r22, r1
     fac:	23 1f       	adc	r18, r19
     fae:	84 9f       	mul	r24, r20
     fb0:	60 0d       	add	r22, r0
     fb2:	21 1d       	adc	r18, r1
     fb4:	82 2f       	mov	r24, r18
     fb6:	76 2f       	mov	r23, r22
     fb8:	6a 2f       	mov	r22, r26
     fba:	11 24       	eor	r1, r1
     fbc:	9f 57       	subi	r25, 0x7F	; 127
     fbe:	50 40       	sbci	r21, 0x00	; 0
     fc0:	9a f0       	brmi	.+38     	; 0xfe8 <__mulsf3_pse+0x88>
     fc2:	f1 f0       	breq	.+60     	; 0x1000 <__EEPROM_REGION_LENGTH__>
     fc4:	88 23       	and	r24, r24
     fc6:	4a f0       	brmi	.+18     	; 0xfda <__mulsf3_pse+0x7a>
     fc8:	ee 0f       	add	r30, r30
     fca:	ff 1f       	adc	r31, r31
     fcc:	bb 1f       	adc	r27, r27
     fce:	66 1f       	adc	r22, r22
     fd0:	77 1f       	adc	r23, r23
     fd2:	88 1f       	adc	r24, r24
     fd4:	91 50       	subi	r25, 0x01	; 1
     fd6:	50 40       	sbci	r21, 0x00	; 0
     fd8:	a9 f7       	brne	.-22     	; 0xfc4 <__mulsf3_pse+0x64>
     fda:	9e 3f       	cpi	r25, 0xFE	; 254
     fdc:	51 05       	cpc	r21, r1
     fde:	80 f0       	brcs	.+32     	; 0x1000 <__EEPROM_REGION_LENGTH__>
     fe0:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_inf>
     fe4:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__fp_szero>
     fe8:	5f 3f       	cpi	r21, 0xFF	; 255
     fea:	e4 f3       	brlt	.-8      	; 0xfe4 <__mulsf3_pse+0x84>
     fec:	98 3e       	cpi	r25, 0xE8	; 232
     fee:	d4 f3       	brlt	.-12     	; 0xfe4 <__mulsf3_pse+0x84>
     ff0:	86 95       	lsr	r24
     ff2:	77 95       	ror	r23
     ff4:	67 95       	ror	r22
     ff6:	b7 95       	ror	r27
     ff8:	f7 95       	ror	r31
     ffa:	e7 95       	ror	r30
     ffc:	9f 5f       	subi	r25, 0xFF	; 255
     ffe:	c1 f7       	brne	.-16     	; 0xff0 <__mulsf3_pse+0x90>
    1000:	fe 2b       	or	r31, r30
    1002:	88 0f       	add	r24, r24
    1004:	91 1d       	adc	r25, r1
    1006:	96 95       	lsr	r25
    1008:	87 95       	ror	r24
    100a:	97 f9       	bld	r25, 7
    100c:	08 95       	ret

0000100e <__tablejump2__>:
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	88 1f       	adc	r24, r24
    1014:	8b bf       	out	0x3b, r24	; 59
    1016:	07 90       	elpm	r0, Z+
    1018:	f6 91       	elpm	r31, Z
    101a:	e0 2d       	mov	r30, r0
    101c:	19 94       	eijmp

0000101e <_exit>:
    101e:	f8 94       	cli

00001020 <__stop_program>:
    1020:	ff cf       	rjmp	.-2      	; 0x1020 <__stop_program>
