
Debug_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cf4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000d68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000280c  00802000  00802000  00000d68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006f6d  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a44  00000000  00000000  00007efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001530  00000000  00000000  0000b941  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  0000ce74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000036ce  00000000  00000000  0000d3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001532  00000000  00000000  00010a82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00011fb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__vector_47>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__vector_64>
 104:	0c 94 a0 04 	jmp	0x940	; 0x940 <__vector_65>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_119>
 1e0:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__vector_120>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e4 ef       	ldi	r30, 0xF4	; 244
 214:	fc e0       	ldi	r31, 0x0C	; 12
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	28 e4       	ldi	r18, 0x48	; 72
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ac 30       	cpi	r26, 0x0C	; 12
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 aa 04 	call	0x954	; 0x954 <main>
 23a:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <read_UART>:
		bit_test = 0;																//Reset just to be safe
		hbyte = 0;
		lbyte = 0;
	}
	
}
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	04 c0       	rjmp	.+8      	; 0x250 <read_UART+0xe>
 248:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
 24c:	20 78       	andi	r18, 0x80	; 128
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	21 15       	cp	r18, r1
 252:	31 05       	cpc	r19, r1
 254:	c9 f3       	breq	.-14     	; 0x248 <read_UART+0x6>
 256:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
 25a:	06 c0       	rjmp	.+12     	; 0x268 <read_UART+0x26>
 25c:	e0 ea       	ldi	r30, 0xA0	; 160
 25e:	fa e0       	ldi	r31, 0x0A	; 10
 260:	21 81       	ldd	r18, Z+1	; 0x01
 262:	20 78       	andi	r18, 0x80	; 128
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	90 81       	ld	r25, Z
 268:	23 2b       	or	r18, r19
 26a:	c1 f7       	brne	.-16     	; 0x25c <read_UART+0x1a>
 26c:	08 95       	ret

0000026e <write8_UART>:
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	04 c0       	rjmp	.+8      	; 0x27c <write8_UART+0xe>
 274:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
 278:	20 72       	andi	r18, 0x20	; 32
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	23 2b       	or	r18, r19
 27e:	d1 f3       	breq	.-12     	; 0x274 <write8_UART+0x6>
 280:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	04 c0       	rjmp	.+8      	; 0x292 <write8_UART+0x24>
 28a:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
 28e:	80 72       	andi	r24, 0x20	; 32
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	89 2b       	or	r24, r25
 294:	d1 f3       	breq	.-12     	; 0x28a <write8_UART+0x1c>
 296:	08 95       	ret

00000298 <start_DELAY>:
 298:	e0 e4       	ldi	r30, 0x40	; 64
 29a:	f9 e0       	ldi	r31, 0x09	; 9
 29c:	10 a2       	std	Z+32, r1	; 0x20
 29e:	11 a2       	std	Z+33, r1	; 0x21
 2a0:	85 e0       	ldi	r24, 0x05	; 5
 2a2:	80 83       	st	Z, r24
 2a4:	08 95       	ret

000002a6 <stop_DELAY>:
 2a6:	e0 e4       	ldi	r30, 0x40	; 64
 2a8:	f9 e0       	ldi	r31, 0x09	; 9
 2aa:	10 82       	st	Z, r1
 2ac:	10 a2       	std	Z+32, r1	; 0x20
 2ae:	11 a2       	std	Z+33, r1	; 0x21
 2b0:	08 95       	ret

000002b2 <fread_D0>:
 2b2:	cf 92       	push	r12
 2b4:	df 92       	push	r13
 2b6:	ef 92       	push	r14
 2b8:	ff 92       	push	r15
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	e0 97       	sbiw	r28, 0x30	; 48
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__TEXT_REGION_LENGTH__+0x7be204>
 2d2:	e0 e4       	ldi	r30, 0x40	; 64
 2d4:	f2 e0       	ldi	r31, 0x02	; 2
 2d6:	84 83       	std	Z+4, r24	; 0x04
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	90 83       	st	Z, r25
 2dc:	98 e2       	ldi	r25, 0x28	; 40
 2de:	91 a3       	std	Z+33, r25	; 0x21
 2e0:	80 83       	st	Z, r24
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	ba 01       	movw	r22, r20
 2e8:	1b c0       	rjmp	.+54     	; 0x320 <fread_D0+0x6e>
 2ea:	e0 e4       	ldi	r30, 0x40	; 64
 2ec:	f2 e0       	ldi	r31, 0x02	; 2
 2ee:	80 81       	ld	r24, Z
 2f0:	8c 61       	ori	r24, 0x1C	; 28
 2f2:	80 83       	st	Z, r24
 2f4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
 2f8:	80 ff       	sbrs	r24, 0
 2fa:	fc cf       	rjmp	.-8      	; 0x2f4 <fread_D0+0x42>
 2fc:	e0 e4       	ldi	r30, 0x40	; 64
 2fe:	f2 e0       	ldi	r31, 0x02	; 2
 300:	84 a1       	ldd	r24, Z+36	; 0x24
 302:	95 a1       	ldd	r25, Z+37	; 0x25
 304:	da 01       	movw	r26, r20
 306:	aa 0f       	add	r26, r26
 308:	bb 1f       	adc	r27, r27
 30a:	af 51       	subi	r26, 0x1F	; 31
 30c:	bf 4d       	sbci	r27, 0xDF	; 223
 30e:	8d 93       	st	X+, r24
 310:	9c 93       	st	X, r25
 312:	86 81       	ldd	r24, Z+6	; 0x06
 314:	8f 60       	ori	r24, 0x0F	; 15
 316:	86 83       	std	Z+6, r24	; 0x06
 318:	4f 5f       	subi	r20, 0xFF	; 255
 31a:	5f 4f       	sbci	r21, 0xFF	; 255
 31c:	6f 4f       	sbci	r22, 0xFF	; 255
 31e:	7f 4f       	sbci	r23, 0xFF	; 255
 320:	48 38       	cpi	r20, 0x88	; 136
 322:	23 e1       	ldi	r18, 0x13	; 19
 324:	52 07       	cpc	r21, r18
 326:	61 05       	cpc	r22, r1
 328:	71 05       	cpc	r23, r1
 32a:	f8 f2       	brcs	.-66     	; 0x2ea <fread_D0+0x38>
 32c:	c1 2c       	mov	r12, r1
 32e:	d1 2c       	mov	r13, r1
 330:	76 01       	movw	r14, r12
 332:	12 c0       	rjmp	.+36     	; 0x358 <fread_D0+0xa6>
 334:	86 01       	movw	r16, r12
 336:	00 0f       	add	r16, r16
 338:	11 1f       	adc	r17, r17
 33a:	0f 51       	subi	r16, 0x1F	; 31
 33c:	1f 4d       	sbci	r17, 0xDF	; 223
 33e:	d8 01       	movw	r26, r16
 340:	8c 91       	ld	r24, X
 342:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 346:	f8 01       	movw	r30, r16
 348:	81 81       	ldd	r24, Z+1	; 0x01
 34a:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 34e:	ff ef       	ldi	r31, 0xFF	; 255
 350:	cf 1a       	sub	r12, r31
 352:	df 0a       	sbc	r13, r31
 354:	ef 0a       	sbc	r14, r31
 356:	ff 0a       	sbc	r15, r31
 358:	28 e8       	ldi	r18, 0x88	; 136
 35a:	c2 16       	cp	r12, r18
 35c:	23 e1       	ldi	r18, 0x13	; 19
 35e:	d2 06       	cpc	r13, r18
 360:	e1 04       	cpc	r14, r1
 362:	f1 04       	cpc	r15, r1
 364:	38 f3       	brcs	.-50     	; 0x334 <fread_D0+0x82>
 366:	a0 e0       	ldi	r26, 0x00	; 0
 368:	b2 e0       	ldi	r27, 0x02	; 2
 36a:	83 e0       	ldi	r24, 0x03	; 3
 36c:	14 96       	adiw	r26, 0x04	; 4
 36e:	8c 93       	st	X, r24
 370:	14 97       	sbiw	r26, 0x04	; 4
 372:	e0 e4       	ldi	r30, 0x40	; 64
 374:	f2 e0       	ldi	r31, 0x02	; 2
 376:	84 83       	std	Z+4, r24	; 0x04
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	8c 93       	st	X, r24
 37c:	80 83       	st	Z, r24
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	dc 01       	movw	r26, r24
 386:	51 e0       	ldi	r21, 0x01	; 1
 388:	2d c0       	rjmp	.+90     	; 0x3e4 <fread_D0+0x132>
 38a:	fc 01       	movw	r30, r24
 38c:	ee 0f       	add	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	ef 51       	subi	r30, 0x1F	; 31
 392:	ff 4d       	sbci	r31, 0xDF	; 223
 394:	20 81       	ld	r18, Z
 396:	31 81       	ldd	r19, Z+1	; 0x01
 398:	29 3e       	cpi	r18, 0xE9	; 233
 39a:	63 e0       	ldi	r22, 0x03	; 3
 39c:	36 07       	cpc	r19, r22
 39e:	c0 f0       	brcs	.+48     	; 0x3d0 <fread_D0+0x11e>
 3a0:	55 31       	cpi	r21, 0x15	; 21
 3a2:	b0 f0       	brcs	.+44     	; 0x3d0 <fread_D0+0x11e>
 3a4:	e4 2f       	mov	r30, r20
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	ee 0f       	add	r30, r30
 3aa:	ff 1f       	adc	r31, r31
 3ac:	ee 0f       	add	r30, r30
 3ae:	ff 1f       	adc	r31, r31
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	2c 0f       	add	r18, r28
 3b6:	3d 1f       	adc	r19, r29
 3b8:	e2 0f       	add	r30, r18
 3ba:	f3 1f       	adc	r31, r19
 3bc:	80 83       	st	Z, r24
 3be:	91 83       	std	Z+1, r25	; 0x01
 3c0:	a2 83       	std	Z+2, r26	; 0x02
 3c2:	b3 83       	std	Z+3, r27	; 0x03
 3c4:	20 e1       	ldi	r18, 0x10	; 16
 3c6:	20 93 85 06 	sts	0x0685, r18	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
 3ca:	4f 5f       	subi	r20, 0xFF	; 255
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	07 c0       	rjmp	.+14     	; 0x3de <fread_D0+0x12c>
 3d0:	28 3e       	cpi	r18, 0xE8	; 232
 3d2:	33 40       	sbci	r19, 0x03	; 3
 3d4:	20 f4       	brcc	.+8      	; 0x3de <fread_D0+0x12c>
 3d6:	5f 5f       	subi	r21, 0xFF	; 255
 3d8:	20 e1       	ldi	r18, 0x10	; 16
 3da:	20 93 86 06 	sts	0x0686, r18	; 0x800686 <__TEXT_REGION_LENGTH__+0x7be686>
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	a1 1d       	adc	r26, r1
 3e2:	b1 1d       	adc	r27, r1
 3e4:	88 38       	cpi	r24, 0x88	; 136
 3e6:	e3 e1       	ldi	r30, 0x13	; 19
 3e8:	9e 07       	cpc	r25, r30
 3ea:	a1 05       	cpc	r26, r1
 3ec:	b1 05       	cpc	r27, r1
 3ee:	10 f4       	brcc	.+4      	; 0x3f4 <fread_D0+0x142>
 3f0:	4b 30       	cpi	r20, 0x0B	; 11
 3f2:	58 f2       	brcs	.-106    	; 0x38a <fread_D0+0xd8>
 3f4:	4b 30       	cpi	r20, 0x0B	; 11
 3f6:	09 f0       	breq	.+2      	; 0x3fa <fread_D0+0x148>
 3f8:	52 c0       	rjmp	.+164    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 3fa:	29 c0       	rjmp	.+82     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 3fc:	fc 01       	movw	r30, r24
 3fe:	32 96       	adiw	r30, 0x02	; 2
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	4c 0f       	add	r20, r28
 40e:	5d 1f       	adc	r21, r29
 410:	e4 0f       	add	r30, r20
 412:	f5 1f       	adc	r31, r21
 414:	40 81       	ld	r20, Z
 416:	51 81       	ldd	r21, Z+1	; 0x01
 418:	62 81       	ldd	r22, Z+2	; 0x02
 41a:	73 81       	ldd	r23, Z+3	; 0x03
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	fc 01       	movw	r30, r24
 420:	ee 0f       	add	r30, r30
 422:	ff 1f       	adc	r31, r31
 424:	ee 0f       	add	r30, r30
 426:	ff 1f       	adc	r31, r31
 428:	a1 e0       	ldi	r26, 0x01	; 1
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	ac 0f       	add	r26, r28
 42e:	bd 1f       	adc	r27, r29
 430:	ea 0f       	add	r30, r26
 432:	fb 1f       	adc	r31, r27
 434:	c0 80       	ld	r12, Z
 436:	d1 80       	ldd	r13, Z+1	; 0x01
 438:	e2 80       	ldd	r14, Z+2	; 0x02
 43a:	f3 80       	ldd	r15, Z+3	; 0x03
 43c:	4c 19       	sub	r20, r12
 43e:	5d 09       	sbc	r21, r13
 440:	6e 09       	sbc	r22, r14
 442:	7f 09       	sbc	r23, r15
 444:	04 0f       	add	r16, r20
 446:	15 1f       	adc	r17, r21
 448:	26 1f       	adc	r18, r22
 44a:	37 1f       	adc	r19, r23
 44c:	05 c0       	rjmp	.+10     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	00 e0       	ldi	r16, 0x00	; 0
 454:	10 e0       	ldi	r17, 0x00	; 0
 456:	98 01       	movw	r18, r16
 458:	89 30       	cpi	r24, 0x09	; 9
 45a:	91 05       	cpc	r25, r1
 45c:	7c f2       	brlt	.-98     	; 0x3fc <fread_D0+0x14a>
 45e:	c9 01       	movw	r24, r18
 460:	b8 01       	movw	r22, r16
 462:	0e 94 6e 05 	call	0xadc	; 0xadc <__floatunsisf>
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	5e e3       	ldi	r21, 0x3E	; 62
 46e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__mulsf3>
 472:	26 2f       	mov	r18, r22
 474:	46 2f       	mov	r20, r22
 476:	57 2f       	mov	r21, r23
 478:	68 2f       	mov	r22, r24
 47a:	79 2f       	mov	r23, r25
 47c:	4d a7       	std	Y+45, r20	; 0x2d
 47e:	5e a7       	std	Y+46, r21	; 0x2e
 480:	6f a7       	std	Y+47, r22	; 0x2f
 482:	78 ab       	std	Y+48, r23	; 0x30
 484:	82 2f       	mov	r24, r18
 486:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 48a:	8e a5       	ldd	r24, Y+46	; 0x2e
 48c:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 490:	8f a5       	ldd	r24, Y+47	; 0x2f
 492:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 496:	88 a9       	ldd	r24, Y+48	; 0x30
 498:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 49c:	0c c0       	rjmp	.+24     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 4a4:	8f ef       	ldi	r24, 0xFF	; 255
 4a6:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 4b0:	8f ef       	ldi	r24, 0xFF	; 255
 4b2:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
 4b6:	e0 96       	adiw	r28, 0x30	; 48
 4b8:	cd bf       	out	0x3d, r28	; 61
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	ff 90       	pop	r15
 4c6:	ef 90       	pop	r14
 4c8:	df 90       	pop	r13
 4ca:	cf 90       	pop	r12
 4cc:	08 95       	ret

000004ce <TIMEOUT>:
	return average_I;
}

void TIMEOUT(void)
{
	start_DELAY();
 4ce:	0e 94 4c 01 	call	0x298	; 0x298 <start_DELAY>
	while(TCD1.CNT<50000)															//Do nothing for 0.1sec
 4d2:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <__TEXT_REGION_LENGTH__+0x7be960>
 4d6:	90 91 61 09 	lds	r25, 0x0961	; 0x800961 <__TEXT_REGION_LENGTH__+0x7be961>
 4da:	80 35       	cpi	r24, 0x50	; 80
 4dc:	93 4c       	sbci	r25, 0xC3	; 195
 4de:	c8 f3       	brcs	.-14     	; 0x4d2 <TIMEOUT+0x4>
	{
		//Do nothing
	}
	stop_DELAY();
 4e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <stop_DELAY>
 4e4:	08 95       	ret

000004e6 <read_IT>:
		write8_UART((0xFF));
	}	
}

void read_IT(void)
{
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
	
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCA clock speed to 62.5kHz
 4ea:	e0 e0       	ldi	r30, 0x00	; 0
 4ec:	f2 e0       	ldi	r31, 0x02	; 2
 4ee:	83 e0       	ldi	r24, 0x03	; 3
 4f0:	84 83       	std	Z+4, r24	; 0x04
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCB clock speed to 62.5kHz
 4f2:	a0 e4       	ldi	r26, 0x40	; 64
 4f4:	b2 e0       	ldi	r27, 0x02	; 2
 4f6:	14 96       	adiw	r26, 0x04	; 4
 4f8:	8c 93       	st	X, r24
 4fa:	14 97       	sbiw	r26, 0x04	; 4
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;										//Set ADCA CH0 to Pin A4 as input for I_external
 4fc:	80 e2       	ldi	r24, 0x20	; 32
 4fe:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;										//Set ADCA CH1 to Pin A5 as input for I_battery
 500:	88 e2       	ldi	r24, 0x28	; 40
 502:	81 a7       	std	Z+41, r24	; 0x29
	
	//ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;										//Set ADCB CH0 to Pin B5 as input for Temp_ambient

	ADCA.CTRLA |= ADC_FLUSH_bm;														//Enables ADCA
 504:	80 81       	ld	r24, Z
 506:	82 60       	ori	r24, 0x02	; 2
 508:	80 83       	st	Z, r24
	ADCB.CTRLA |= ADC_FLUSH_bm;														//Enables ADCB
 50a:	8c 91       	ld	r24, X
 50c:	82 60       	ori	r24, 0x02	; 2
 50e:	8c 93       	st	X, r24
	
	ADCA.CTRLA |= ADC_ENABLE_bm;													//Enables ADCA
 510:	80 81       	ld	r24, Z
 512:	81 60       	ori	r24, 0x01	; 1
 514:	80 83       	st	Z, r24
	ADCB.CTRLA |= ADC_ENABLE_bm;													//Enables ADCB
 516:	8c 91       	ld	r24, X
 518:	81 60       	ori	r24, 0x01	; 1
 51a:	8c 93       	st	X, r24
	
	//TIMEOUT();
	
	
	ADCA.CTRLA |= (0x03 << 2);														//Start ADCA Conversion first two channels
 51c:	80 81       	ld	r24, Z
 51e:	8c 60       	ori	r24, 0x0C	; 12
 520:	80 83       	st	Z, r24
	ADCB.CTRLA |= (0x01 << 2);														//Start ADCB conversion CH0
 522:	8c 91       	ld	r24, X
 524:	84 60       	ori	r24, 0x04	; 4
 526:	8c 93       	st	X, r24
	
	while( !((ADCA.INTFLAGS & 0x3) & (ADCB.INTFLAGS & 0x01)))                       //Wait for ADC conversion
 528:	02 c0       	rjmp	.+4      	; 0x52e <read_IT+0x48>
	
	TIMEOUT();
 52a:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
	
	
	ADCA.CTRLA |= (0x03 << 2);														//Start ADCA Conversion first two channels
	ADCB.CTRLA |= (0x01 << 2);														//Start ADCB conversion CH0
	
	while( !((ADCA.INTFLAGS & 0x3) & (ADCB.INTFLAGS & 0x01)))                       //Wait for ADC conversion
 52e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7be206>
 532:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
 536:	81 70       	andi	r24, 0x01	; 1
 538:	89 23       	and	r24, r25
 53a:	b9 f3       	breq	.-18     	; 0x52a <read_IT+0x44>
	
	TIMEOUT();
	
	IT[0] = (int16_t)ADCA.CH0.RES;													//Read I_external
 53c:	e0 e0       	ldi	r30, 0x00	; 0
 53e:	f2 e0       	ldi	r31, 0x02	; 2
 540:	84 a1       	ldd	r24, Z+36	; 0x24
 542:	95 a1       	ldd	r25, Z+37	; 0x25
 544:	c6 e0       	ldi	r28, 0x06	; 6
 546:	d8 e4       	ldi	r29, 0x48	; 72
 548:	88 83       	st	Y, r24
 54a:	99 83       	std	Y+1, r25	; 0x01
	IT[1] = (int16_t)ADCA.CH1.RES;													//Read I_battery
 54c:	84 a5       	ldd	r24, Z+44	; 0x2c
 54e:	95 a5       	ldd	r25, Z+45	; 0x2d
 550:	8a 83       	std	Y+2, r24	; 0x02
 552:	9b 83       	std	Y+3, r25	; 0x03
	
	IT[2] = (int16_t)ADCB.CH0.RES;													//Read Temp_ambient
 554:	a0 e4       	ldi	r26, 0x40	; 64
 556:	b2 e0       	ldi	r27, 0x02	; 2
 558:	94 96       	adiw	r26, 0x24	; 36
 55a:	8d 91       	ld	r24, X+
 55c:	9c 91       	ld	r25, X
 55e:	95 97       	sbiw	r26, 0x25	; 37
 560:	8c 83       	std	Y+4, r24	; 0x04
 562:	9d 83       	std	Y+5, r25	; 0x05
	
	ADCA.INTFLAGS |= (0x03);														//clear interrupt flags ADCA
 564:	86 81       	ldd	r24, Z+6	; 0x06
 566:	83 60       	ori	r24, 0x03	; 3
 568:	86 83       	std	Z+6, r24	; 0x06
	ADCB.INTFLAGS |= (0x01);														//clear interrupt flags ADCB
 56a:	16 96       	adiw	r26, 0x06	; 6
 56c:	8c 91       	ld	r24, X
 56e:	16 97       	sbiw	r26, 0x06	; 6
 570:	81 60       	ori	r24, 0x01	; 1
 572:	16 96       	adiw	r26, 0x06	; 6
 574:	8c 93       	st	X, r24
}
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <read_supply_ext>:
	dac_data = (dac_output*4095)/DAC_VREF;											//calculate dac_channel_data for desired DAC output voltage
	return dac_data;
}

uint16_t read_supply_ext(void)
{
 57c:	0f 93       	push	r16
 57e:	1f 93       	push	r17
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	cd b7       	in	r28, 0x3d	; 61
 586:	de b7       	in	r29, 0x3e	; 62
 588:	64 97       	sbiw	r28, 0x14	; 20
 58a:	cd bf       	out	0x3d, r28	; 61
 58c:	de bf       	out	0x3e, r29	; 62
	uint16_t current[10];
	uint16_t average_I;
	uint16_t sum = 0;																//Big enough sum of 10 12bit uints;
	
//	supply_ext();	
	PORTB_OUTSET = PIN2_bm;															//supply bat
 58e:	84 e0       	ldi	r24, 0x04	; 4
 590:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
	TIMEOUT();
 594:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
	PORTB_OUTCLR = PIN3_bm;															//disable ext
 598:	88 e0       	ldi	r24, 0x08	; 8
 59a:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
	TIMEOUT();
 59e:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
 5a2:	00 e0       	ldi	r16, 0x00	; 0
 5a4:	10 e0       	ldi	r17, 0x00	; 0
 5a6:	15 c0       	rjmp	.+42     	; 0x5d2 <read_supply_ext+0x56>
	{
		read_IT();
 5a8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <read_IT>
		current[i] = IT[0];
 5ac:	80 91 06 48 	lds	r24, 0x4806	; 0x804806 <IT>
 5b0:	90 91 07 48 	lds	r25, 0x4807	; 0x804807 <IT+0x1>
 5b4:	f8 01       	movw	r30, r16
 5b6:	ee 0f       	add	r30, r30
 5b8:	ff 1f       	adc	r31, r31
 5ba:	21 e0       	ldi	r18, 0x01	; 1
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	2c 0f       	add	r18, r28
 5c0:	3d 1f       	adc	r19, r29
 5c2:	e2 0f       	add	r30, r18
 5c4:	f3 1f       	adc	r31, r19
 5c6:	80 83       	st	Z, r24
 5c8:	91 83       	std	Z+1, r25	; 0x01
		TIMEOUT();
 5ca:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
	PORTB_OUTSET = PIN2_bm;															//supply bat
	TIMEOUT();
	PORTB_OUTCLR = PIN3_bm;															//disable ext
	TIMEOUT();
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
 5ce:	0f 5f       	subi	r16, 0xFF	; 255
 5d0:	1f 4f       	sbci	r17, 0xFF	; 255
 5d2:	0a 30       	cpi	r16, 0x0A	; 10
 5d4:	11 05       	cpc	r17, r1
 5d6:	44 f3       	brlt	.-48     	; 0x5a8 <read_supply_ext+0x2c>
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	20 e0       	ldi	r18, 0x00	; 0
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	0e c0       	rjmp	.+28     	; 0x5fe <read_supply_ext+0x82>
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
	{
		sum += current[i];
 5e2:	fc 01       	movw	r30, r24
 5e4:	ee 0f       	add	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	41 e0       	ldi	r20, 0x01	; 1
 5ea:	50 e0       	ldi	r21, 0x00	; 0
 5ec:	4c 0f       	add	r20, r28
 5ee:	5d 1f       	adc	r21, r29
 5f0:	e4 0f       	add	r30, r20
 5f2:	f5 1f       	adc	r31, r21
 5f4:	40 81       	ld	r20, Z
 5f6:	51 81       	ldd	r21, Z+1	; 0x01
 5f8:	24 0f       	add	r18, r20
 5fa:	35 1f       	adc	r19, r21
		read_IT();
		current[i] = IT[0];
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
 5fc:	01 96       	adiw	r24, 0x01	; 1
 5fe:	8a 30       	cpi	r24, 0x0A	; 10
 600:	91 05       	cpc	r25, r1
 602:	7c f3       	brlt	.-34     	; 0x5e2 <read_supply_ext+0x66>
	{
		sum += current[i];
	}
	
	average_I = sum/10;
 604:	ad ec       	ldi	r26, 0xCD	; 205
 606:	bc ec       	ldi	r27, 0xCC	; 204
 608:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__umulhisi3>
	
	return average_I;
}
 60c:	96 95       	lsr	r25
 60e:	87 95       	ror	r24
 610:	96 95       	lsr	r25
 612:	87 95       	ror	r24
 614:	96 95       	lsr	r25
 616:	87 95       	ror	r24
 618:	64 96       	adiw	r28, 0x14	; 20
 61a:	cd bf       	out	0x3d, r28	; 61
 61c:	de bf       	out	0x3e, r29	; 62
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	1f 91       	pop	r17
 624:	0f 91       	pop	r16
 626:	08 95       	ret

00000628 <write_ext>:
	
	write8_UART(hbyte);																//Send high byte											
}

void write_ext(void)
{
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
	uint16_t I_ext;
	uint16_t bit_test;
	uint8_t hbyte;																	//High 8 bits I_bat
	uint8_t lbyte;																	//Low 8 bits I_bat
	
	I_ext = read_supply_ext();														//Enables battery supply and reads the average current
 62c:	0e 94 be 02 	call	0x57c	; 0x57c <read_supply_ext>
 630:	ec 01       	movw	r28, r24
	lbyte = I_ext&(0xFF);															//Check for set bits lower byte
	
	write8_UART(lbyte);																//Send lower byte
 632:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
	
	bit_test = I_ext&(0xFF00);														//test 8 set bits high byte
 636:	cc 27       	eor	r28, r28
	bit_test >>= 8;																	//Bit shift high byte to low byte register
	hbyte = (uint8_t)bit_test;														//typecast to 1 register
	
	write8_UART(hbyte);																//Send high byte
 638:	8d 2f       	mov	r24, r29
 63a:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
}
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <read_supply_bat>:
	write8_UART(hbyte);																//Send high byte
}
#endif

uint16_t read_supply_bat(void)
{
 644:	0f 93       	push	r16
 646:	1f 93       	push	r17
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
 650:	64 97       	sbiw	r28, 0x14	; 20
 652:	cd bf       	out	0x3d, r28	; 61
 654:	de bf       	out	0x3e, r29	; 62
	uint16_t current[10];
	uint16_t average_I;
	uint16_t sum = 0;																//Big enough sum of 10 12bit uints;
	
	//supply_bat();
	PORTB_OUTSET = PIN3_bm;															//enable ext
 656:	88 e0       	ldi	r24, 0x08	; 8
 658:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
	TIMEOUT();
 65c:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
	PORTB_OUTCLR = PIN2_bm;															//disable bat
 660:	84 e0       	ldi	r24, 0x04	; 4
 662:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
	TIMEOUT();
 666:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
 66a:	00 e0       	ldi	r16, 0x00	; 0
 66c:	10 e0       	ldi	r17, 0x00	; 0
 66e:	15 c0       	rjmp	.+42     	; 0x69a <read_supply_bat+0x56>
	{
		read_IT();
 670:	0e 94 73 02 	call	0x4e6	; 0x4e6 <read_IT>
		current[i] = IT[1];
 674:	80 91 08 48 	lds	r24, 0x4808	; 0x804808 <IT+0x2>
 678:	90 91 09 48 	lds	r25, 0x4809	; 0x804809 <IT+0x3>
 67c:	f8 01       	movw	r30, r16
 67e:	ee 0f       	add	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	21 e0       	ldi	r18, 0x01	; 1
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	2c 0f       	add	r18, r28
 688:	3d 1f       	adc	r19, r29
 68a:	e2 0f       	add	r30, r18
 68c:	f3 1f       	adc	r31, r19
 68e:	80 83       	st	Z, r24
 690:	91 83       	std	Z+1, r25	; 0x01
		TIMEOUT();
 692:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
	PORTB_OUTSET = PIN3_bm;															//enable ext
	TIMEOUT();
	PORTB_OUTCLR = PIN2_bm;															//disable bat
	TIMEOUT();
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
 696:	0f 5f       	subi	r16, 0xFF	; 255
 698:	1f 4f       	sbci	r17, 0xFF	; 255
 69a:	0a 30       	cpi	r16, 0x0A	; 10
 69c:	11 05       	cpc	r17, r1
 69e:	44 f3       	brlt	.-48     	; 0x670 <read_supply_bat+0x2c>
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	20 e0       	ldi	r18, 0x00	; 0
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	0e c0       	rjmp	.+28     	; 0x6c6 <read_supply_bat+0x82>
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
	{
		sum += current[i];
 6aa:	fc 01       	movw	r30, r24
 6ac:	ee 0f       	add	r30, r30
 6ae:	ff 1f       	adc	r31, r31
 6b0:	41 e0       	ldi	r20, 0x01	; 1
 6b2:	50 e0       	ldi	r21, 0x00	; 0
 6b4:	4c 0f       	add	r20, r28
 6b6:	5d 1f       	adc	r21, r29
 6b8:	e4 0f       	add	r30, r20
 6ba:	f5 1f       	adc	r31, r21
 6bc:	40 81       	ld	r20, Z
 6be:	51 81       	ldd	r21, Z+1	; 0x01
 6c0:	24 0f       	add	r18, r20
 6c2:	35 1f       	adc	r19, r21
		read_IT();
		current[i] = IT[1];
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
 6c4:	01 96       	adiw	r24, 0x01	; 1
 6c6:	8a 30       	cpi	r24, 0x0A	; 10
 6c8:	91 05       	cpc	r25, r1
 6ca:	7c f3       	brlt	.-34     	; 0x6aa <read_supply_bat+0x66>
	{
		sum += current[i];
	}
	
	average_I = sum/10;
 6cc:	ad ec       	ldi	r26, 0xCD	; 205
 6ce:	bc ec       	ldi	r27, 0xCC	; 204
 6d0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__umulhisi3>
	
	return average_I;
}
 6d4:	96 95       	lsr	r25
 6d6:	87 95       	ror	r24
 6d8:	96 95       	lsr	r25
 6da:	87 95       	ror	r24
 6dc:	96 95       	lsr	r25
 6de:	87 95       	ror	r24
 6e0:	64 96       	adiw	r28, 0x14	; 20
 6e2:	cd bf       	out	0x3d, r28	; 61
 6e4:	de bf       	out	0x3e, r29	; 62
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	08 95       	ret

000006f0 <write_bat>:
	
	return average_I;
}

void write_bat(void)
{
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
	uint16_t I_bat;
	uint16_t bit_test;
	uint8_t hbyte;																	//High 8 bits I_bat
	uint8_t lbyte;																	//Low 8 bits I_bat
	
	I_bat = read_supply_bat();														//Enables battery supply and reads the average current
 6f4:	0e 94 22 03 	call	0x644	; 0x644 <read_supply_bat>
 6f8:	ec 01       	movw	r28, r24
	lbyte = I_bat&(0xFF);															//Check for set bits lower byte
	
	write8_UART(lbyte);																//Send lower byte
 6fa:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
	
	bit_test = I_bat&(0xFF00);														//test 8 set bits high byte
 6fe:	cc 27       	eor	r28, r28
	bit_test >>= 8;																	//Bit shift high byte to low byte register
	hbyte = (uint8_t)bit_test;														//typecast to 1 register
	
	write8_UART(hbyte);																//Send high byte											
 700:	8d 2f       	mov	r24, r29
 702:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
}
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

0000070c <LPM_P_OFF>:
}
#endif

void LPM_P_OFF(void)
{
	PORTB_OUTCLR = PIN2_bm;															//turn battery supply off
 70c:	e6 e2       	ldi	r30, 0x26	; 38
 70e:	f6 e0       	ldi	r31, 0x06	; 6
 710:	84 e0       	ldi	r24, 0x04	; 4
 712:	80 83       	st	Z, r24
	PORTB_OUTCLR = PIN3_bm;															//turn external supply off 
 714:	88 e0       	ldi	r24, 0x08	; 8
 716:	80 83       	st	Z, r24
 718:	08 95       	ret

0000071a <init_UART>:
#include <stdio.h>
#include "start.h"

void init_UART(void)
{
	PORTE_DIRCLR = PIN2_bm;												//Set RX pin USARTE0 E2 as input
 71a:	84 e0       	ldi	r24, 0x04	; 4
 71c:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x7be682>
	PORTE_DIRSET = PIN3_bm;												//Set TX pin USARTE0 E3 as output
 720:	88 e0       	ldi	r24, 0x08	; 8
 722:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	PORTE_OUTSET = PIN3_bm;												//Set TX pin to high
 726:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	USARTE0.BAUDCTRLB |= (0x09<<4);										//Set BSCALE to -7 for baud 115200
 72a:	e0 ea       	ldi	r30, 0xA0	; 160
 72c:	fa e0       	ldi	r31, 0x0A	; 10
 72e:	87 81       	ldd	r24, Z+7	; 0x07
 730:	80 69       	ori	r24, 0x90	; 144
 732:	87 83       	std	Z+7, r24	; 0x07
	USARTE0.BAUDCTRLA |= (0x2E);										//Set BSEL to 2094 for baud 115200
 734:	86 81       	ldd	r24, Z+6	; 0x06
 736:	8e 62       	ori	r24, 0x2E	; 46
 738:	86 83       	std	Z+6, r24	; 0x06
	USARTE0.BAUDCTRLB |= (0x08);										//Set BSel to 2094 for baud 115200
 73a:	87 81       	ldd	r24, Z+7	; 0x07
 73c:	88 60       	ori	r24, 0x08	; 8
 73e:	87 83       	std	Z+7, r24	; 0x07
	
	USARTE0.CTRLC |= (0x03);											//Sets amount of data bits to 8
 740:	85 81       	ldd	r24, Z+5	; 0x05
 742:	83 60       	ori	r24, 0x03	; 3
 744:	85 83       	std	Z+5, r24	; 0x05
	USARTE0.CTRLB |= (0x03<<3);											//Sets the Rx and TX enable bits.
 746:	84 81       	ldd	r24, Z+4	; 0x04
 748:	88 61       	ori	r24, 0x18	; 24
 74a:	84 83       	std	Z+4, r24	; 0x04
 74c:	08 95       	ret

0000074e <init_CLK>:
}

void init_CLK(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;											// Enable internal 32 MHz oscillator
 74e:	e0 e5       	ldi	r30, 0x50	; 80
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	82 60       	ori	r24, 0x02	; 2
 756:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));								// Wait for oscillator is ready
 758:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
 75c:	81 ff       	sbrs	r24, 1
 75e:	fc cf       	rjmp	.-8      	; 0x758 <init_CLK+0xa>
	CCP = CCP_IOREG_gc;													// Security signature to modify clock
 760:	88 ed       	ldi	r24, 0xD8	; 216
 762:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;									// Select 32 MHz oscillator
 764:	e0 e4       	ldi	r30, 0x40	; 64
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	80 83       	st	Z, r24
	CLK.PSCTRL = CLK_PSADIV_1_gc;										// Set PSA to 1
 76c:	11 82       	std	Z+1, r1	; 0x01
	CLK.PSCTRL = CLK_PSBCDIV_1_1_gc;									// Set PSB&PSC to 1
 76e:	11 82       	std	Z+1, r1	; 0x01
 770:	08 95       	ret

00000772 <init_TIMER>:
}

void init_TIMER(void)
{
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;									//Set timer E0 to normal mode
 772:	e0 e0       	ldi	r30, 0x00	; 0
 774:	fa e0       	ldi	r31, 0x0A	; 10
 776:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;										//Timer is off until clksel is changed
 778:	10 82       	st	Z, r1
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;									//Set overflow interrupt TCE0 to low level
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	86 83       	std	Z+6, r24	; 0x06
	TCE0.PERL = 0xFF;
 77e:	8f ef       	ldi	r24, 0xFF	; 255
 780:	86 a3       	std	Z+38, r24	; 0x26
	TCE0.PERH = 0xFF;													//t = N*(PER + 1)/F_CPU = 0.25
 782:	87 a3       	std	Z+39, r24	; 0x27
 784:	08 95       	ret

00000786 <init_DELAY>:
}

void init_DELAY(void)													//Uses two 16Bit TC's to form 32 Bit one
{
	TCD1.CTRLB = TC_WGMODE_NORMAL_gc;									//Set timer E0 to normal mode
 786:	e0 e4       	ldi	r30, 0x40	; 64
 788:	f9 e0       	ldi	r31, 0x09	; 9
 78a:	11 82       	std	Z+1, r1	; 0x01
	TCD1.CTRLA = TC_CLKSEL_OFF_gc;										//Timer is off until clksel is changed
 78c:	10 82       	st	Z, r1
	TCD1.PER = 0xFFFF;													//t = N*(PER + 1)/F_CPU = 0.25
 78e:	8f ef       	ldi	r24, 0xFF	; 255
 790:	9f ef       	ldi	r25, 0xFF	; 255
 792:	86 a3       	std	Z+38, r24	; 0x26
 794:	97 a3       	std	Z+39, r25	; 0x27
 796:	08 95       	ret

00000798 <init_ADC>:
}

void init_ADC(void)
{
	PORTA_DIRCLR = PIN0_bm;												//VCC_main
 798:	e2 e0       	ldi	r30, 0x02	; 2
 79a:	f6 e0       	ldi	r31, 0x06	; 6
 79c:	31 e0       	ldi	r19, 0x01	; 1
 79e:	30 83       	st	Z, r19
	PORTA_DIRCLR = PIN1_bm;												//CORE_VDD
 7a0:	22 e0       	ldi	r18, 0x02	; 2
 7a2:	20 83       	st	Z, r18
	PORTA_DIRCLR = PIN2_bm;												//+1.8VDD
 7a4:	84 e0       	ldi	r24, 0x04	; 4
 7a6:	80 83       	st	Z, r24
	PORTA_DIRCLR = PIN3_bm;												//+3.0VIO
 7a8:	88 e0       	ldi	r24, 0x08	; 8
 7aa:	80 83       	st	Z, r24
	PORTA_DIRCLR = PIN4_bm;												//I_external
 7ac:	90 e1       	ldi	r25, 0x10	; 16
 7ae:	90 83       	st	Z, r25
	PORTA_DIRCLR = PIN5_bm;												//I_battery
 7b0:	80 e2       	ldi	r24, 0x20	; 32
 7b2:	80 83       	st	Z, r24
	
	PORTB_DIRCLR = PIN0_bm;												//VPP_2V5
 7b4:	e2 e2       	ldi	r30, 0x22	; 34
 7b6:	f6 e0       	ldi	r31, 0x06	; 6
 7b8:	30 83       	st	Z, r19
	PORTB_DIRCLR = PIN1_bm;												//+1.8VIO
 7ba:	20 83       	st	Z, r18
	PORTB_DIRCLR = PIN4_bm;												//BLE_VDD
 7bc:	90 83       	st	Z, r25
	PORTB_DIRCLR = PIN5_bm;												//D0 samples
 7be:	80 83       	st	Z, r24
	PORTB_DIRCLR = PIN6_bm;												//D1 samples
 7c0:	80 e4       	ldi	r24, 0x40	; 64
 7c2:	80 83       	st	Z, r24
	
	//ADCA.PRESCALER |= ADC_PRESCALER_DIV8_gc;							//Set ADCA clock speed to 62.5kHz
	//ADCB.PRESCALER |= ADC_PRESCALER_DIV8_gc;							//Set ADCB clock speed to 62.5kHz
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCA clock speed to 62.5kHz
 7c4:	a0 e0       	ldi	r26, 0x00	; 0
 7c6:	b2 e0       	ldi	r27, 0x02	; 2
 7c8:	83 e0       	ldi	r24, 0x03	; 3
 7ca:	14 96       	adiw	r26, 0x04	; 4
 7cc:	8c 93       	st	X, r24
 7ce:	14 97       	sbiw	r26, 0x04	; 4
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCB clock speed to 62.5kHz
 7d0:	e0 e4       	ldi	r30, 0x40	; 64
 7d2:	f2 e0       	ldi	r31, 0x02	; 2
 7d4:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCA to 12bit resolution
 7d6:	12 96       	adiw	r26, 0x02	; 2
 7d8:	8c 91       	ld	r24, X
 7da:	12 97       	sbiw	r26, 0x02	; 2
 7dc:	12 96       	adiw	r26, 0x02	; 2
 7de:	8c 93       	st	X, r24
 7e0:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCB to 12bit resolution
 7e2:	82 81       	ldd	r24, Z+2	; 0x02
 7e4:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCA reference voltage to internal VCC
 7e6:	12 96       	adiw	r26, 0x02	; 2
 7e8:	8c 91       	ld	r24, X
 7ea:	12 97       	sbiw	r26, 0x02	; 2
 7ec:	80 61       	ori	r24, 0x10	; 16
 7ee:	12 96       	adiw	r26, 0x02	; 2
 7f0:	8c 93       	st	X, r24
 7f2:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCB reference voltage to internal VCC
 7f4:	82 81       	ldd	r24, Z+2	; 0x02
 7f6:	80 61       	ori	r24, 0x10	; 16
 7f8:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 0 differential input
 7fa:	90 96       	adiw	r26, 0x20	; 32
 7fc:	8c 91       	ld	r24, X
 7fe:	90 97       	sbiw	r26, 0x20	; 32
 800:	81 60       	ori	r24, 0x01	; 1
 802:	90 96       	adiw	r26, 0x20	; 32
 804:	8c 93       	st	X, r24
 806:	90 97       	sbiw	r26, 0x20	; 32
	ADCA.CH1.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 1 differential input
 808:	98 96       	adiw	r26, 0x28	; 40
 80a:	8c 91       	ld	r24, X
 80c:	98 97       	sbiw	r26, 0x28	; 40
 80e:	81 60       	ori	r24, 0x01	; 1
 810:	98 96       	adiw	r26, 0x28	; 40
 812:	8c 93       	st	X, r24
 814:	98 97       	sbiw	r26, 0x28	; 40
	ADCA.CH2.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 2 differential input
 816:	d0 96       	adiw	r26, 0x30	; 48
 818:	8c 91       	ld	r24, X
 81a:	d0 97       	sbiw	r26, 0x30	; 48
 81c:	81 60       	ori	r24, 0x01	; 1
 81e:	d0 96       	adiw	r26, 0x30	; 48
 820:	8c 93       	st	X, r24
 822:	d0 97       	sbiw	r26, 0x30	; 48
	ADCA.CH3.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 3 differential input
 824:	d8 96       	adiw	r26, 0x38	; 56
 826:	8c 91       	ld	r24, X
 828:	d8 97       	sbiw	r26, 0x38	; 56
 82a:	81 60       	ori	r24, 0x01	; 1
 82c:	d8 96       	adiw	r26, 0x38	; 56
 82e:	8c 93       	st	X, r24
 830:	d8 97       	sbiw	r26, 0x38	; 56
	
	ADCB.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 0 differential input
 832:	80 a1       	ldd	r24, Z+32	; 0x20
 834:	81 60       	ori	r24, 0x01	; 1
 836:	80 a3       	std	Z+32, r24	; 0x20
	ADCB.CH1.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 1 differential input
 838:	80 a5       	ldd	r24, Z+40	; 0x28
 83a:	81 60       	ori	r24, 0x01	; 1
 83c:	80 a7       	std	Z+40, r24	; 0x28
	ADCB.CH2.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 2 differential input
 83e:	80 a9       	ldd	r24, Z+48	; 0x30
 840:	81 60       	ori	r24, 0x01	; 1
 842:	80 ab       	std	Z+48, r24	; 0x30
	ADCB.CH3.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 3 differential input
 844:	80 ad       	ldd	r24, Z+56	; 0x38
 846:	81 60       	ori	r24, 0x01	; 1
 848:	80 af       	std	Z+56, r24	; 0x38
	
	ADCA.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 0 reference voltage to internal GND
 84a:	91 96       	adiw	r26, 0x21	; 33
 84c:	8c 91       	ld	r24, X
 84e:	91 97       	sbiw	r26, 0x21	; 33
 850:	87 60       	ori	r24, 0x07	; 7
 852:	91 96       	adiw	r26, 0x21	; 33
 854:	8c 93       	st	X, r24
 856:	91 97       	sbiw	r26, 0x21	; 33
	ADCA.CH1.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 1 reference voltage to internal GND
 858:	99 96       	adiw	r26, 0x29	; 41
 85a:	8c 91       	ld	r24, X
 85c:	99 97       	sbiw	r26, 0x29	; 41
 85e:	87 60       	ori	r24, 0x07	; 7
 860:	99 96       	adiw	r26, 0x29	; 41
 862:	8c 93       	st	X, r24
 864:	99 97       	sbiw	r26, 0x29	; 41
	ADCA.CH2.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 2 reference voltage to internal GND
 866:	d1 96       	adiw	r26, 0x31	; 49
 868:	8c 91       	ld	r24, X
 86a:	d1 97       	sbiw	r26, 0x31	; 49
 86c:	87 60       	ori	r24, 0x07	; 7
 86e:	d1 96       	adiw	r26, 0x31	; 49
 870:	8c 93       	st	X, r24
 872:	d1 97       	sbiw	r26, 0x31	; 49
	ADCA.CH3.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 3 reference voltage to internal GND
 874:	d9 96       	adiw	r26, 0x39	; 57
 876:	8c 91       	ld	r24, X
 878:	d9 97       	sbiw	r26, 0x39	; 57
 87a:	87 60       	ori	r24, 0x07	; 7
 87c:	d9 96       	adiw	r26, 0x39	; 57
 87e:	8c 93       	st	X, r24
	
	ADCB.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 0 reference voltage to internal GND
 880:	81 a1       	ldd	r24, Z+33	; 0x21
 882:	87 60       	ori	r24, 0x07	; 7
 884:	81 a3       	std	Z+33, r24	; 0x21
	ADCB.CH1.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 1 reference voltage to internal GND
 886:	81 a5       	ldd	r24, Z+41	; 0x29
 888:	87 60       	ori	r24, 0x07	; 7
 88a:	81 a7       	std	Z+41, r24	; 0x29
	ADCB.CH2.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 2 reference voltage to internal GND
 88c:	81 a9       	ldd	r24, Z+49	; 0x31
 88e:	87 60       	ori	r24, 0x07	; 7
 890:	81 ab       	std	Z+49, r24	; 0x31
	ADCB.CH3.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 3 reference voltage to internal GND
 892:	81 ad       	ldd	r24, Z+57	; 0x39
 894:	87 60       	ori	r24, 0x07	; 7
 896:	81 af       	std	Z+57, r24	; 0x39
 898:	08 95       	ret

0000089a <init_supply>:
}
#endif

void init_supply(void)
{
	PORTB_DIRSET = PIN2_bm;												//Set pin as output to enable ... supply
 89a:	e1 e2       	ldi	r30, 0x21	; 33
 89c:	f6 e0       	ldi	r31, 0x06	; 6
 89e:	84 e0       	ldi	r24, 0x04	; 4
 8a0:	80 83       	st	Z, r24
	PORTB_DIRSET = PIN3_bm;												//Set pin as output to enable ... supply
 8a2:	88 e0       	ldi	r24, 0x08	; 8
 8a4:	80 83       	st	Z, r24
 8a6:	08 95       	ret

000008a8 <__vector_47>:
char OUTPUTBUF[5];
int16_t OutVar;
uint16_t D0_raw[SAMPLE_WINDOW];

ISR(TCE0_OVF_vect)														//Do something every timer E0 overflow
{
 8a8:	1f 92       	push	r1
 8aa:	0f 92       	push	r0
 8ac:	0f b6       	in	r0, 0x3f	; 63
 8ae:	0f 92       	push	r0
 8b0:	11 24       	eor	r1, r1
 8b2:	8f 93       	push	r24
 8b4:	9f 93       	push	r25
	PTimeOut = 1;														//If TC overflow occurs before collecting pulses stop while loop
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <PTimeOut>
 8be:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <PTimeOut+0x1>
}
 8c2:	9f 91       	pop	r25
 8c4:	8f 91       	pop	r24
 8c6:	0f 90       	pop	r0
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	0f 90       	pop	r0
 8cc:	1f 90       	pop	r1
 8ce:	18 95       	reti

000008d0 <__vector_64>:

ISR(PORTD_INT0_vect)													//Do something when PD2 encounters falling edge
{
 8d0:	1f 92       	push	r1
 8d2:	0f 92       	push	r0
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	0f 92       	push	r0
 8d8:	11 24       	eor	r1, r1
 8da:	0b b6       	in	r0, 0x3b	; 59
 8dc:	0f 92       	push	r0
 8de:	2f 93       	push	r18
 8e0:	3f 93       	push	r19
 8e2:	4f 93       	push	r20
 8e4:	8f 93       	push	r24
 8e6:	9f 93       	push	r25
 8e8:	ef 93       	push	r30
 8ea:	ff 93       	push	r31
	PTime[TC_samples] = (((TCE0.CNTH+1)<<8)+TCE0.CNTL+1);
 8ec:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 8f0:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 8f4:	e0 e0       	ldi	r30, 0x00	; 0
 8f6:	fa e0       	ldi	r31, 0x0A	; 10
 8f8:	81 a1       	ldd	r24, Z+33	; 0x21
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	01 96       	adiw	r24, 0x01	; 1
 8fe:	98 2f       	mov	r25, r24
 900:	88 27       	eor	r24, r24
 902:	40 a1       	ldd	r20, Z+32	; 0x20
 904:	84 0f       	add	r24, r20
 906:	91 1d       	adc	r25, r1
 908:	01 96       	adiw	r24, 0x01	; 1
 90a:	f9 01       	movw	r30, r18
 90c:	ee 0f       	add	r30, r30
 90e:	ff 1f       	adc	r31, r31
 910:	ed 52       	subi	r30, 0x2D	; 45
 912:	ff 4d       	sbci	r31, 0xDF	; 223
 914:	80 83       	st	Z, r24
 916:	91 83       	std	Z+1, r25	; 0x01
	TC_samples++;
 918:	2f 5f       	subi	r18, 0xFF	; 255
 91a:	3f 4f       	sbci	r19, 0xFF	; 255
 91c:	20 93 00 20 	sts	0x2000, r18	; 0x802000 <__DATA_REGION_ORIGIN__>
 920:	30 93 01 20 	sts	0x2001, r19	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
}
 924:	ff 91       	pop	r31
 926:	ef 91       	pop	r30
 928:	9f 91       	pop	r25
 92a:	8f 91       	pop	r24
 92c:	4f 91       	pop	r20
 92e:	3f 91       	pop	r19
 930:	2f 91       	pop	r18
 932:	0f 90       	pop	r0
 934:	0b be       	out	0x3b, r0	; 59
 936:	0f 90       	pop	r0
 938:	0f be       	out	0x3f, r0	; 63
 93a:	0f 90       	pop	r0
 93c:	1f 90       	pop	r1
 93e:	18 95       	reti

00000940 <__vector_65>:

ISR(PORTD_INT1_vect)													//Do something when PD1 encounters falling edge
{
 940:	1f 92       	push	r1
 942:	0f 92       	push	r0
 944:	0f b6       	in	r0, 0x3f	; 63
 946:	0f 92       	push	r0
 948:	11 24       	eor	r1, r1
	//Do something
}
 94a:	0f 90       	pop	r0
 94c:	0f be       	out	0x3f, r0	; 63
 94e:	0f 90       	pop	r0
 950:	1f 90       	pop	r1
 952:	18 95       	reti

00000954 <main>:

int main(void)
{
	init_CLK();
 954:	0e 94 a7 03 	call	0x74e	; 0x74e <init_CLK>
//	init_stream(F_CPU);
	init_TIMER();
 958:	0e 94 b9 03 	call	0x772	; 0x772 <init_TIMER>
	init_DELAY();
 95c:	0e 94 c3 03 	call	0x786	; 0x786 <init_DELAY>
	init_ADC();
 960:	0e 94 cc 03 	call	0x798	; 0x798 <init_ADC>
//	init_DAC();
	init_UART();
 964:	0e 94 8d 03 	call	0x71a	; 0x71a <init_UART>
	init_supply();
 968:	0e 94 4d 04 	call	0x89a	; 0x89a <init_supply>
	sei();
 96c:	78 94       	sei
	PMIC.CTRL |= PMIC_LOLVLEN_bm;										//Set low level interrupts
 96e:	e0 ea       	ldi	r30, 0xA0	; 160
 970:	f0 e0       	ldi	r31, 0x00	; 0
 972:	82 81       	ldd	r24, Z+2	; 0x02
 974:	81 60       	ori	r24, 0x01	; 1
 976:	82 83       	std	Z+2, r24	; 0x02
	
	PORTA_DIRSET = PIN7_bm;												//Set I'm alive pin as output
 978:	80 e8       	ldi	r24, 0x80	; 128
 97a:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7be601>
	PORTA_OUTSET = PIN7_bm;												//Enable I'm alive LED
 97e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
	
	PORTE_DIRSET = PIN4_bm;												//Timing debug pin
 982:	80 e1       	ldi	r24, 0x10	; 16
 984:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
   
   uint8_t uart_data;

    while (1) 
    {
		uart_data = read_UART();
 988:	0e 94 21 01 	call	0x242	; 0x242 <read_UART>
		switch(uart_data)
 98c:	8e 31       	cpi	r24, 0x1E	; 30
 98e:	99 f0       	breq	.+38     	; 0x9b6 <main+0x62>
 990:	28 f4       	brcc	.+10     	; 0x99c <main+0x48>
 992:	8a 30       	cpi	r24, 0x0A	; 10
 994:	51 f0       	breq	.+20     	; 0x9aa <main+0x56>
 996:	84 31       	cpi	r24, 0x14	; 20
 998:	59 f0       	breq	.+22     	; 0x9b0 <main+0x5c>
 99a:	41 c0       	rjmp	.+130    	; 0xa1e <main+0xca>
 99c:	82 33       	cpi	r24, 0x32	; 50
 99e:	c9 f1       	breq	.+114    	; 0xa12 <main+0xbe>
 9a0:	8c 33       	cpi	r24, 0x3C	; 60
 9a2:	d1 f1       	breq	.+116    	; 0xa18 <main+0xc4>
 9a4:	88 32       	cpi	r24, 0x28	; 40
 9a6:	d9 f5       	brne	.+118    	; 0xa1e <main+0xca>
 9a8:	2d c0       	rjmp	.+90     	; 0xa04 <main+0xb0>
		{
			case(10):
				write_ext();											//Enables external supply + reads average current 1 sec + writes lbyte and then hbyte
 9aa:	0e 94 14 03 	call	0x628	; 0x628 <write_ext>
				break;
 9ae:	ec cf       	rjmp	.-40     	; 0x988 <main+0x34>
				
			case(20):
				write_bat();											//Enables battery supply + reads average current 1 sec
 9b0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <write_bat>
				break;
 9b4:	e9 cf       	rjmp	.-46     	; 0x988 <main+0x34>
				
			case(30):
				//write_volt();											//Reads voltages and converts them to two uint8_t data packages (14 packages total)
				write8_UART(1);
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				TIMEOUT();
 9bc:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
				write8_UART(2);
 9c0:	82 e0       	ldi	r24, 0x02	; 2
 9c2:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				TIMEOUT();
 9c6:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
				write8_UART(3);
 9ca:	83 e0       	ldi	r24, 0x03	; 3
 9cc:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				TIMEOUT();
 9d0:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
				write8_UART(4);
 9d4:	84 e0       	ldi	r24, 0x04	; 4
 9d6:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				TIMEOUT();
 9da:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
				write8_UART(5);
 9de:	85 e0       	ldi	r24, 0x05	; 5
 9e0:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				TIMEOUT();
 9e4:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
				write8_UART(6);
 9e8:	86 e0       	ldi	r24, 0x06	; 6
 9ea:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				TIMEOUT();
 9ee:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
				write8_UART(7);
 9f2:	87 e0       	ldi	r24, 0x07	; 7
 9f4:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				TIMEOUT();
 9f8:	0e 94 67 02 	call	0x4ce	; 0x4ce <TIMEOUT>
				write8_UART(8);
 9fc:	88 e0       	ldi	r24, 0x08	; 8
 9fe:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				//read_voltages();
				break;
 a02:	c2 cf       	rjmp	.-124    	; 0x988 <main+0x34>
				
			case(40):
				write8_UART((0xFF));									//Write error code max 16bit value as other functions cant reach 0xFFFF
 a04:	8f ef       	ldi	r24, 0xFF	; 255
 a06:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				write8_UART((0xFF));									//Place D0 function here
 a0a:	8f ef       	ldi	r24, 0xFF	; 255
 a0c:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				break;
 a10:	bb cf       	rjmp	.-138    	; 0x988 <main+0x34>
				
			case(50):
				fread_D0();												//read the frequency of Digital outputs
 a12:	0e 94 59 01 	call	0x2b2	; 0x2b2 <fread_D0>
				//write8_UART((uint8_t)D0_raw[0]);						//debug print to MATLAB
				break;
 a16:	b8 cf       	rjmp	.-144    	; 0x988 <main+0x34>
				
			case(60):
				LPM_P_OFF();											//turn of both external and bat supply to LPM
 a18:	0e 94 86 03 	call	0x70c	; 0x70c <LPM_P_OFF>
				//write8_UART((0xFF));
				break;
 a1c:	b5 cf       	rjmp	.-150    	; 0x988 <main+0x34>
				
			default:
				write8_UART((0xFF));									//Write error code max 16bit value as other functions cant reach 0xFFFF
 a1e:	8f ef       	ldi	r24, 0xFF	; 255
 a20:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				write8_UART((0xFF));
 a24:	8f ef       	ldi	r24, 0xFF	; 255
 a26:	0e 94 37 01 	call	0x26e	; 0x26e <write8_UART>
				break;	
 a2a:	ae cf       	rjmp	.-164    	; 0x988 <main+0x34>

00000a2c <__vector_119>:
} // WriteByte_F0 

/*  \brief  ISR for receiving bytes from UARTF0.
 *          It puts the received byte in the RX buffer
 */
ISR(USARTF0_RXC_vect) {
 a2c:	1f 92       	push	r1
 a2e:	0f 92       	push	r0
 a30:	0f b6       	in	r0, 0x3f	; 63
 a32:	0f 92       	push	r0
 a34:	11 24       	eor	r1, r1
 a36:	0b b6       	in	r0, 0x3b	; 59
 a38:	0f 92       	push	r0
 a3a:	8f 93       	push	r24
 a3c:	9f 93       	push	r25
 a3e:	ef 93       	push	r30
 a40:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_f0_wridx;
 a42:	80 91 69 20 	lds	r24, 0x2069	; 0x802069 <rx_f0_wridx>
	rx_f0_buf[curSlot] = USARTF0.DATA;
 a46:	e8 2f       	mov	r30, r24
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x7beba0>
 a4e:	ec 5f       	subi	r30, 0xFC	; 252
 a50:	ff 4d       	sbci	r31, 0xDF	; 223
 a52:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
 a54:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_F0)
 a56:	84 36       	cpi	r24, 0x64	; 100
 a58:	08 f0       	brcs	.+2      	; 0xa5c <__vector_119+0x30>
	nextSlot = 0;
 a5a:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_f0_rdidx)
 a5c:	90 91 68 20 	lds	r25, 0x2068	; 0x802068 <rx_f0_rdidx>
 a60:	89 13       	cpse	r24, r25
	rx_f0_wridx = nextSlot;
 a62:	80 93 69 20 	sts	0x2069, r24	; 0x802069 <rx_f0_wridx>
	
} // ISR(USARTF0_RXC_vect)
 a66:	ff 91       	pop	r31
 a68:	ef 91       	pop	r30
 a6a:	9f 91       	pop	r25
 a6c:	8f 91       	pop	r24
 a6e:	0f 90       	pop	r0
 a70:	0b be       	out	0x3b, r0	; 59
 a72:	0f 90       	pop	r0
 a74:	0f be       	out	0x3f, r0	; 63
 a76:	0f 90       	pop	r0
 a78:	1f 90       	pop	r1
 a7a:	18 95       	reti

00000a7c <__vector_120>:


/*  \brief  ISR for transmitting bytes to UARTF0.
 *          If there is a byte to send in the TX buffer, it will be send
 */
ISR(USARTF0_DRE_vect) {
 a7c:	1f 92       	push	r1
 a7e:	0f 92       	push	r0
 a80:	0f b6       	in	r0, 0x3f	; 63
 a82:	0f 92       	push	r0
 a84:	11 24       	eor	r1, r1
 a86:	0b b6       	in	r0, 0x3b	; 59
 a88:	0f 92       	push	r0
 a8a:	2f 93       	push	r18
 a8c:	8f 93       	push	r24
 a8e:	9f 93       	push	r25
 a90:	ef 93       	push	r30
 a92:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_f0_rdidx;
 a94:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <tx_f0_rdidx>
	lastSlot = tx_f0_wridx;
 a98:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <tx_f0_wridx>
	
	if(curSlot != lastSlot) {
 a9c:	89 17       	cp	r24, r25
 a9e:	59 f0       	breq	.+22     	; 0xab6 <__vector_120+0x3a>
		USARTF0.DATA = tx_f0_buf[curSlot];
 aa0:	e8 2f       	mov	r30, r24
 aa2:	f0 e0       	ldi	r31, 0x00	; 0
 aa4:	e6 59       	subi	r30, 0x96	; 150
 aa6:	ff 4d       	sbci	r31, 0xDF	; 223
 aa8:	20 81       	ld	r18, Z
 aaa:	20 93 a0 0b 	sts	0x0BA0, r18	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x7beba0>
		nextSlot = curSlot + 1;
 aae:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_F0)
 ab0:	84 36       	cpi	r24, 0x64	; 100
 ab2:	08 f0       	brcs	.+2      	; 0xab6 <__vector_120+0x3a>
		nextSlot = 0;
 ab4:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
 ab6:	89 13       	cpse	r24, r25
 ab8:	03 c0       	rjmp	.+6      	; 0xac0 <__vector_120+0x44>
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
 aba:	90 e2       	ldi	r25, 0x20	; 32
 abc:	90 93 a3 0b 	sts	0x0BA3, r25	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x7beba3>
	
	tx_f0_rdidx = nextSlot;
 ac0:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <tx_f0_rdidx>
	
} // ISR(USARTF0_DRE_vect) 
 ac4:	ff 91       	pop	r31
 ac6:	ef 91       	pop	r30
 ac8:	9f 91       	pop	r25
 aca:	8f 91       	pop	r24
 acc:	2f 91       	pop	r18
 ace:	0f 90       	pop	r0
 ad0:	0b be       	out	0x3b, r0	; 59
 ad2:	0f 90       	pop	r0
 ad4:	0f be       	out	0x3f, r0	; 63
 ad6:	0f 90       	pop	r0
 ad8:	1f 90       	pop	r1
 ada:	18 95       	reti

00000adc <__floatunsisf>:
 adc:	e8 94       	clt
 ade:	09 c0       	rjmp	.+18     	; 0xaf2 <__floatsisf+0x12>

00000ae0 <__floatsisf>:
 ae0:	97 fb       	bst	r25, 7
 ae2:	3e f4       	brtc	.+14     	; 0xaf2 <__floatsisf+0x12>
 ae4:	90 95       	com	r25
 ae6:	80 95       	com	r24
 ae8:	70 95       	com	r23
 aea:	61 95       	neg	r22
 aec:	7f 4f       	sbci	r23, 0xFF	; 255
 aee:	8f 4f       	sbci	r24, 0xFF	; 255
 af0:	9f 4f       	sbci	r25, 0xFF	; 255
 af2:	99 23       	and	r25, r25
 af4:	a9 f0       	breq	.+42     	; 0xb20 <__floatsisf+0x40>
 af6:	f9 2f       	mov	r31, r25
 af8:	96 e9       	ldi	r25, 0x96	; 150
 afa:	bb 27       	eor	r27, r27
 afc:	93 95       	inc	r25
 afe:	f6 95       	lsr	r31
 b00:	87 95       	ror	r24
 b02:	77 95       	ror	r23
 b04:	67 95       	ror	r22
 b06:	b7 95       	ror	r27
 b08:	f1 11       	cpse	r31, r1
 b0a:	f8 cf       	rjmp	.-16     	; 0xafc <__floatsisf+0x1c>
 b0c:	fa f4       	brpl	.+62     	; 0xb4c <__floatsisf+0x6c>
 b0e:	bb 0f       	add	r27, r27
 b10:	11 f4       	brne	.+4      	; 0xb16 <__floatsisf+0x36>
 b12:	60 ff       	sbrs	r22, 0
 b14:	1b c0       	rjmp	.+54     	; 0xb4c <__floatsisf+0x6c>
 b16:	6f 5f       	subi	r22, 0xFF	; 255
 b18:	7f 4f       	sbci	r23, 0xFF	; 255
 b1a:	8f 4f       	sbci	r24, 0xFF	; 255
 b1c:	9f 4f       	sbci	r25, 0xFF	; 255
 b1e:	16 c0       	rjmp	.+44     	; 0xb4c <__floatsisf+0x6c>
 b20:	88 23       	and	r24, r24
 b22:	11 f0       	breq	.+4      	; 0xb28 <__floatsisf+0x48>
 b24:	96 e9       	ldi	r25, 0x96	; 150
 b26:	11 c0       	rjmp	.+34     	; 0xb4a <__floatsisf+0x6a>
 b28:	77 23       	and	r23, r23
 b2a:	21 f0       	breq	.+8      	; 0xb34 <__floatsisf+0x54>
 b2c:	9e e8       	ldi	r25, 0x8E	; 142
 b2e:	87 2f       	mov	r24, r23
 b30:	76 2f       	mov	r23, r22
 b32:	05 c0       	rjmp	.+10     	; 0xb3e <__floatsisf+0x5e>
 b34:	66 23       	and	r22, r22
 b36:	71 f0       	breq	.+28     	; 0xb54 <__floatsisf+0x74>
 b38:	96 e8       	ldi	r25, 0x86	; 134
 b3a:	86 2f       	mov	r24, r22
 b3c:	70 e0       	ldi	r23, 0x00	; 0
 b3e:	60 e0       	ldi	r22, 0x00	; 0
 b40:	2a f0       	brmi	.+10     	; 0xb4c <__floatsisf+0x6c>
 b42:	9a 95       	dec	r25
 b44:	66 0f       	add	r22, r22
 b46:	77 1f       	adc	r23, r23
 b48:	88 1f       	adc	r24, r24
 b4a:	da f7       	brpl	.-10     	; 0xb42 <__floatsisf+0x62>
 b4c:	88 0f       	add	r24, r24
 b4e:	96 95       	lsr	r25
 b50:	87 95       	ror	r24
 b52:	97 f9       	bld	r25, 7
 b54:	08 95       	ret

00000b56 <__fp_inf>:
 b56:	97 f9       	bld	r25, 7
 b58:	9f 67       	ori	r25, 0x7F	; 127
 b5a:	80 e8       	ldi	r24, 0x80	; 128
 b5c:	70 e0       	ldi	r23, 0x00	; 0
 b5e:	60 e0       	ldi	r22, 0x00	; 0
 b60:	08 95       	ret

00000b62 <__fp_nan>:
 b62:	9f ef       	ldi	r25, 0xFF	; 255
 b64:	80 ec       	ldi	r24, 0xC0	; 192
 b66:	08 95       	ret

00000b68 <__fp_pscA>:
 b68:	00 24       	eor	r0, r0
 b6a:	0a 94       	dec	r0
 b6c:	16 16       	cp	r1, r22
 b6e:	17 06       	cpc	r1, r23
 b70:	18 06       	cpc	r1, r24
 b72:	09 06       	cpc	r0, r25
 b74:	08 95       	ret

00000b76 <__fp_pscB>:
 b76:	00 24       	eor	r0, r0
 b78:	0a 94       	dec	r0
 b7a:	12 16       	cp	r1, r18
 b7c:	13 06       	cpc	r1, r19
 b7e:	14 06       	cpc	r1, r20
 b80:	05 06       	cpc	r0, r21
 b82:	08 95       	ret

00000b84 <__fp_round>:
 b84:	09 2e       	mov	r0, r25
 b86:	03 94       	inc	r0
 b88:	00 0c       	add	r0, r0
 b8a:	11 f4       	brne	.+4      	; 0xb90 <__fp_round+0xc>
 b8c:	88 23       	and	r24, r24
 b8e:	52 f0       	brmi	.+20     	; 0xba4 <__fp_round+0x20>
 b90:	bb 0f       	add	r27, r27
 b92:	40 f4       	brcc	.+16     	; 0xba4 <__fp_round+0x20>
 b94:	bf 2b       	or	r27, r31
 b96:	11 f4       	brne	.+4      	; 0xb9c <__fp_round+0x18>
 b98:	60 ff       	sbrs	r22, 0
 b9a:	04 c0       	rjmp	.+8      	; 0xba4 <__fp_round+0x20>
 b9c:	6f 5f       	subi	r22, 0xFF	; 255
 b9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ba0:	8f 4f       	sbci	r24, 0xFF	; 255
 ba2:	9f 4f       	sbci	r25, 0xFF	; 255
 ba4:	08 95       	ret

00000ba6 <__fp_split3>:
 ba6:	57 fd       	sbrc	r21, 7
 ba8:	90 58       	subi	r25, 0x80	; 128
 baa:	44 0f       	add	r20, r20
 bac:	55 1f       	adc	r21, r21
 bae:	59 f0       	breq	.+22     	; 0xbc6 <__fp_splitA+0x10>
 bb0:	5f 3f       	cpi	r21, 0xFF	; 255
 bb2:	71 f0       	breq	.+28     	; 0xbd0 <__fp_splitA+0x1a>
 bb4:	47 95       	ror	r20

00000bb6 <__fp_splitA>:
 bb6:	88 0f       	add	r24, r24
 bb8:	97 fb       	bst	r25, 7
 bba:	99 1f       	adc	r25, r25
 bbc:	61 f0       	breq	.+24     	; 0xbd6 <__fp_splitA+0x20>
 bbe:	9f 3f       	cpi	r25, 0xFF	; 255
 bc0:	79 f0       	breq	.+30     	; 0xbe0 <__fp_splitA+0x2a>
 bc2:	87 95       	ror	r24
 bc4:	08 95       	ret
 bc6:	12 16       	cp	r1, r18
 bc8:	13 06       	cpc	r1, r19
 bca:	14 06       	cpc	r1, r20
 bcc:	55 1f       	adc	r21, r21
 bce:	f2 cf       	rjmp	.-28     	; 0xbb4 <__fp_split3+0xe>
 bd0:	46 95       	lsr	r20
 bd2:	f1 df       	rcall	.-30     	; 0xbb6 <__fp_splitA>
 bd4:	08 c0       	rjmp	.+16     	; 0xbe6 <__fp_splitA+0x30>
 bd6:	16 16       	cp	r1, r22
 bd8:	17 06       	cpc	r1, r23
 bda:	18 06       	cpc	r1, r24
 bdc:	99 1f       	adc	r25, r25
 bde:	f1 cf       	rjmp	.-30     	; 0xbc2 <__fp_splitA+0xc>
 be0:	86 95       	lsr	r24
 be2:	71 05       	cpc	r23, r1
 be4:	61 05       	cpc	r22, r1
 be6:	08 94       	sec
 be8:	08 95       	ret

00000bea <__fp_zero>:
 bea:	e8 94       	clt

00000bec <__fp_szero>:
 bec:	bb 27       	eor	r27, r27
 bee:	66 27       	eor	r22, r22
 bf0:	77 27       	eor	r23, r23
 bf2:	cb 01       	movw	r24, r22
 bf4:	97 f9       	bld	r25, 7
 bf6:	08 95       	ret

00000bf8 <__mulsf3>:
 bf8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__mulsf3x>
 bfc:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__fp_round>
 c00:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_pscA>
 c04:	38 f0       	brcs	.+14     	; 0xc14 <__mulsf3+0x1c>
 c06:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fp_pscB>
 c0a:	20 f0       	brcs	.+8      	; 0xc14 <__mulsf3+0x1c>
 c0c:	95 23       	and	r25, r21
 c0e:	11 f0       	breq	.+4      	; 0xc14 <__mulsf3+0x1c>
 c10:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_inf>
 c14:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_nan>
 c18:	11 24       	eor	r1, r1
 c1a:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_szero>

00000c1e <__mulsf3x>:
 c1e:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fp_split3>
 c22:	70 f3       	brcs	.-36     	; 0xc00 <__mulsf3+0x8>

00000c24 <__mulsf3_pse>:
 c24:	95 9f       	mul	r25, r21
 c26:	c1 f3       	breq	.-16     	; 0xc18 <__mulsf3+0x20>
 c28:	95 0f       	add	r25, r21
 c2a:	50 e0       	ldi	r21, 0x00	; 0
 c2c:	55 1f       	adc	r21, r21
 c2e:	62 9f       	mul	r22, r18
 c30:	f0 01       	movw	r30, r0
 c32:	72 9f       	mul	r23, r18
 c34:	bb 27       	eor	r27, r27
 c36:	f0 0d       	add	r31, r0
 c38:	b1 1d       	adc	r27, r1
 c3a:	63 9f       	mul	r22, r19
 c3c:	aa 27       	eor	r26, r26
 c3e:	f0 0d       	add	r31, r0
 c40:	b1 1d       	adc	r27, r1
 c42:	aa 1f       	adc	r26, r26
 c44:	64 9f       	mul	r22, r20
 c46:	66 27       	eor	r22, r22
 c48:	b0 0d       	add	r27, r0
 c4a:	a1 1d       	adc	r26, r1
 c4c:	66 1f       	adc	r22, r22
 c4e:	82 9f       	mul	r24, r18
 c50:	22 27       	eor	r18, r18
 c52:	b0 0d       	add	r27, r0
 c54:	a1 1d       	adc	r26, r1
 c56:	62 1f       	adc	r22, r18
 c58:	73 9f       	mul	r23, r19
 c5a:	b0 0d       	add	r27, r0
 c5c:	a1 1d       	adc	r26, r1
 c5e:	62 1f       	adc	r22, r18
 c60:	83 9f       	mul	r24, r19
 c62:	a0 0d       	add	r26, r0
 c64:	61 1d       	adc	r22, r1
 c66:	22 1f       	adc	r18, r18
 c68:	74 9f       	mul	r23, r20
 c6a:	33 27       	eor	r19, r19
 c6c:	a0 0d       	add	r26, r0
 c6e:	61 1d       	adc	r22, r1
 c70:	23 1f       	adc	r18, r19
 c72:	84 9f       	mul	r24, r20
 c74:	60 0d       	add	r22, r0
 c76:	21 1d       	adc	r18, r1
 c78:	82 2f       	mov	r24, r18
 c7a:	76 2f       	mov	r23, r22
 c7c:	6a 2f       	mov	r22, r26
 c7e:	11 24       	eor	r1, r1
 c80:	9f 57       	subi	r25, 0x7F	; 127
 c82:	50 40       	sbci	r21, 0x00	; 0
 c84:	9a f0       	brmi	.+38     	; 0xcac <__mulsf3_pse+0x88>
 c86:	f1 f0       	breq	.+60     	; 0xcc4 <__mulsf3_pse+0xa0>
 c88:	88 23       	and	r24, r24
 c8a:	4a f0       	brmi	.+18     	; 0xc9e <__mulsf3_pse+0x7a>
 c8c:	ee 0f       	add	r30, r30
 c8e:	ff 1f       	adc	r31, r31
 c90:	bb 1f       	adc	r27, r27
 c92:	66 1f       	adc	r22, r22
 c94:	77 1f       	adc	r23, r23
 c96:	88 1f       	adc	r24, r24
 c98:	91 50       	subi	r25, 0x01	; 1
 c9a:	50 40       	sbci	r21, 0x00	; 0
 c9c:	a9 f7       	brne	.-22     	; 0xc88 <__mulsf3_pse+0x64>
 c9e:	9e 3f       	cpi	r25, 0xFE	; 254
 ca0:	51 05       	cpc	r21, r1
 ca2:	80 f0       	brcs	.+32     	; 0xcc4 <__mulsf3_pse+0xa0>
 ca4:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_inf>
 ca8:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_szero>
 cac:	5f 3f       	cpi	r21, 0xFF	; 255
 cae:	e4 f3       	brlt	.-8      	; 0xca8 <__mulsf3_pse+0x84>
 cb0:	98 3e       	cpi	r25, 0xE8	; 232
 cb2:	d4 f3       	brlt	.-12     	; 0xca8 <__mulsf3_pse+0x84>
 cb4:	86 95       	lsr	r24
 cb6:	77 95       	ror	r23
 cb8:	67 95       	ror	r22
 cba:	b7 95       	ror	r27
 cbc:	f7 95       	ror	r31
 cbe:	e7 95       	ror	r30
 cc0:	9f 5f       	subi	r25, 0xFF	; 255
 cc2:	c1 f7       	brne	.-16     	; 0xcb4 <__mulsf3_pse+0x90>
 cc4:	fe 2b       	or	r31, r30
 cc6:	88 0f       	add	r24, r24
 cc8:	91 1d       	adc	r25, r1
 cca:	96 95       	lsr	r25
 ccc:	87 95       	ror	r24
 cce:	97 f9       	bld	r25, 7
 cd0:	08 95       	ret

00000cd2 <__umulhisi3>:
 cd2:	a2 9f       	mul	r26, r18
 cd4:	b0 01       	movw	r22, r0
 cd6:	b3 9f       	mul	r27, r19
 cd8:	c0 01       	movw	r24, r0
 cda:	a3 9f       	mul	r26, r19
 cdc:	70 0d       	add	r23, r0
 cde:	81 1d       	adc	r24, r1
 ce0:	11 24       	eor	r1, r1
 ce2:	91 1d       	adc	r25, r1
 ce4:	b2 9f       	mul	r27, r18
 ce6:	70 0d       	add	r23, r0
 ce8:	81 1d       	adc	r24, r1
 cea:	11 24       	eor	r1, r1
 cec:	91 1d       	adc	r25, r1
 cee:	08 95       	ret

00000cf0 <_exit>:
 cf0:	f8 94       	cli

00000cf2 <__stop_program>:
 cf2:	ff cf       	rjmp	.-2      	; 0xcf2 <__stop_program>
