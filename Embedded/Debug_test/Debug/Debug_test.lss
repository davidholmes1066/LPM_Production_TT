
Debug_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00001020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000274e  00802000  00802000  00001020  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001050  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000635c  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003731  00000000  00000000  0000751c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001028  00000000  00000000  0000ac4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  0000bc78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003242  00000000  00000000  0000bf90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a87  00000000  00000000  0000f1d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000fc59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  10:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  14:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  18:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  1c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  20:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  24:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  28:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  30:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  34:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  38:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  40:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  44:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  48:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  4c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  50:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  54:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  58:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  5c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  60:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  64:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  68:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  6c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  70:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  74:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  78:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  7c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  80:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  84:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  88:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  8c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  90:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  94:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  98:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  9c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  bc:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__vector_47>
  c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  fc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 100:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__vector_64>
 104:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__vector_65>
 108:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 10c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 110:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 114:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 118:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 11c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 120:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 124:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 128:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 12c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 130:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 134:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 138:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 13c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 140:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 144:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 148:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 14c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 150:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 154:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 158:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 15c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 160:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 164:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 168:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 16c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 170:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 174:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 178:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 17c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 180:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 184:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 188:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 18c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 190:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 194:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 198:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 19c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_clear_bss>:
 20c:	27 e4       	ldi	r18, 0x47	; 71
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
 214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
 216:	ae 34       	cpi	r26, 0x4E	; 78
 218:	b2 07       	cpc	r27, r18
 21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
 21c:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
 220:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <_exit>

00000224 <__bad_interrupt>:
 224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000228 <read_UART>:
double calc_DACDATA(double dac_output)
{
	double dac_data;
	dac_data = (dac_output*4095)/DAC_VREF;											//calculate dac_channel_data for desired DAC output voltage
	return dac_data;
}
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	04 c0       	rjmp	.+8      	; 0x236 <read_UART+0xe>
 22e:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
 232:	20 78       	andi	r18, 0x80	; 128
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	21 15       	cp	r18, r1
 238:	31 05       	cpc	r19, r1
 23a:	c9 f3       	breq	.-14     	; 0x22e <read_UART+0x6>
 23c:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
 240:	06 c0       	rjmp	.+12     	; 0x24e <read_UART+0x26>
 242:	e0 ea       	ldi	r30, 0xA0	; 160
 244:	fa e0       	ldi	r31, 0x0A	; 10
 246:	21 81       	ldd	r18, Z+1	; 0x01
 248:	20 78       	andi	r18, 0x80	; 128
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	90 81       	ld	r25, Z
 24e:	23 2b       	or	r18, r19
 250:	c1 f7       	brne	.-16     	; 0x242 <read_UART+0x1a>
 252:	08 95       	ret

00000254 <write8_UART>:
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	04 c0       	rjmp	.+8      	; 0x262 <write8_UART+0xe>
 25a:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
 25e:	20 72       	andi	r18, 0x20	; 32
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	23 2b       	or	r18, r19
 264:	d1 f3       	breq	.-12     	; 0x25a <write8_UART+0x6>
 266:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	04 c0       	rjmp	.+8      	; 0x278 <write8_UART+0x24>
 270:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
 274:	80 72       	andi	r24, 0x20	; 32
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	89 2b       	or	r24, r25
 27a:	d1 f3       	breq	.-12     	; 0x270 <write8_UART+0x1c>
 27c:	08 95       	ret

0000027e <start_DELAY>:
 27e:	e0 e4       	ldi	r30, 0x40	; 64
 280:	f9 e0       	ldi	r31, 0x09	; 9
 282:	10 a2       	std	Z+32, r1	; 0x20
 284:	11 a2       	std	Z+33, r1	; 0x21
 286:	85 e0       	ldi	r24, 0x05	; 5
 288:	80 83       	st	Z, r24
 28a:	08 95       	ret

0000028c <stop_DELAY>:
 28c:	e0 e4       	ldi	r30, 0x40	; 64
 28e:	f9 e0       	ldi	r31, 0x09	; 9
 290:	10 82       	st	Z, r1
 292:	10 a2       	std	Z+32, r1	; 0x20
 294:	11 a2       	std	Z+33, r1	; 0x21
 296:	08 95       	ret

00000298 <read_voltages>:
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	e0 e0       	ldi	r30, 0x00	; 0
 2a2:	f2 e0       	ldi	r31, 0x02	; 2
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	84 83       	std	Z+4, r24	; 0x04
 2a8:	a0 e4       	ldi	r26, 0x40	; 64
 2aa:	b2 e0       	ldi	r27, 0x02	; 2
 2ac:	14 96       	adiw	r26, 0x04	; 4
 2ae:	8c 93       	st	X, r24
 2b0:	14 97       	sbiw	r26, 0x04	; 4
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	80 83       	st	Z, r24
 2b6:	8c 93       	st	X, r24
 2b8:	88 e0       	ldi	r24, 0x08	; 8
 2ba:	81 a7       	std	Z+41, r24	; 0x29
 2bc:	11 a2       	std	Z+33, r1	; 0x21
 2be:	90 e1       	ldi	r25, 0x10	; 16
 2c0:	91 ab       	std	Z+49, r25	; 0x31
 2c2:	98 e1       	ldi	r25, 0x18	; 24
 2c4:	91 af       	std	Z+57, r25	; 0x39
 2c6:	91 96       	adiw	r26, 0x21	; 33
 2c8:	1c 92       	st	X, r1
 2ca:	91 97       	sbiw	r26, 0x21	; 33
 2cc:	99 96       	adiw	r26, 0x29	; 41
 2ce:	8c 93       	st	X, r24
 2d0:	99 97       	sbiw	r26, 0x29	; 41
 2d2:	80 e2       	ldi	r24, 0x20	; 32
 2d4:	d1 96       	adiw	r26, 0x31	; 49
 2d6:	8c 93       	st	X, r24
 2d8:	d1 97       	sbiw	r26, 0x31	; 49
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	80 83       	st	Z, r24
 2de:	8c 93       	st	X, r24
 2e0:	80 81       	ld	r24, Z
 2e2:	80 6c       	ori	r24, 0xC0	; 192
 2e4:	80 83       	st	Z, r24
 2e6:	8c 91       	ld	r24, X
 2e8:	80 68       	ori	r24, 0x80	; 128
 2ea:	8c 93       	st	X, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	8c 63       	ori	r24, 0x3C	; 60
 2f0:	80 83       	st	Z, r24
 2f2:	8c 91       	ld	r24, X
 2f4:	8c 61       	ori	r24, 0x1C	; 28
 2f6:	8c 93       	st	X, r24
 2f8:	86 81       	ldd	r24, Z+6	; 0x06
 2fa:	8f 70       	andi	r24, 0x0F	; 15
 2fc:	16 96       	adiw	r26, 0x06	; 6
 2fe:	9c 91       	ld	r25, X
 300:	9f 70       	andi	r25, 0x0F	; 15
 302:	06 c0       	rjmp	.+12     	; 0x310 <read_voltages+0x78>
 304:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7be206>
 308:	8f 70       	andi	r24, 0x0F	; 15
 30a:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
 30e:	9f 70       	andi	r25, 0x0F	; 15
 310:	8f 30       	cpi	r24, 0x0F	; 15
 312:	11 f0       	breq	.+4      	; 0x318 <read_voltages+0x80>
 314:	97 30       	cpi	r25, 0x07	; 7
 316:	b1 f7       	brne	.-20     	; 0x304 <read_voltages+0x6c>
 318:	00 e0       	ldi	r16, 0x00	; 0
 31a:	12 e0       	ldi	r17, 0x02	; 2
 31c:	f8 01       	movw	r30, r16
 31e:	64 a1       	ldd	r22, Z+36	; 0x24
 320:	75 a1       	ldd	r23, Z+37	; 0x25
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
 32a:	c7 e2       	ldi	r28, 0x27	; 39
 32c:	d7 e4       	ldi	r29, 0x47	; 71
 32e:	68 83       	st	Y, r22
 330:	79 83       	std	Y+1, r23	; 0x01
 332:	8a 83       	std	Y+2, r24	; 0x02
 334:	9b 83       	std	Y+3, r25	; 0x03
 336:	f8 01       	movw	r30, r16
 338:	64 a5       	ldd	r22, Z+44	; 0x2c
 33a:	75 a5       	ldd	r23, Z+45	; 0x2d
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
 344:	6c 83       	std	Y+4, r22	; 0x04
 346:	7d 83       	std	Y+5, r23	; 0x05
 348:	8e 83       	std	Y+6, r24	; 0x06
 34a:	9f 83       	std	Y+7, r25	; 0x07
 34c:	f8 01       	movw	r30, r16
 34e:	64 a9       	ldd	r22, Z+52	; 0x34
 350:	75 a9       	ldd	r23, Z+53	; 0x35
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
 35a:	68 87       	std	Y+8, r22	; 0x08
 35c:	79 87       	std	Y+9, r23	; 0x09
 35e:	8a 87       	std	Y+10, r24	; 0x0a
 360:	9b 87       	std	Y+11, r25	; 0x0b
 362:	f8 01       	movw	r30, r16
 364:	64 ad       	ldd	r22, Z+60	; 0x3c
 366:	75 ad       	ldd	r23, Z+61	; 0x3d
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
 370:	6c 87       	std	Y+12, r22	; 0x0c
 372:	7d 87       	std	Y+13, r23	; 0x0d
 374:	8e 87       	std	Y+14, r24	; 0x0e
 376:	9f 87       	std	Y+15, r25	; 0x0f
 378:	00 e4       	ldi	r16, 0x40	; 64
 37a:	12 e0       	ldi	r17, 0x02	; 2
 37c:	f8 01       	movw	r30, r16
 37e:	64 a1       	ldd	r22, Z+36	; 0x24
 380:	75 a1       	ldd	r23, Z+37	; 0x25
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
 38a:	68 8b       	std	Y+16, r22	; 0x10
 38c:	79 8b       	std	Y+17, r23	; 0x11
 38e:	8a 8b       	std	Y+18, r24	; 0x12
 390:	9b 8b       	std	Y+19, r25	; 0x13
 392:	f8 01       	movw	r30, r16
 394:	64 a5       	ldd	r22, Z+44	; 0x2c
 396:	75 a5       	ldd	r23, Z+45	; 0x2d
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
 3a0:	6c 8b       	std	Y+20, r22	; 0x14
 3a2:	7d 8b       	std	Y+21, r23	; 0x15
 3a4:	8e 8b       	std	Y+22, r24	; 0x16
 3a6:	9f 8b       	std	Y+23, r25	; 0x17
 3a8:	f8 01       	movw	r30, r16
 3aa:	64 a9       	ldd	r22, Z+52	; 0x34
 3ac:	75 a9       	ldd	r23, Z+53	; 0x35
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
 3b6:	68 8f       	std	Y+24, r22	; 0x18
 3b8:	79 8f       	std	Y+25, r23	; 0x19
 3ba:	8a 8f       	std	Y+26, r24	; 0x1a
 3bc:	9b 8f       	std	Y+27, r25	; 0x1b
 3be:	10 e0       	ldi	r17, 0x00	; 0
 3c0:	23 c0       	rjmp	.+70     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3c2:	c1 2f       	mov	r28, r17
 3c4:	d0 e0       	ldi	r29, 0x00	; 0
 3c6:	cc 0f       	add	r28, r28
 3c8:	dd 1f       	adc	r29, r29
 3ca:	cc 0f       	add	r28, r28
 3cc:	dd 1f       	adc	r29, r29
 3ce:	c9 5d       	subi	r28, 0xD9	; 217
 3d0:	d8 4b       	sbci	r29, 0xB8	; 184
 3d2:	68 81       	ld	r22, Y
 3d4:	79 81       	ldd	r23, Y+1	; 0x01
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	9b 81       	ldd	r25, Y+3	; 0x03
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	40 e4       	ldi	r20, 0x40	; 64
 3e0:	50 e4       	ldi	r21, 0x40	; 64
 3e2:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__mulsf3>
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 ef       	ldi	r19, 0xF0	; 240
 3ea:	4f e7       	ldi	r20, 0x7F	; 127
 3ec:	55 e4       	ldi	r21, 0x45	; 69
 3ee:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__divsf3>
 3f2:	2a e9       	ldi	r18, 0x9A	; 154
 3f4:	39 e9       	ldi	r19, 0x99	; 153
 3f6:	49 e9       	ldi	r20, 0x99	; 153
 3f8:	5e e3       	ldi	r21, 0x3E	; 62
 3fa:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__subsf3>
 3fe:	68 83       	st	Y, r22
 400:	79 83       	std	Y+1, r23	; 0x01
 402:	8a 83       	std	Y+2, r24	; 0x02
 404:	9b 83       	std	Y+3, r25	; 0x03
 406:	1f 5f       	subi	r17, 0xFF	; 255
 408:	18 30       	cpi	r17, 0x08	; 8
 40a:	d8 f2       	brcs	.-74     	; 0x3c2 <read_voltages+0x12a>
 40c:	a0 e0       	ldi	r26, 0x00	; 0
 40e:	b2 e0       	ldi	r27, 0x02	; 2
 410:	16 96       	adiw	r26, 0x06	; 6
 412:	8c 91       	ld	r24, X
 414:	16 97       	sbiw	r26, 0x06	; 6
 416:	8f 60       	ori	r24, 0x0F	; 15
 418:	16 96       	adiw	r26, 0x06	; 6
 41a:	8c 93       	st	X, r24
 41c:	16 97       	sbiw	r26, 0x06	; 6
 41e:	e0 e4       	ldi	r30, 0x40	; 64
 420:	f2 e0       	ldi	r31, 0x02	; 2
 422:	86 81       	ldd	r24, Z+6	; 0x06
 424:	8f 60       	ori	r24, 0x0F	; 15
 426:	86 83       	std	Z+6, r24	; 0x06
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	14 96       	adiw	r26, 0x04	; 4
 42c:	8c 93       	st	X, r24
 42e:	14 97       	sbiw	r26, 0x04	; 4
 430:	84 83       	std	Z+4, r24	; 0x04
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	8c 93       	st	X, r24
 436:	80 83       	st	Z, r24
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	08 95       	ret

00000442 <TIMEOUT>:
	return average_I;
}

void TIMEOUT(void)
{
	start_DELAY();
 442:	0e 94 3f 01 	call	0x27e	; 0x27e <start_DELAY>
	while(TCD1.CNT<50000)															//Do nothing for 0.1sec
 446:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <__TEXT_REGION_LENGTH__+0x7be960>
 44a:	90 91 61 09 	lds	r25, 0x0961	; 0x800961 <__TEXT_REGION_LENGTH__+0x7be961>
 44e:	80 35       	cpi	r24, 0x50	; 80
 450:	93 4c       	sbci	r25, 0xC3	; 195
 452:	c8 f3       	brcs	.-14     	; 0x446 <TIMEOUT+0x4>
	{
		//Do nothing
	}
	stop_DELAY();
 454:	0e 94 46 01 	call	0x28c	; 0x28c <stop_DELAY>
 458:	08 95       	ret

0000045a <read_IT>:
		writeF_UART(0.99999);														//Send error message 
	}	
}

void read_IT(void)
{
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
	
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCA clock speed to 62.5kHz
 45e:	e0 e0       	ldi	r30, 0x00	; 0
 460:	f2 e0       	ldi	r31, 0x02	; 2
 462:	83 e0       	ldi	r24, 0x03	; 3
 464:	84 83       	std	Z+4, r24	; 0x04
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCB clock speed to 62.5kHz
 466:	a0 e4       	ldi	r26, 0x40	; 64
 468:	b2 e0       	ldi	r27, 0x02	; 2
 46a:	14 96       	adiw	r26, 0x04	; 4
 46c:	8c 93       	st	X, r24
 46e:	14 97       	sbiw	r26, 0x04	; 4
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;										//Set ADCA CH0 to Pin A4 as input for I_external
 470:	80 e2       	ldi	r24, 0x20	; 32
 472:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;										//Set ADCA CH1 to Pin A5 as input for I_battery
 474:	88 e2       	ldi	r24, 0x28	; 40
 476:	81 a7       	std	Z+41, r24	; 0x29

	ADCA.CTRLA |= ADC_FLUSH_bm;														//Enables ADCA
 478:	80 81       	ld	r24, Z
 47a:	82 60       	ori	r24, 0x02	; 2
 47c:	80 83       	st	Z, r24
	ADCB.CTRLA |= ADC_FLUSH_bm;														//Enables ADCB
 47e:	8c 91       	ld	r24, X
 480:	82 60       	ori	r24, 0x02	; 2
 482:	8c 93       	st	X, r24
	
	ADCA.CTRLA |= ADC_ENABLE_bm;													//Enables ADCA
 484:	80 81       	ld	r24, Z
 486:	81 60       	ori	r24, 0x01	; 1
 488:	80 83       	st	Z, r24
	ADCB.CTRLA |= ADC_ENABLE_bm;													//Enables ADCB
 48a:	8c 91       	ld	r24, X
 48c:	81 60       	ori	r24, 0x01	; 1
 48e:	8c 93       	st	X, r24
	
	ADCA.CTRLA |= (0x03 << 2);														//Start ADCA Conversion first two channels
 490:	80 81       	ld	r24, Z
 492:	8c 60       	ori	r24, 0x0C	; 12
 494:	80 83       	st	Z, r24
	ADCB.CTRLA |= (0x01 << 2);														//Start ADCB conversion CH0
 496:	8c 91       	ld	r24, X
 498:	84 60       	ori	r24, 0x04	; 4
 49a:	8c 93       	st	X, r24
	
	while( !((ADCA.INTFLAGS & 0x3) & (ADCB.INTFLAGS & 0x01)))                       //Wait for ADC conversion
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <read_IT+0x48>
	
	TIMEOUT();
 49e:	0e 94 21 02 	call	0x442	; 0x442 <TIMEOUT>
	ADCB.CTRLA |= ADC_ENABLE_bm;													//Enables ADCB
	
	ADCA.CTRLA |= (0x03 << 2);														//Start ADCA Conversion first two channels
	ADCB.CTRLA |= (0x01 << 2);														//Start ADCB conversion CH0
	
	while( !((ADCA.INTFLAGS & 0x3) & (ADCB.INTFLAGS & 0x01)))                       //Wait for ADC conversion
 4a2:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7be206>
 4a6:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
 4aa:	81 70       	andi	r24, 0x01	; 1
 4ac:	89 23       	and	r24, r25
 4ae:	b9 f3       	breq	.-18     	; 0x49e <read_IT+0x44>
	
	TIMEOUT();
	
	IT[0] = (int16_t)ADCA.CH0.RES;													//Read I_external
 4b0:	e0 e0       	ldi	r30, 0x00	; 0
 4b2:	f2 e0       	ldi	r31, 0x02	; 2
 4b4:	84 a1       	ldd	r24, Z+36	; 0x24
 4b6:	95 a1       	ldd	r25, Z+37	; 0x25
 4b8:	c8 e4       	ldi	r28, 0x48	; 72
 4ba:	d7 e4       	ldi	r29, 0x47	; 71
 4bc:	88 83       	st	Y, r24
 4be:	99 83       	std	Y+1, r25	; 0x01
	IT[1] = (int16_t)ADCA.CH1.RES;													//Read I_battery
 4c0:	84 a5       	ldd	r24, Z+44	; 0x2c
 4c2:	95 a5       	ldd	r25, Z+45	; 0x2d
 4c4:	8a 83       	std	Y+2, r24	; 0x02
 4c6:	9b 83       	std	Y+3, r25	; 0x03
	
	IT[2] = (int16_t)ADCB.CH0.RES;													//Read Temp_ambient
 4c8:	a0 e4       	ldi	r26, 0x40	; 64
 4ca:	b2 e0       	ldi	r27, 0x02	; 2
 4cc:	94 96       	adiw	r26, 0x24	; 36
 4ce:	8d 91       	ld	r24, X+
 4d0:	9c 91       	ld	r25, X
 4d2:	95 97       	sbiw	r26, 0x25	; 37
 4d4:	8c 83       	std	Y+4, r24	; 0x04
 4d6:	9d 83       	std	Y+5, r25	; 0x05
	
	ADCA.INTFLAGS |= (0x03);														//clear interrupt flags ADCA
 4d8:	86 81       	ldd	r24, Z+6	; 0x06
 4da:	83 60       	ori	r24, 0x03	; 3
 4dc:	86 83       	std	Z+6, r24	; 0x06
	ADCB.INTFLAGS |= (0x01);														//clear interrupt flags ADCB
 4de:	16 96       	adiw	r26, 0x06	; 6
 4e0:	8c 91       	ld	r24, X
 4e2:	16 97       	sbiw	r26, 0x06	; 6
 4e4:	81 60       	ori	r24, 0x01	; 1
 4e6:	16 96       	adiw	r26, 0x06	; 6
 4e8:	8c 93       	st	X, r24
}
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <read_supply_ext>:
	dac_data = (dac_output*4095)/DAC_VREF;											//calculate dac_channel_data for desired DAC output voltage
	return dac_data;
}

uint16_t read_supply_ext(void)
{
 4f0:	0f 93       	push	r16
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
 4fc:	64 97       	sbiw	r28, 0x14	; 20
 4fe:	cd bf       	out	0x3d, r28	; 61
 500:	de bf       	out	0x3e, r29	; 62
	uint16_t current[10];
	uint16_t average_I;
	uint16_t sum = 0;																//Big enough sum of 10 12bit uints;
	
	PORTB_OUTSET = PIN2_bm;															//supply bat
 502:	84 e0       	ldi	r24, 0x04	; 4
 504:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
	TIMEOUT();
 508:	0e 94 21 02 	call	0x442	; 0x442 <TIMEOUT>
	PORTB_OUTCLR = PIN3_bm;															//disable ext
 50c:	88 e0       	ldi	r24, 0x08	; 8
 50e:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
	TIMEOUT();
 512:	0e 94 21 02 	call	0x442	; 0x442 <TIMEOUT>
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
 516:	00 e0       	ldi	r16, 0x00	; 0
 518:	10 e0       	ldi	r17, 0x00	; 0
 51a:	15 c0       	rjmp	.+42     	; 0x546 <read_supply_ext+0x56>
	{
		read_IT();
 51c:	0e 94 2d 02 	call	0x45a	; 0x45a <read_IT>
		current[i] = IT[0];
 520:	80 91 48 47 	lds	r24, 0x4748	; 0x804748 <IT>
 524:	90 91 49 47 	lds	r25, 0x4749	; 0x804749 <IT+0x1>
 528:	f8 01       	movw	r30, r16
 52a:	ee 0f       	add	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	21 e0       	ldi	r18, 0x01	; 1
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	2c 0f       	add	r18, r28
 534:	3d 1f       	adc	r19, r29
 536:	e2 0f       	add	r30, r18
 538:	f3 1f       	adc	r31, r19
 53a:	80 83       	st	Z, r24
 53c:	91 83       	std	Z+1, r25	; 0x01
		TIMEOUT();
 53e:	0e 94 21 02 	call	0x442	; 0x442 <TIMEOUT>
	PORTB_OUTSET = PIN2_bm;															//supply bat
	TIMEOUT();
	PORTB_OUTCLR = PIN3_bm;															//disable ext
	TIMEOUT();
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
 542:	0f 5f       	subi	r16, 0xFF	; 255
 544:	1f 4f       	sbci	r17, 0xFF	; 255
 546:	0a 30       	cpi	r16, 0x0A	; 10
 548:	11 05       	cpc	r17, r1
 54a:	44 f3       	brlt	.-48     	; 0x51c <read_supply_ext+0x2c>
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	20 e0       	ldi	r18, 0x00	; 0
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	0e c0       	rjmp	.+28     	; 0x572 <read_supply_ext+0x82>
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
	{
		sum += current[i];
 556:	fc 01       	movw	r30, r24
 558:	ee 0f       	add	r30, r30
 55a:	ff 1f       	adc	r31, r31
 55c:	41 e0       	ldi	r20, 0x01	; 1
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	4c 0f       	add	r20, r28
 562:	5d 1f       	adc	r21, r29
 564:	e4 0f       	add	r30, r20
 566:	f5 1f       	adc	r31, r21
 568:	40 81       	ld	r20, Z
 56a:	51 81       	ldd	r21, Z+1	; 0x01
 56c:	24 0f       	add	r18, r20
 56e:	35 1f       	adc	r19, r21
		read_IT();
		current[i] = IT[0];
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	8a 30       	cpi	r24, 0x0A	; 10
 574:	91 05       	cpc	r25, r1
 576:	7c f3       	brlt	.-34     	; 0x556 <read_supply_ext+0x66>
	{
		sum += current[i];
	}
	
	average_I = sum/10;
 578:	ad ec       	ldi	r26, 0xCD	; 205
 57a:	bc ec       	ldi	r27, 0xCC	; 204
 57c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__umulhisi3>
	
	return average_I;
}
 580:	96 95       	lsr	r25
 582:	87 95       	ror	r24
 584:	96 95       	lsr	r25
 586:	87 95       	ror	r24
 588:	96 95       	lsr	r25
 58a:	87 95       	ror	r24
 58c:	64 96       	adiw	r28, 0x14	; 20
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	de bf       	out	0x3e, r29	; 62
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	08 95       	ret

0000059c <write_ext>:
	
	write8_UART(hbyte);																//Send high byte											
}

void write_ext(void)
{
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
	uint16_t I_ext;
	uint16_t bit_test;
	uint8_t hbyte;																	//High 8 bits I_bat
	uint8_t lbyte;																	//Low 8 bits I_bat
	
	I_ext = read_supply_ext();														//Enables battery supply and reads the average current
 5a0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <read_supply_ext>
 5a4:	ec 01       	movw	r28, r24
	lbyte = I_ext&(0xFF);															//Check for set bits lower byte
	
	write8_UART(lbyte);																//Send lower byte
 5a6:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
	
	bit_test = I_ext&(0xFF00);														//test 8 set bits high byte
 5aa:	cc 27       	eor	r28, r28
	bit_test >>= 8;																	//Bit shift high byte to low byte register
	hbyte = (uint8_t)bit_test;														//typecast to 1 register
	
	write8_UART(hbyte);																//Send high byte
 5ac:	8d 2f       	mov	r24, r29
 5ae:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
}
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <read_supply_bat>:
	write8_UART(hbyte);																//Send high byte
}
#endif

uint16_t read_supply_bat(void)
{
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	64 97       	sbiw	r28, 0x14	; 20
 5c6:	cd bf       	out	0x3d, r28	; 61
 5c8:	de bf       	out	0x3e, r29	; 62
	uint16_t current[10];
	uint16_t average_I;
	uint16_t sum = 0;																//Big enough sum of 10 12bit uints;
	
	//supply_bat();
	PORTB_OUTSET = PIN3_bm;															//enable ext
 5ca:	88 e0       	ldi	r24, 0x08	; 8
 5cc:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
	TIMEOUT();
 5d0:	0e 94 21 02 	call	0x442	; 0x442 <TIMEOUT>
	PORTB_OUTCLR = PIN2_bm;															//disable bat
 5d4:	84 e0       	ldi	r24, 0x04	; 4
 5d6:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
	TIMEOUT();
 5da:	0e 94 21 02 	call	0x442	; 0x442 <TIMEOUT>
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
 5de:	00 e0       	ldi	r16, 0x00	; 0
 5e0:	10 e0       	ldi	r17, 0x00	; 0
 5e2:	15 c0       	rjmp	.+42     	; 0x60e <read_supply_bat+0x56>
	{
		read_IT();
 5e4:	0e 94 2d 02 	call	0x45a	; 0x45a <read_IT>
		current[i] = IT[1];
 5e8:	80 91 4a 47 	lds	r24, 0x474A	; 0x80474a <IT+0x2>
 5ec:	90 91 4b 47 	lds	r25, 0x474B	; 0x80474b <IT+0x3>
 5f0:	f8 01       	movw	r30, r16
 5f2:	ee 0f       	add	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	21 e0       	ldi	r18, 0x01	; 1
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	2c 0f       	add	r18, r28
 5fc:	3d 1f       	adc	r19, r29
 5fe:	e2 0f       	add	r30, r18
 600:	f3 1f       	adc	r31, r19
 602:	80 83       	st	Z, r24
 604:	91 83       	std	Z+1, r25	; 0x01
		TIMEOUT();
 606:	0e 94 21 02 	call	0x442	; 0x442 <TIMEOUT>
	PORTB_OUTSET = PIN3_bm;															//enable ext
	TIMEOUT();
	PORTB_OUTCLR = PIN2_bm;															//disable bat
	TIMEOUT();
	
	for(int i = 0; i < 10; i++)														//Get 10 samples over 1 second
 60a:	0f 5f       	subi	r16, 0xFF	; 255
 60c:	1f 4f       	sbci	r17, 0xFF	; 255
 60e:	0a 30       	cpi	r16, 0x0A	; 10
 610:	11 05       	cpc	r17, r1
 612:	44 f3       	brlt	.-48     	; 0x5e4 <read_supply_bat+0x2c>
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	20 e0       	ldi	r18, 0x00	; 0
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	0e c0       	rjmp	.+28     	; 0x63a <read_supply_bat+0x82>
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
	{
		sum += current[i];
 61e:	fc 01       	movw	r30, r24
 620:	ee 0f       	add	r30, r30
 622:	ff 1f       	adc	r31, r31
 624:	41 e0       	ldi	r20, 0x01	; 1
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	4c 0f       	add	r20, r28
 62a:	5d 1f       	adc	r21, r29
 62c:	e4 0f       	add	r30, r20
 62e:	f5 1f       	adc	r31, r21
 630:	40 81       	ld	r20, Z
 632:	51 81       	ldd	r21, Z+1	; 0x01
 634:	24 0f       	add	r18, r20
 636:	35 1f       	adc	r19, r21
		read_IT();
		current[i] = IT[1];
		TIMEOUT();
	}
	
	for(int i = 0; i < 10; i++)
 638:	01 96       	adiw	r24, 0x01	; 1
 63a:	8a 30       	cpi	r24, 0x0A	; 10
 63c:	91 05       	cpc	r25, r1
 63e:	7c f3       	brlt	.-34     	; 0x61e <read_supply_bat+0x66>
	{
		sum += current[i];
	}
	
	average_I = sum/10;
 640:	ad ec       	ldi	r26, 0xCD	; 205
 642:	bc ec       	ldi	r27, 0xCC	; 204
 644:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__umulhisi3>
	
	return average_I;
}
 648:	96 95       	lsr	r25
 64a:	87 95       	ror	r24
 64c:	96 95       	lsr	r25
 64e:	87 95       	ror	r24
 650:	96 95       	lsr	r25
 652:	87 95       	ror	r24
 654:	64 96       	adiw	r28, 0x14	; 20
 656:	cd bf       	out	0x3d, r28	; 61
 658:	de bf       	out	0x3e, r29	; 62
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	0f 91       	pop	r16
 662:	08 95       	ret

00000664 <write_bat>:
	
	return average_I;
}

void write_bat(void)
{
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
	uint16_t I_bat;
	uint16_t bit_test;
	uint8_t hbyte;																	//High 8 bits I_bat
	uint8_t lbyte;																	//Low 8 bits I_bat
	
	I_bat = read_supply_bat();														//Enables battery supply and reads the average current
 668:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <read_supply_bat>
 66c:	ec 01       	movw	r28, r24
	lbyte = I_bat&(0xFF);															//Check for set bits lower byte
	
	write8_UART(lbyte);																//Send lower byte
 66e:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
	
	bit_test = I_bat&(0xFF00);														//test 8 set bits high byte
 672:	cc 27       	eor	r28, r28
	bit_test >>= 8;																	//Bit shift high byte to low byte register
	hbyte = (uint8_t)bit_test;														//typecast to 1 register
	
	write8_UART(hbyte);																//Send high byte											
 674:	8d 2f       	mov	r24, r29
 676:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
}
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <LPM_P_OFF>:
}
#endif

void LPM_P_OFF(void)
{
	PORTB_OUTCLR = PIN2_bm;															//turn battery supply off
 680:	e6 e2       	ldi	r30, 0x26	; 38
 682:	f6 e0       	ldi	r31, 0x06	; 6
 684:	84 e0       	ldi	r24, 0x04	; 4
 686:	80 83       	st	Z, r24
	PORTB_OUTCLR = PIN3_bm;															//turn external supply off 
 688:	88 e0       	ldi	r24, 0x08	; 8
 68a:	80 83       	st	Z, r24
 68c:	08 95       	ret

0000068e <writeF_UART>:
}

void writeF_UART(float data)
{
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	00 d0       	rcall	.+0      	; 0x694 <writeF_UART+0x6>
 694:	1f 92       	push	r1
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
 69a:	69 83       	std	Y+1, r22	; 0x01
 69c:	7a 83       	std	Y+2, r23	; 0x02
 69e:	8b 83       	std	Y+3, r24	; 0x03
 6a0:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t *sendarray;
	sendarray = (uint8_t*)(&data);													//converts float to 4 seperate bytes in send array
	write8_UART(sendarray[0]);
 6a2:	86 2f       	mov	r24, r22
 6a4:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
	write8_UART(sendarray[1]);
 6a8:	8a 81       	ldd	r24, Y+2	; 0x02
 6aa:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
	write8_UART(sendarray[2]);
 6ae:	8b 81       	ldd	r24, Y+3	; 0x03
 6b0:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
	write8_UART(sendarray[3]);
 6b4:	8c 81       	ldd	r24, Y+4	; 0x04
 6b6:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
}
 6ba:	24 96       	adiw	r28, 0x04	; 4
 6bc:	cd bf       	out	0x3d, r28	; 61
 6be:	de bf       	out	0x3e, r29	; 62
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <fread_DO>:
	ADCA.CTRLA = ADC_FLUSH_bm;														//Flushes ADCA
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
}

void fread_DO(void)
{
 6c6:	cf 92       	push	r12
 6c8:	df 92       	push	r13
 6ca:	ef 92       	push	r14
 6cc:	ff 92       	push	r15
 6ce:	0f 93       	push	r16
 6d0:	1f 93       	push	r17
 6d2:	cf 93       	push	r28
 6d4:	df 93       	push	r29
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
 6da:	e0 97       	sbiw	r28, 0x30	; 48
 6dc:	cd bf       	out	0x3d, r28	; 61
 6de:	de bf       	out	0x3e, r29	; 62
	uint8_t Npulses = 0;															//keeps track of detected pulses
	uint32_t sum = 0;																//used for calculating average amount of samples
	float avrageT;																	//average pulse frequency in samples
	uint8_t *sendarray;																//creates an array with 4*8bit values from a float
			
	ADCA.PRESCALER = ADC_PRESCALER_DIV8_gc;											//2MHz system clock use: ADCA clock speed to 62.5kHz
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__TEXT_REGION_LENGTH__+0x7be204>
	ADCB.PRESCALER = ADC_PRESCALER_DIV8_gc;											//2MHz system clock use: ADCB clock speed to 62.5kHz		
 6e6:	e0 e4       	ldi	r30, 0x40	; 64
 6e8:	f2 e0       	ldi	r31, 0x02	; 2
 6ea:	84 83       	std	Z+4, r24	; 0x04
		
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
 6ec:	92 e0       	ldi	r25, 0x02	; 2
 6ee:	90 83       	st	Z, r25
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;										//Set ADCB CH2 to pin B5 as input for D0
 6f0:	98 e2       	ldi	r25, 0x28	; 40
 6f2:	91 a3       	std	Z+33, r25	; 0x21
	ADCB.CTRLA = ADC_ENABLE_bm;														//Enables ADCB
 6f4:	80 83       	st	Z, r24
	
	for(uint32_t i = 0; i < SAMPLE_WINDOW; i++)
 6f6:	40 e0       	ldi	r20, 0x00	; 0
 6f8:	50 e0       	ldi	r21, 0x00	; 0
 6fa:	ba 01       	movw	r22, r20
 6fc:	1b c0       	rjmp	.+54     	; 0x734 <fread_DO+0x6e>
	{
		ADCB.CTRLA |= (0x07 << 2);													//Start ADCB conversion on first channel
 6fe:	e0 e4       	ldi	r30, 0x40	; 64
 700:	f2 e0       	ldi	r31, 0x02	; 2
 702:	80 81       	ld	r24, Z
 704:	8c 61       	ori	r24, 0x1C	; 28
 706:	80 83       	st	Z, r24
		while (!(ADCB.INTFLAGS & 0x1))												//wait for conversion
 708:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
 70c:	80 ff       	sbrs	r24, 0
 70e:	fc cf       	rjmp	.-8      	; 0x708 <fread_DO+0x42>
		{
			//do nothing
		}
		
		D0_raw[i] = (int16_t)ADCB.CH0.RES;											//fill array with raw data
 710:	e0 e4       	ldi	r30, 0x40	; 64
 712:	f2 e0       	ldi	r31, 0x02	; 2
 714:	84 a1       	ldd	r24, Z+36	; 0x24
 716:	95 a1       	ldd	r25, Z+37	; 0x25
 718:	da 01       	movw	r26, r20
 71a:	aa 0f       	add	r26, r26
 71c:	bb 1f       	adc	r27, r27
 71e:	ab 5e       	subi	r26, 0xEB	; 235
 720:	bf 4d       	sbci	r27, 0xDF	; 223
 722:	8d 93       	st	X+, r24
 724:	9c 93       	st	X, r25
		ADCB.INTFLAGS |= (0x0F);													//clear interrupt flags ADCB
 726:	86 81       	ldd	r24, Z+6	; 0x06
 728:	8f 60       	ori	r24, 0x0F	; 15
 72a:	86 83       	std	Z+6, r24	; 0x06
		
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;										//Set ADCB CH2 to pin B5 as input for D0
	ADCB.CTRLA = ADC_ENABLE_bm;														//Enables ADCB
	
	for(uint32_t i = 0; i < SAMPLE_WINDOW; i++)
 72c:	4f 5f       	subi	r20, 0xFF	; 255
 72e:	5f 4f       	sbci	r21, 0xFF	; 255
 730:	6f 4f       	sbci	r22, 0xFF	; 255
 732:	7f 4f       	sbci	r23, 0xFF	; 255
 734:	48 38       	cpi	r20, 0x88	; 136
 736:	23 e1       	ldi	r18, 0x13	; 19
 738:	52 07       	cpc	r21, r18
 73a:	61 05       	cpc	r22, r1
 73c:	71 05       	cpc	r23, r1
 73e:	f8 f2       	brcs	.-66     	; 0x6fe <fread_DO+0x38>
 740:	c1 2c       	mov	r12, r1
 742:	d1 2c       	mov	r13, r1
 744:	76 01       	movw	r14, r12
 746:	12 c0       	rjmp	.+36     	; 0x76c <fread_DO+0xa6>
		ADCB.INTFLAGS |= (0x0F);													//clear interrupt flags ADCB
	}
	
	for(uint32_t i = 0; i < SAMPLE_WINDOW; i++)
	{
		write8_UART((uint8_t)D0_raw[i]);											//debug print low byte
 748:	86 01       	movw	r16, r12
 74a:	00 0f       	add	r16, r16
 74c:	11 1f       	adc	r17, r17
 74e:	0b 5e       	subi	r16, 0xEB	; 235
 750:	1f 4d       	sbci	r17, 0xDF	; 223
 752:	d8 01       	movw	r26, r16
 754:	8c 91       	ld	r24, X
 756:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
		write8_UART((uint8_t)(D0_raw[i]>>8));										//debug print high byte
 75a:	f8 01       	movw	r30, r16
 75c:	81 81       	ldd	r24, Z+1	; 0x01
 75e:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
		
		D0_raw[i] = (int16_t)ADCB.CH0.RES;											//fill array with raw data
		ADCB.INTFLAGS |= (0x0F);													//clear interrupt flags ADCB
	}
	
	for(uint32_t i = 0; i < SAMPLE_WINDOW; i++)
 762:	ff ef       	ldi	r31, 0xFF	; 255
 764:	cf 1a       	sub	r12, r31
 766:	df 0a       	sbc	r13, r31
 768:	ef 0a       	sbc	r14, r31
 76a:	ff 0a       	sbc	r15, r31
 76c:	28 e8       	ldi	r18, 0x88	; 136
 76e:	c2 16       	cp	r12, r18
 770:	23 e1       	ldi	r18, 0x13	; 19
 772:	d2 06       	cpc	r13, r18
 774:	e1 04       	cpc	r14, r1
 776:	f1 04       	cpc	r15, r1
 778:	38 f3       	brcs	.-50     	; 0x748 <fread_DO+0x82>
	{
		write8_UART((uint8_t)D0_raw[i]);											//debug print low byte
		write8_UART((uint8_t)(D0_raw[i]>>8));										//debug print high byte
	}
	
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCA clock speed to 62.5kHz
 77a:	a0 e0       	ldi	r26, 0x00	; 0
 77c:	b2 e0       	ldi	r27, 0x02	; 2
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	14 96       	adiw	r26, 0x04	; 4
 782:	8c 93       	st	X, r24
 784:	14 97       	sbiw	r26, 0x04	; 4
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCB clock speed to 62.5kHz
 786:	e0 e4       	ldi	r30, 0x40	; 64
 788:	f2 e0       	ldi	r31, 0x02	; 2
 78a:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.CTRLA = ADC_FLUSH_bm;														//Flushes ADCA
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	8c 93       	st	X, r24
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
 790:	80 83       	st	Z, r24
void fread_DO(void)
{
	uint8_t hmemory = 1;															//keeps track if high signal is already counted
	uint32_t SamplesRisingEdge[11];													//keeps track of samples at rising edge
	uint32_t cnt = 0;																//counter
	uint8_t Npulses = 0;															//keeps track of detected pulses
 792:	40 e0       	ldi	r20, 0x00	; 0

void fread_DO(void)
{
	uint8_t hmemory = 1;															//keeps track if high signal is already counted
	uint32_t SamplesRisingEdge[11];													//keeps track of samples at rising edge
	uint32_t cnt = 0;																//counter
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	dc 01       	movw	r26, r24
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
}

void fread_DO(void)
{
	uint8_t hmemory = 1;															//keeps track if high signal is already counted
 79a:	51 e0       	ldi	r21, 0x01	; 1
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCB clock speed to 62.5kHz
	
	ADCA.CTRLA = ADC_FLUSH_bm;														//Flushes ADCA
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
	
	while ((cnt<SAMPLE_WINDOW) && (Npulses < 11))
 79c:	2d c0       	rjmp	.+90     	; 0x7f8 <fread_DO+0x132>
	{
		if((D0_raw[cnt] > 1000) && (hmemory > 20))
 79e:	fc 01       	movw	r30, r24
 7a0:	ee 0f       	add	r30, r30
 7a2:	ff 1f       	adc	r31, r31
 7a4:	eb 5e       	subi	r30, 0xEB	; 235
 7a6:	ff 4d       	sbci	r31, 0xDF	; 223
 7a8:	20 81       	ld	r18, Z
 7aa:	31 81       	ldd	r19, Z+1	; 0x01
 7ac:	29 3e       	cpi	r18, 0xE9	; 233
 7ae:	63 e0       	ldi	r22, 0x03	; 3
 7b0:	36 07       	cpc	r19, r22
 7b2:	c0 f0       	brcs	.+48     	; 0x7e4 <fread_DO+0x11e>
 7b4:	55 31       	cpi	r21, 0x15	; 21
 7b6:	b0 f0       	brcs	.+44     	; 0x7e4 <fread_DO+0x11e>
		{
			SamplesRisingEdge[Npulses] = cnt;										//note sample rising edge
 7b8:	e4 2f       	mov	r30, r20
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	ee 0f       	add	r30, r30
 7be:	ff 1f       	adc	r31, r31
 7c0:	ee 0f       	add	r30, r30
 7c2:	ff 1f       	adc	r31, r31
 7c4:	21 e0       	ldi	r18, 0x01	; 1
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	2c 0f       	add	r18, r28
 7ca:	3d 1f       	adc	r19, r29
 7cc:	e2 0f       	add	r30, r18
 7ce:	f3 1f       	adc	r31, r19
 7d0:	80 83       	st	Z, r24
 7d2:	91 83       	std	Z+1, r25	; 0x01
 7d4:	a2 83       	std	Z+2, r26	; 0x02
 7d6:	b3 83       	std	Z+3, r27	; 0x03
			hmemory = 1;															//prevent second trigger on same pulse
			PORTE_OUTSET = PIN4_bm;													//debug pin
 7d8:	20 e1       	ldi	r18, 0x10	; 16
 7da:	20 93 85 06 	sts	0x0685, r18	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
			Npulses++;
 7de:	4f 5f       	subi	r20, 0xFF	; 255
			hmemory = 0;
 7e0:	50 e0       	ldi	r21, 0x00	; 0
 7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <fread_DO+0x12c>
		}
		
		else if ((D0_raw[cnt]<1000))
 7e4:	28 3e       	cpi	r18, 0xE8	; 232
 7e6:	33 40       	sbci	r19, 0x03	; 3
 7e8:	20 f4       	brcc	.+8      	; 0x7f2 <fread_DO+0x12c>
		{
			hmemory++;																//Reset latch
 7ea:	5f 5f       	subi	r21, 0xFF	; 255
			PORTE_OUTCLR = PIN4_bm;													//debug pin
 7ec:	20 e1       	ldi	r18, 0x10	; 16
 7ee:	20 93 86 06 	sts	0x0686, r18	; 0x800686 <__TEXT_REGION_LENGTH__+0x7be686>
		}
		
		cnt++;																		//add cycle
 7f2:	01 96       	adiw	r24, 0x01	; 1
 7f4:	a1 1d       	adc	r26, r1
 7f6:	b1 1d       	adc	r27, r1
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;										//2MHz system clock use: ADCB clock speed to 62.5kHz
	
	ADCA.CTRLA = ADC_FLUSH_bm;														//Flushes ADCA
	ADCB.CTRLA = ADC_FLUSH_bm;														//Flushes ADCB
	
	while ((cnt<SAMPLE_WINDOW) && (Npulses < 11))
 7f8:	88 38       	cpi	r24, 0x88	; 136
 7fa:	e3 e1       	ldi	r30, 0x13	; 19
 7fc:	9e 07       	cpc	r25, r30
 7fe:	a1 05       	cpc	r26, r1
 800:	b1 05       	cpc	r27, r1
 802:	10 f4       	brcc	.+4      	; 0x808 <fread_DO+0x142>
 804:	4b 30       	cpi	r20, 0x0B	; 11
 806:	58 f2       	brcs	.-106    	; 0x79e <fread_DO+0xd8>
		}
		
		cnt++;																		//add cycle
	}
	
	if (Npulses == 11)
 808:	4b 30       	cpi	r20, 0x0B	; 11
 80a:	09 f0       	breq	.+2      	; 0x80e <fread_DO+0x148>
 80c:	52 c0       	rjmp	.+164    	; 0x8b2 <fread_DO+0x1ec>
 80e:	29 c0       	rjmp	.+82     	; 0x862 <fread_DO+0x19c>
	{
		for(int i = 0; i < 9; i++)
		{
			sum = sum + (SamplesRisingEdge[i+2] - SamplesRisingEdge[i+1]);			//calculates sum of trigger intervals
 810:	fc 01       	movw	r30, r24
 812:	32 96       	adiw	r30, 0x02	; 2
 814:	ee 0f       	add	r30, r30
 816:	ff 1f       	adc	r31, r31
 818:	ee 0f       	add	r30, r30
 81a:	ff 1f       	adc	r31, r31
 81c:	41 e0       	ldi	r20, 0x01	; 1
 81e:	50 e0       	ldi	r21, 0x00	; 0
 820:	4c 0f       	add	r20, r28
 822:	5d 1f       	adc	r21, r29
 824:	e4 0f       	add	r30, r20
 826:	f5 1f       	adc	r31, r21
 828:	40 81       	ld	r20, Z
 82a:	51 81       	ldd	r21, Z+1	; 0x01
 82c:	62 81       	ldd	r22, Z+2	; 0x02
 82e:	73 81       	ldd	r23, Z+3	; 0x03
 830:	01 96       	adiw	r24, 0x01	; 1
 832:	fc 01       	movw	r30, r24
 834:	ee 0f       	add	r30, r30
 836:	ff 1f       	adc	r31, r31
 838:	ee 0f       	add	r30, r30
 83a:	ff 1f       	adc	r31, r31
 83c:	a1 e0       	ldi	r26, 0x01	; 1
 83e:	b0 e0       	ldi	r27, 0x00	; 0
 840:	ac 0f       	add	r26, r28
 842:	bd 1f       	adc	r27, r29
 844:	ea 0f       	add	r30, r26
 846:	fb 1f       	adc	r31, r27
 848:	c0 80       	ld	r12, Z
 84a:	d1 80       	ldd	r13, Z+1	; 0x01
 84c:	e2 80       	ldd	r14, Z+2	; 0x02
 84e:	f3 80       	ldd	r15, Z+3	; 0x03
 850:	4c 19       	sub	r20, r12
 852:	5d 09       	sbc	r21, r13
 854:	6e 09       	sbc	r22, r14
 856:	7f 09       	sbc	r23, r15
 858:	04 0f       	add	r16, r20
 85a:	15 1f       	adc	r17, r21
 85c:	26 1f       	adc	r18, r22
 85e:	37 1f       	adc	r19, r23
 860:	05 c0       	rjmp	.+10     	; 0x86c <fread_DO+0x1a6>
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	00 e0       	ldi	r16, 0x00	; 0
 868:	10 e0       	ldi	r17, 0x00	; 0
 86a:	98 01       	movw	r18, r16
		cnt++;																		//add cycle
	}
	
	if (Npulses == 11)
	{
		for(int i = 0; i < 9; i++)
 86c:	89 30       	cpi	r24, 0x09	; 9
 86e:	91 05       	cpc	r25, r1
 870:	7c f2       	brlt	.-98     	; 0x810 <fread_DO+0x14a>
		{
			sum = sum + (SamplesRisingEdge[i+2] - SamplesRisingEdge[i+1]);			//calculates sum of trigger intervals
		}

		avrageT = (float)sum/8;														//calculates average time in samples
 872:	c9 01       	movw	r24, r18
 874:	b8 01       	movw	r22, r16
 876:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
 87a:	20 e0       	ldi	r18, 0x00	; 0
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	40 e0       	ldi	r20, 0x00	; 0
 880:	5e e3       	ldi	r21, 0x3E	; 62
 882:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__mulsf3>
 886:	26 2f       	mov	r18, r22
 888:	46 2f       	mov	r20, r22
 88a:	57 2f       	mov	r21, r23
 88c:	68 2f       	mov	r22, r24
 88e:	79 2f       	mov	r23, r25
 890:	4d a7       	std	Y+45, r20	; 0x2d
 892:	5e a7       	std	Y+46, r21	; 0x2e
 894:	6f a7       	std	Y+47, r22	; 0x2f
 896:	78 ab       	std	Y+48, r23	; 0x30
		sendarray = (uint8_t*)(&avrageT);											//converts float to 4 seperate bytes in send array

		write8_UART(sendarray[0]);
 898:	82 2f       	mov	r24, r18
 89a:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
		write8_UART(sendarray[1]);
 89e:	8e a5       	ldd	r24, Y+46	; 0x2e
 8a0:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
		write8_UART(sendarray[2]);
 8a4:	8f a5       	ldd	r24, Y+47	; 0x2f
 8a6:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
		write8_UART(sendarray[3]);
 8aa:	88 a9       	ldd	r24, Y+48	; 0x30
 8ac:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
 8b0:	06 c0       	rjmp	.+12     	; 0x8be <fread_DO+0x1f8>
	}
	
	else
	{
		writeF_UART(0.99999);														//Send error message 
 8b2:	68 e5       	ldi	r22, 0x58	; 88
 8b4:	7f ef       	ldi	r23, 0xFF	; 255
 8b6:	8f e7       	ldi	r24, 0x7F	; 127
 8b8:	9f e3       	ldi	r25, 0x3F	; 63
 8ba:	0e 94 47 03 	call	0x68e	; 0x68e <writeF_UART>
	}	
}
 8be:	e0 96       	adiw	r28, 0x30	; 48
 8c0:	cd bf       	out	0x3d, r28	; 61
 8c2:	de bf       	out	0x3e, r29	; 62
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	df 90       	pop	r13
 8d2:	cf 90       	pop	r12
 8d4:	08 95       	ret

000008d6 <write_volt>:
	
	write8_UART(hbyte);																//Send high byte
}

void write_volt(void)
{
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
	read_voltages();
 8da:	0e 94 4c 01 	call	0x298	; 0x298 <read_voltages>
	
	for(int i = 0; i < 7; i ++)
 8de:	c0 e0       	ldi	r28, 0x00	; 0
 8e0:	d0 e0       	ldi	r29, 0x00	; 0
 8e2:	0e c0       	rjmp	.+28     	; 0x900 <write_volt+0x2a>
	{
		writeF_UART(VOLT[i]);														//Write voltages to MATLAB app
 8e4:	fe 01       	movw	r30, r28
 8e6:	ee 0f       	add	r30, r30
 8e8:	ff 1f       	adc	r31, r31
 8ea:	ee 0f       	add	r30, r30
 8ec:	ff 1f       	adc	r31, r31
 8ee:	e9 5d       	subi	r30, 0xD9	; 217
 8f0:	f8 4b       	sbci	r31, 0xB8	; 184
 8f2:	60 81       	ld	r22, Z
 8f4:	71 81       	ldd	r23, Z+1	; 0x01
 8f6:	82 81       	ldd	r24, Z+2	; 0x02
 8f8:	93 81       	ldd	r25, Z+3	; 0x03
 8fa:	0e 94 47 03 	call	0x68e	; 0x68e <writeF_UART>

void write_volt(void)
{
	read_voltages();
	
	for(int i = 0; i < 7; i ++)
 8fe:	21 96       	adiw	r28, 0x01	; 1
 900:	c7 30       	cpi	r28, 0x07	; 7
 902:	d1 05       	cpc	r29, r1
 904:	7c f3       	brlt	.-34     	; 0x8e4 <write_volt+0xe>
	{
		writeF_UART(VOLT[i]);														//Write voltages to MATLAB app
	}
	
}
 906:	df 91       	pop	r29
 908:	cf 91       	pop	r28
 90a:	08 95       	ret

0000090c <init_UART>:
#include <stdio.h>
#include "start.h"

void init_UART(void)
{
	PORTE_DIRCLR = PIN2_bm;												//Set RX pin USARTE0 E2 as input
 90c:	84 e0       	ldi	r24, 0x04	; 4
 90e:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x7be682>
	PORTE_DIRSET = PIN3_bm;												//Set TX pin USARTE0 E3 as output
 912:	88 e0       	ldi	r24, 0x08	; 8
 914:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	PORTE_OUTSET = PIN3_bm;												//Set TX pin to high
 918:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	USARTE0.BAUDCTRLB |= (0x09<<4);										//Set BSCALE to -7 for baud 115200
 91c:	e0 ea       	ldi	r30, 0xA0	; 160
 91e:	fa e0       	ldi	r31, 0x0A	; 10
 920:	87 81       	ldd	r24, Z+7	; 0x07
 922:	80 69       	ori	r24, 0x90	; 144
 924:	87 83       	std	Z+7, r24	; 0x07
	USARTE0.BAUDCTRLA |= (0x2E);										//Set BSEL to 2094 for baud 115200
 926:	86 81       	ldd	r24, Z+6	; 0x06
 928:	8e 62       	ori	r24, 0x2E	; 46
 92a:	86 83       	std	Z+6, r24	; 0x06
	USARTE0.BAUDCTRLB |= (0x08);										//Set BSel to 2094 for baud 115200
 92c:	87 81       	ldd	r24, Z+7	; 0x07
 92e:	88 60       	ori	r24, 0x08	; 8
 930:	87 83       	std	Z+7, r24	; 0x07
	
	USARTE0.CTRLC |= (0x03);											//Sets amount of data bits to 8
 932:	85 81       	ldd	r24, Z+5	; 0x05
 934:	83 60       	ori	r24, 0x03	; 3
 936:	85 83       	std	Z+5, r24	; 0x05
	USARTE0.CTRLB |= (0x03<<3);											//Sets the Rx and TX enable bits.
 938:	84 81       	ldd	r24, Z+4	; 0x04
 93a:	88 61       	ori	r24, 0x18	; 24
 93c:	84 83       	std	Z+4, r24	; 0x04
 93e:	08 95       	ret

00000940 <init_CLK>:
}

void init_CLK(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;											// Enable internal 32 MHz oscillator
 940:	e0 e5       	ldi	r30, 0x50	; 80
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	80 81       	ld	r24, Z
 946:	82 60       	ori	r24, 0x02	; 2
 948:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));								// Wait for oscillator is ready
 94a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
 94e:	81 ff       	sbrs	r24, 1
 950:	fc cf       	rjmp	.-8      	; 0x94a <init_CLK+0xa>
	CCP = CCP_IOREG_gc;													// Security signature to modify clock
 952:	88 ed       	ldi	r24, 0xD8	; 216
 954:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;									// Select 32 MHz oscillator
 956:	e0 e4       	ldi	r30, 0x40	; 64
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	80 83       	st	Z, r24
	CLK.PSCTRL = CLK_PSADIV_1_gc;										// Set PSA to 1
 95e:	11 82       	std	Z+1, r1	; 0x01
	CLK.PSCTRL = CLK_PSBCDIV_1_1_gc;									// Set PSB&PSC to 1
 960:	11 82       	std	Z+1, r1	; 0x01
 962:	08 95       	ret

00000964 <init_TIMER>:
}

void init_TIMER(void)
{
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;									//Set timer E0 to normal mode
 964:	e0 e0       	ldi	r30, 0x00	; 0
 966:	fa e0       	ldi	r31, 0x0A	; 10
 968:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;										//Timer is off until clksel is changed
 96a:	10 82       	st	Z, r1
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;									//Set overflow interrupt TCE0 to low level
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	86 83       	std	Z+6, r24	; 0x06
	TCE0.PERL = 0xFF;
 970:	8f ef       	ldi	r24, 0xFF	; 255
 972:	86 a3       	std	Z+38, r24	; 0x26
	TCE0.PERH = 0xFF;													//t = N*(PER + 1)/F_CPU = 0.25
 974:	87 a3       	std	Z+39, r24	; 0x27
 976:	08 95       	ret

00000978 <init_DELAY>:
}

void init_DELAY(void)													//Uses two 16Bit TC's to form 32 Bit one
{
	TCD1.CTRLB = TC_WGMODE_NORMAL_gc;									//Set timer E0 to normal mode
 978:	e0 e4       	ldi	r30, 0x40	; 64
 97a:	f9 e0       	ldi	r31, 0x09	; 9
 97c:	11 82       	std	Z+1, r1	; 0x01
	TCD1.CTRLA = TC_CLKSEL_OFF_gc;										//Timer is off until clksel is changed
 97e:	10 82       	st	Z, r1
	TCD1.PER = 0xFFFF;													//t = N*(PER + 1)/F_CPU = 0.25
 980:	8f ef       	ldi	r24, 0xFF	; 255
 982:	9f ef       	ldi	r25, 0xFF	; 255
 984:	86 a3       	std	Z+38, r24	; 0x26
 986:	97 a3       	std	Z+39, r25	; 0x27
 988:	08 95       	ret

0000098a <init_ADC>:
}

void init_ADC(void)
{
	PORTA_DIRCLR = PIN0_bm;												//VCC_main
 98a:	e2 e0       	ldi	r30, 0x02	; 2
 98c:	f6 e0       	ldi	r31, 0x06	; 6
 98e:	31 e0       	ldi	r19, 0x01	; 1
 990:	30 83       	st	Z, r19
	PORTA_DIRCLR = PIN1_bm;												//CORE_VDD
 992:	22 e0       	ldi	r18, 0x02	; 2
 994:	20 83       	st	Z, r18
	PORTA_DIRCLR = PIN2_bm;												//+1.8VDD
 996:	84 e0       	ldi	r24, 0x04	; 4
 998:	80 83       	st	Z, r24
	PORTA_DIRCLR = PIN3_bm;												//+3.0VIO
 99a:	88 e0       	ldi	r24, 0x08	; 8
 99c:	80 83       	st	Z, r24
	PORTA_DIRCLR = PIN4_bm;												//I_external
 99e:	90 e1       	ldi	r25, 0x10	; 16
 9a0:	90 83       	st	Z, r25
	PORTA_DIRCLR = PIN5_bm;												//I_battery
 9a2:	80 e2       	ldi	r24, 0x20	; 32
 9a4:	80 83       	st	Z, r24
	
	PORTB_DIRCLR = PIN0_bm;												//VPP_2V5
 9a6:	e2 e2       	ldi	r30, 0x22	; 34
 9a8:	f6 e0       	ldi	r31, 0x06	; 6
 9aa:	30 83       	st	Z, r19
	PORTB_DIRCLR = PIN1_bm;												//+1.8VIO
 9ac:	20 83       	st	Z, r18
	PORTB_DIRCLR = PIN4_bm;												//BLE_VDD
 9ae:	90 83       	st	Z, r25
	PORTB_DIRCLR = PIN5_bm;												//D0 samples
 9b0:	80 83       	st	Z, r24
	PORTB_DIRCLR = PIN6_bm;												//D1 samples
 9b2:	80 e4       	ldi	r24, 0x40	; 64
 9b4:	80 83       	st	Z, r24
	
	//ADCA.PRESCALER |= ADC_PRESCALER_DIV8_gc;							//Set ADCA clock speed to 62.5kHz
	//ADCB.PRESCALER |= ADC_PRESCALER_DIV8_gc;							//Set ADCB clock speed to 62.5kHz
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCA clock speed to 62.5kHz
 9b6:	a0 e0       	ldi	r26, 0x00	; 0
 9b8:	b2 e0       	ldi	r27, 0x02	; 2
 9ba:	83 e0       	ldi	r24, 0x03	; 3
 9bc:	14 96       	adiw	r26, 0x04	; 4
 9be:	8c 93       	st	X, r24
 9c0:	14 97       	sbiw	r26, 0x04	; 4
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCB clock speed to 62.5kHz
 9c2:	e0 e4       	ldi	r30, 0x40	; 64
 9c4:	f2 e0       	ldi	r31, 0x02	; 2
 9c6:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCA to 12bit resolution
 9c8:	12 96       	adiw	r26, 0x02	; 2
 9ca:	8c 91       	ld	r24, X
 9cc:	12 97       	sbiw	r26, 0x02	; 2
 9ce:	12 96       	adiw	r26, 0x02	; 2
 9d0:	8c 93       	st	X, r24
 9d2:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCB to 12bit resolution
 9d4:	82 81       	ldd	r24, Z+2	; 0x02
 9d6:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCA reference voltage to internal VCC
 9d8:	12 96       	adiw	r26, 0x02	; 2
 9da:	8c 91       	ld	r24, X
 9dc:	12 97       	sbiw	r26, 0x02	; 2
 9de:	80 61       	ori	r24, 0x10	; 16
 9e0:	12 96       	adiw	r26, 0x02	; 2
 9e2:	8c 93       	st	X, r24
 9e4:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCB reference voltage to internal VCC
 9e6:	82 81       	ldd	r24, Z+2	; 0x02
 9e8:	80 61       	ori	r24, 0x10	; 16
 9ea:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 0 differential input
 9ec:	90 96       	adiw	r26, 0x20	; 32
 9ee:	8c 91       	ld	r24, X
 9f0:	90 97       	sbiw	r26, 0x20	; 32
 9f2:	81 60       	ori	r24, 0x01	; 1
 9f4:	90 96       	adiw	r26, 0x20	; 32
 9f6:	8c 93       	st	X, r24
 9f8:	90 97       	sbiw	r26, 0x20	; 32
	ADCA.CH1.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 1 differential input
 9fa:	98 96       	adiw	r26, 0x28	; 40
 9fc:	8c 91       	ld	r24, X
 9fe:	98 97       	sbiw	r26, 0x28	; 40
 a00:	81 60       	ori	r24, 0x01	; 1
 a02:	98 96       	adiw	r26, 0x28	; 40
 a04:	8c 93       	st	X, r24
 a06:	98 97       	sbiw	r26, 0x28	; 40
	ADCA.CH2.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 2 differential input
 a08:	d0 96       	adiw	r26, 0x30	; 48
 a0a:	8c 91       	ld	r24, X
 a0c:	d0 97       	sbiw	r26, 0x30	; 48
 a0e:	81 60       	ori	r24, 0x01	; 1
 a10:	d0 96       	adiw	r26, 0x30	; 48
 a12:	8c 93       	st	X, r24
 a14:	d0 97       	sbiw	r26, 0x30	; 48
	ADCA.CH3.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 3 differential input
 a16:	d8 96       	adiw	r26, 0x38	; 56
 a18:	8c 91       	ld	r24, X
 a1a:	d8 97       	sbiw	r26, 0x38	; 56
 a1c:	81 60       	ori	r24, 0x01	; 1
 a1e:	d8 96       	adiw	r26, 0x38	; 56
 a20:	8c 93       	st	X, r24
 a22:	d8 97       	sbiw	r26, 0x38	; 56
	
	ADCB.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 0 differential input
 a24:	80 a1       	ldd	r24, Z+32	; 0x20
 a26:	81 60       	ori	r24, 0x01	; 1
 a28:	80 a3       	std	Z+32, r24	; 0x20
	ADCB.CH1.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 1 differential input
 a2a:	80 a5       	ldd	r24, Z+40	; 0x28
 a2c:	81 60       	ori	r24, 0x01	; 1
 a2e:	80 a7       	std	Z+40, r24	; 0x28
	ADCB.CH2.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 2 differential input
 a30:	80 a9       	ldd	r24, Z+48	; 0x30
 a32:	81 60       	ori	r24, 0x01	; 1
 a34:	80 ab       	std	Z+48, r24	; 0x30
	ADCB.CH3.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 3 differential input
 a36:	80 ad       	ldd	r24, Z+56	; 0x38
 a38:	81 60       	ori	r24, 0x01	; 1
 a3a:	80 af       	std	Z+56, r24	; 0x38
	
	ADCA.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 0 reference voltage to internal GND
 a3c:	91 96       	adiw	r26, 0x21	; 33
 a3e:	8c 91       	ld	r24, X
 a40:	91 97       	sbiw	r26, 0x21	; 33
 a42:	87 60       	ori	r24, 0x07	; 7
 a44:	91 96       	adiw	r26, 0x21	; 33
 a46:	8c 93       	st	X, r24
 a48:	91 97       	sbiw	r26, 0x21	; 33
	ADCA.CH1.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 1 reference voltage to internal GND
 a4a:	99 96       	adiw	r26, 0x29	; 41
 a4c:	8c 91       	ld	r24, X
 a4e:	99 97       	sbiw	r26, 0x29	; 41
 a50:	87 60       	ori	r24, 0x07	; 7
 a52:	99 96       	adiw	r26, 0x29	; 41
 a54:	8c 93       	st	X, r24
 a56:	99 97       	sbiw	r26, 0x29	; 41
	ADCA.CH2.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 2 reference voltage to internal GND
 a58:	d1 96       	adiw	r26, 0x31	; 49
 a5a:	8c 91       	ld	r24, X
 a5c:	d1 97       	sbiw	r26, 0x31	; 49
 a5e:	87 60       	ori	r24, 0x07	; 7
 a60:	d1 96       	adiw	r26, 0x31	; 49
 a62:	8c 93       	st	X, r24
 a64:	d1 97       	sbiw	r26, 0x31	; 49
	ADCA.CH3.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 3 reference voltage to internal GND
 a66:	d9 96       	adiw	r26, 0x39	; 57
 a68:	8c 91       	ld	r24, X
 a6a:	d9 97       	sbiw	r26, 0x39	; 57
 a6c:	87 60       	ori	r24, 0x07	; 7
 a6e:	d9 96       	adiw	r26, 0x39	; 57
 a70:	8c 93       	st	X, r24
	
	ADCB.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 0 reference voltage to internal GND
 a72:	81 a1       	ldd	r24, Z+33	; 0x21
 a74:	87 60       	ori	r24, 0x07	; 7
 a76:	81 a3       	std	Z+33, r24	; 0x21
	ADCB.CH1.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 1 reference voltage to internal GND
 a78:	81 a5       	ldd	r24, Z+41	; 0x29
 a7a:	87 60       	ori	r24, 0x07	; 7
 a7c:	81 a7       	std	Z+41, r24	; 0x29
	ADCB.CH2.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 2 reference voltage to internal GND
 a7e:	81 a9       	ldd	r24, Z+49	; 0x31
 a80:	87 60       	ori	r24, 0x07	; 7
 a82:	81 ab       	std	Z+49, r24	; 0x31
	ADCB.CH3.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 3 reference voltage to internal GND
 a84:	81 ad       	ldd	r24, Z+57	; 0x39
 a86:	87 60       	ori	r24, 0x07	; 7
 a88:	81 af       	std	Z+57, r24	; 0x39
 a8a:	08 95       	ret

00000a8c <init_supply>:
}
#endif

void init_supply(void)
{
	PORTB_DIRSET = PIN2_bm;												//Set pin as output to enable ... supply
 a8c:	e1 e2       	ldi	r30, 0x21	; 33
 a8e:	f6 e0       	ldi	r31, 0x06	; 6
 a90:	84 e0       	ldi	r24, 0x04	; 4
 a92:	80 83       	st	Z, r24
	PORTB_DIRSET = PIN3_bm;												//Set pin as output to enable ... supply
 a94:	88 e0       	ldi	r24, 0x08	; 8
 a96:	80 83       	st	Z, r24
 a98:	08 95       	ret

00000a9a <__vector_47>:
char OUTPUTBUF[5];
int16_t OutVar;
uint16_t D0_raw[SAMPLE_WINDOW];

ISR(TCE0_OVF_vect)														//Do something every timer E0 overflow
{
 a9a:	1f 92       	push	r1
 a9c:	0f 92       	push	r0
 a9e:	0f b6       	in	r0, 0x3f	; 63
 aa0:	0f 92       	push	r0
 aa2:	11 24       	eor	r1, r1
 aa4:	8f 93       	push	r24
 aa6:	9f 93       	push	r25
	PTimeOut = 1;														//If TC overflow occurs before collecting pulses stop while loop
 aa8:	81 e0       	ldi	r24, 0x01	; 1
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <PTimeOut>
 ab0:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <PTimeOut+0x1>
}
 ab4:	9f 91       	pop	r25
 ab6:	8f 91       	pop	r24
 ab8:	0f 90       	pop	r0
 aba:	0f be       	out	0x3f, r0	; 63
 abc:	0f 90       	pop	r0
 abe:	1f 90       	pop	r1
 ac0:	18 95       	reti

00000ac2 <__vector_64>:

ISR(PORTD_INT0_vect)													//Do something when PD2 encounters falling edge
{
 ac2:	1f 92       	push	r1
 ac4:	0f 92       	push	r0
 ac6:	0f b6       	in	r0, 0x3f	; 63
 ac8:	0f 92       	push	r0
 aca:	11 24       	eor	r1, r1
 acc:	0b b6       	in	r0, 0x3b	; 59
 ace:	0f 92       	push	r0
 ad0:	2f 93       	push	r18
 ad2:	3f 93       	push	r19
 ad4:	4f 93       	push	r20
 ad6:	8f 93       	push	r24
 ad8:	9f 93       	push	r25
 ada:	ef 93       	push	r30
 adc:	ff 93       	push	r31
	PTime[TC_samples] = (((TCE0.CNTH+1)<<8)+TCE0.CNTL+1);
 ade:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 ae2:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 ae6:	e0 e0       	ldi	r30, 0x00	; 0
 ae8:	fa e0       	ldi	r31, 0x0A	; 10
 aea:	81 a1       	ldd	r24, Z+33	; 0x21
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	01 96       	adiw	r24, 0x01	; 1
 af0:	98 2f       	mov	r25, r24
 af2:	88 27       	eor	r24, r24
 af4:	40 a1       	ldd	r20, Z+32	; 0x20
 af6:	84 0f       	add	r24, r20
 af8:	91 1d       	adc	r25, r1
 afa:	01 96       	adiw	r24, 0x01	; 1
 afc:	f9 01       	movw	r30, r18
 afe:	ee 0f       	add	r30, r30
 b00:	ff 1f       	adc	r31, r31
 b02:	e9 5f       	subi	r30, 0xF9	; 249
 b04:	ff 4d       	sbci	r31, 0xDF	; 223
 b06:	80 83       	st	Z, r24
 b08:	91 83       	std	Z+1, r25	; 0x01
	TC_samples++;
 b0a:	2f 5f       	subi	r18, 0xFF	; 255
 b0c:	3f 4f       	sbci	r19, 0xFF	; 255
 b0e:	20 93 00 20 	sts	0x2000, r18	; 0x802000 <__DATA_REGION_ORIGIN__>
 b12:	30 93 01 20 	sts	0x2001, r19	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
}
 b16:	ff 91       	pop	r31
 b18:	ef 91       	pop	r30
 b1a:	9f 91       	pop	r25
 b1c:	8f 91       	pop	r24
 b1e:	4f 91       	pop	r20
 b20:	3f 91       	pop	r19
 b22:	2f 91       	pop	r18
 b24:	0f 90       	pop	r0
 b26:	0b be       	out	0x3b, r0	; 59
 b28:	0f 90       	pop	r0
 b2a:	0f be       	out	0x3f, r0	; 63
 b2c:	0f 90       	pop	r0
 b2e:	1f 90       	pop	r1
 b30:	18 95       	reti

00000b32 <__vector_65>:

ISR(PORTD_INT1_vect)													//Do something when PD1 encounters falling edge
{
 b32:	1f 92       	push	r1
 b34:	0f 92       	push	r0
 b36:	0f b6       	in	r0, 0x3f	; 63
 b38:	0f 92       	push	r0
 b3a:	11 24       	eor	r1, r1
	//Do something
}
 b3c:	0f 90       	pop	r0
 b3e:	0f be       	out	0x3f, r0	; 63
 b40:	0f 90       	pop	r0
 b42:	1f 90       	pop	r1
 b44:	18 95       	reti

00000b46 <main>:

int main(void)
{
	init_CLK();
 b46:	0e 94 a0 04 	call	0x940	; 0x940 <init_CLK>
	init_TIMER();
 b4a:	0e 94 b2 04 	call	0x964	; 0x964 <init_TIMER>
	init_DELAY();
 b4e:	0e 94 bc 04 	call	0x978	; 0x978 <init_DELAY>
	init_ADC();
 b52:	0e 94 c5 04 	call	0x98a	; 0x98a <init_ADC>
	init_UART();
 b56:	0e 94 86 04 	call	0x90c	; 0x90c <init_UART>
	init_supply();
 b5a:	0e 94 46 05 	call	0xa8c	; 0xa8c <init_supply>
	sei();
 b5e:	78 94       	sei
	PMIC.CTRL |= PMIC_LOLVLEN_bm;										//Set low level interrupts
 b60:	e0 ea       	ldi	r30, 0xA0	; 160
 b62:	f0 e0       	ldi	r31, 0x00	; 0
 b64:	82 81       	ldd	r24, Z+2	; 0x02
 b66:	81 60       	ori	r24, 0x01	; 1
 b68:	82 83       	std	Z+2, r24	; 0x02
	
	PORTA_DIRSET = PIN7_bm;												//Set I'm alive pin as output
 b6a:	80 e8       	ldi	r24, 0x80	; 128
 b6c:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7be601>
	PORTA_OUTSET = PIN7_bm;												//Enable I'm alive LED
 b70:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
	
	PORTE_DIRSET = PIN4_bm;												//Timing debug pin
 b74:	80 e1       	ldi	r24, 0x10	; 16
 b76:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
   
   uint8_t uart_data;

    while (1) 
    {
		uart_data = read_UART();
 b7a:	0e 94 14 01 	call	0x228	; 0x228 <read_UART>
		switch(uart_data)
 b7e:	8e 31       	cpi	r24, 0x1E	; 30
 b80:	99 f0       	breq	.+38     	; 0xba8 <main+0x62>
 b82:	28 f4       	brcc	.+10     	; 0xb8e <main+0x48>
 b84:	8a 30       	cpi	r24, 0x0A	; 10
 b86:	51 f0       	breq	.+20     	; 0xb9c <main+0x56>
 b88:	84 31       	cpi	r24, 0x14	; 20
 b8a:	59 f0       	breq	.+22     	; 0xba2 <main+0x5c>
 b8c:	1d c0       	rjmp	.+58     	; 0xbc8 <main+0x82>
 b8e:	82 33       	cpi	r24, 0x32	; 50
 b90:	a9 f0       	breq	.+42     	; 0xbbc <main+0x76>
 b92:	8c 33       	cpi	r24, 0x3C	; 60
 b94:	b1 f0       	breq	.+44     	; 0xbc2 <main+0x7c>
 b96:	88 32       	cpi	r24, 0x28	; 40
 b98:	b9 f4       	brne	.+46     	; 0xbc8 <main+0x82>
 b9a:	09 c0       	rjmp	.+18     	; 0xbae <main+0x68>
		{
			case(10):
				write_ext();											//Enables external supply + reads average current 1 sec + writes lbyte and then hbyte
 b9c:	0e 94 ce 02 	call	0x59c	; 0x59c <write_ext>
				break;
 ba0:	ec cf       	rjmp	.-40     	; 0xb7a <main+0x34>
				
			case(20):
				write_bat();											//Enables battery supply + reads average current 1 sec
 ba2:	0e 94 32 03 	call	0x664	; 0x664 <write_bat>
				break;
 ba6:	e9 cf       	rjmp	.-46     	; 0xb7a <main+0x34>
				
			case(30):
				write_volt();											//Reads voltages and converts them to two uint8_t data packages (14 packages total)
 ba8:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <write_volt>
				break;
 bac:	e6 cf       	rjmp	.-52     	; 0xb7a <main+0x34>
				
			case(40):
				write8_UART((0xFF));									//Write error code max 16bit value as other functions cant reach 0xFFFF
 bae:	8f ef       	ldi	r24, 0xFF	; 255
 bb0:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
				write8_UART((0xFF));									//Place D0 function here
 bb4:	8f ef       	ldi	r24, 0xFF	; 255
 bb6:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
				break;
 bba:	df cf       	rjmp	.-66     	; 0xb7a <main+0x34>
				
			case(50):
				fread_DO();												//read the frequency of Digital outputs
 bbc:	0e 94 63 03 	call	0x6c6	; 0x6c6 <fread_DO>
				break;
 bc0:	dc cf       	rjmp	.-72     	; 0xb7a <main+0x34>
				
			case(60):
				LPM_P_OFF();											//turn of both external and bat supply to LPM
 bc2:	0e 94 40 03 	call	0x680	; 0x680 <LPM_P_OFF>
				break;
 bc6:	d9 cf       	rjmp	.-78     	; 0xb7a <main+0x34>
				
			default:
				write8_UART((0xFF));									//Write error code max 16bit value as other functions cant reach 0xFFFF
 bc8:	8f ef       	ldi	r24, 0xFF	; 255
 bca:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
				write8_UART((0xFF));
 bce:	8f ef       	ldi	r24, 0xFF	; 255
 bd0:	0e 94 2a 01 	call	0x254	; 0x254 <write8_UART>
				break;	
 bd4:	d2 cf       	rjmp	.-92     	; 0xb7a <main+0x34>

00000bd6 <__subsf3>:
 bd6:	50 58       	subi	r21, 0x80	; 128

00000bd8 <__addsf3>:
 bd8:	bb 27       	eor	r27, r27
 bda:	aa 27       	eor	r26, r26
 bdc:	0e 94 03 06 	call	0xc06	; 0xc06 <__addsf3x>
 be0:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__fp_round>
 be4:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_pscA>
 be8:	38 f0       	brcs	.+14     	; 0xbf8 <__addsf3+0x20>
 bea:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fp_pscB>
 bee:	20 f0       	brcs	.+8      	; 0xbf8 <__addsf3+0x20>
 bf0:	39 f4       	brne	.+14     	; 0xc00 <__addsf3+0x28>
 bf2:	9f 3f       	cpi	r25, 0xFF	; 255
 bf4:	19 f4       	brne	.+6      	; 0xbfc <__addsf3+0x24>
 bf6:	26 f4       	brtc	.+8      	; 0xc00 <__addsf3+0x28>
 bf8:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_nan>
 bfc:	0e f4       	brtc	.+2      	; 0xc00 <__addsf3+0x28>
 bfe:	e0 95       	com	r30
 c00:	e7 fb       	bst	r30, 7
 c02:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_inf>

00000c06 <__addsf3x>:
 c06:	e9 2f       	mov	r30, r25
 c08:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__fp_split3>
 c0c:	58 f3       	brcs	.-42     	; 0xbe4 <__addsf3+0xc>
 c0e:	ba 17       	cp	r27, r26
 c10:	62 07       	cpc	r22, r18
 c12:	73 07       	cpc	r23, r19
 c14:	84 07       	cpc	r24, r20
 c16:	95 07       	cpc	r25, r21
 c18:	20 f0       	brcs	.+8      	; 0xc22 <__addsf3x+0x1c>
 c1a:	79 f4       	brne	.+30     	; 0xc3a <__addsf3x+0x34>
 c1c:	a6 f5       	brtc	.+104    	; 0xc86 <__addsf3x+0x80>
 c1e:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__fp_zero>
 c22:	0e f4       	brtc	.+2      	; 0xc26 <__addsf3x+0x20>
 c24:	e0 95       	com	r30
 c26:	0b 2e       	mov	r0, r27
 c28:	ba 2f       	mov	r27, r26
 c2a:	a0 2d       	mov	r26, r0
 c2c:	0b 01       	movw	r0, r22
 c2e:	b9 01       	movw	r22, r18
 c30:	90 01       	movw	r18, r0
 c32:	0c 01       	movw	r0, r24
 c34:	ca 01       	movw	r24, r20
 c36:	a0 01       	movw	r20, r0
 c38:	11 24       	eor	r1, r1
 c3a:	ff 27       	eor	r31, r31
 c3c:	59 1b       	sub	r21, r25
 c3e:	99 f0       	breq	.+38     	; 0xc66 <__addsf3x+0x60>
 c40:	59 3f       	cpi	r21, 0xF9	; 249
 c42:	50 f4       	brcc	.+20     	; 0xc58 <__addsf3x+0x52>
 c44:	50 3e       	cpi	r21, 0xE0	; 224
 c46:	68 f1       	brcs	.+90     	; 0xca2 <__addsf3x+0x9c>
 c48:	1a 16       	cp	r1, r26
 c4a:	f0 40       	sbci	r31, 0x00	; 0
 c4c:	a2 2f       	mov	r26, r18
 c4e:	23 2f       	mov	r18, r19
 c50:	34 2f       	mov	r19, r20
 c52:	44 27       	eor	r20, r20
 c54:	58 5f       	subi	r21, 0xF8	; 248
 c56:	f3 cf       	rjmp	.-26     	; 0xc3e <__addsf3x+0x38>
 c58:	46 95       	lsr	r20
 c5a:	37 95       	ror	r19
 c5c:	27 95       	ror	r18
 c5e:	a7 95       	ror	r26
 c60:	f0 40       	sbci	r31, 0x00	; 0
 c62:	53 95       	inc	r21
 c64:	c9 f7       	brne	.-14     	; 0xc58 <__addsf3x+0x52>
 c66:	7e f4       	brtc	.+30     	; 0xc86 <__addsf3x+0x80>
 c68:	1f 16       	cp	r1, r31
 c6a:	ba 0b       	sbc	r27, r26
 c6c:	62 0b       	sbc	r22, r18
 c6e:	73 0b       	sbc	r23, r19
 c70:	84 0b       	sbc	r24, r20
 c72:	ba f0       	brmi	.+46     	; 0xca2 <__addsf3x+0x9c>
 c74:	91 50       	subi	r25, 0x01	; 1
 c76:	a1 f0       	breq	.+40     	; 0xca0 <__addsf3x+0x9a>
 c78:	ff 0f       	add	r31, r31
 c7a:	bb 1f       	adc	r27, r27
 c7c:	66 1f       	adc	r22, r22
 c7e:	77 1f       	adc	r23, r23
 c80:	88 1f       	adc	r24, r24
 c82:	c2 f7       	brpl	.-16     	; 0xc74 <__addsf3x+0x6e>
 c84:	0e c0       	rjmp	.+28     	; 0xca2 <__addsf3x+0x9c>
 c86:	ba 0f       	add	r27, r26
 c88:	62 1f       	adc	r22, r18
 c8a:	73 1f       	adc	r23, r19
 c8c:	84 1f       	adc	r24, r20
 c8e:	48 f4       	brcc	.+18     	; 0xca2 <__addsf3x+0x9c>
 c90:	87 95       	ror	r24
 c92:	77 95       	ror	r23
 c94:	67 95       	ror	r22
 c96:	b7 95       	ror	r27
 c98:	f7 95       	ror	r31
 c9a:	9e 3f       	cpi	r25, 0xFE	; 254
 c9c:	08 f0       	brcs	.+2      	; 0xca0 <__addsf3x+0x9a>
 c9e:	b0 cf       	rjmp	.-160    	; 0xc00 <__addsf3+0x28>
 ca0:	93 95       	inc	r25
 ca2:	88 0f       	add	r24, r24
 ca4:	08 f0       	brcs	.+2      	; 0xca8 <__addsf3x+0xa2>
 ca6:	99 27       	eor	r25, r25
 ca8:	ee 0f       	add	r30, r30
 caa:	97 95       	ror	r25
 cac:	87 95       	ror	r24
 cae:	08 95       	ret

00000cb0 <__divsf3>:
 cb0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__divsf3x>
 cb4:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__fp_round>
 cb8:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fp_pscB>
 cbc:	58 f0       	brcs	.+22     	; 0xcd4 <__divsf3+0x24>
 cbe:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_pscA>
 cc2:	40 f0       	brcs	.+16     	; 0xcd4 <__divsf3+0x24>
 cc4:	29 f4       	brne	.+10     	; 0xcd0 <__divsf3+0x20>
 cc6:	5f 3f       	cpi	r21, 0xFF	; 255
 cc8:	29 f0       	breq	.+10     	; 0xcd4 <__divsf3+0x24>
 cca:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_inf>
 cce:	51 11       	cpse	r21, r1
 cd0:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_szero>
 cd4:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_nan>

00000cd8 <__divsf3x>:
 cd8:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__fp_split3>
 cdc:	68 f3       	brcs	.-38     	; 0xcb8 <__divsf3+0x8>

00000cde <__divsf3_pse>:
 cde:	99 23       	and	r25, r25
 ce0:	b1 f3       	breq	.-20     	; 0xcce <__divsf3+0x1e>
 ce2:	55 23       	and	r21, r21
 ce4:	91 f3       	breq	.-28     	; 0xcca <__divsf3+0x1a>
 ce6:	95 1b       	sub	r25, r21
 ce8:	55 0b       	sbc	r21, r21
 cea:	bb 27       	eor	r27, r27
 cec:	aa 27       	eor	r26, r26
 cee:	62 17       	cp	r22, r18
 cf0:	73 07       	cpc	r23, r19
 cf2:	84 07       	cpc	r24, r20
 cf4:	38 f0       	brcs	.+14     	; 0xd04 <__divsf3_pse+0x26>
 cf6:	9f 5f       	subi	r25, 0xFF	; 255
 cf8:	5f 4f       	sbci	r21, 0xFF	; 255
 cfa:	22 0f       	add	r18, r18
 cfc:	33 1f       	adc	r19, r19
 cfe:	44 1f       	adc	r20, r20
 d00:	aa 1f       	adc	r26, r26
 d02:	a9 f3       	breq	.-22     	; 0xcee <__divsf3_pse+0x10>
 d04:	35 d0       	rcall	.+106    	; 0xd70 <__divsf3_pse+0x92>
 d06:	0e 2e       	mov	r0, r30
 d08:	3a f0       	brmi	.+14     	; 0xd18 <__divsf3_pse+0x3a>
 d0a:	e0 e8       	ldi	r30, 0x80	; 128
 d0c:	32 d0       	rcall	.+100    	; 0xd72 <__divsf3_pse+0x94>
 d0e:	91 50       	subi	r25, 0x01	; 1
 d10:	50 40       	sbci	r21, 0x00	; 0
 d12:	e6 95       	lsr	r30
 d14:	00 1c       	adc	r0, r0
 d16:	ca f7       	brpl	.-14     	; 0xd0a <__divsf3_pse+0x2c>
 d18:	2b d0       	rcall	.+86     	; 0xd70 <__divsf3_pse+0x92>
 d1a:	fe 2f       	mov	r31, r30
 d1c:	29 d0       	rcall	.+82     	; 0xd70 <__divsf3_pse+0x92>
 d1e:	66 0f       	add	r22, r22
 d20:	77 1f       	adc	r23, r23
 d22:	88 1f       	adc	r24, r24
 d24:	bb 1f       	adc	r27, r27
 d26:	26 17       	cp	r18, r22
 d28:	37 07       	cpc	r19, r23
 d2a:	48 07       	cpc	r20, r24
 d2c:	ab 07       	cpc	r26, r27
 d2e:	b0 e8       	ldi	r27, 0x80	; 128
 d30:	09 f0       	breq	.+2      	; 0xd34 <__divsf3_pse+0x56>
 d32:	bb 0b       	sbc	r27, r27
 d34:	80 2d       	mov	r24, r0
 d36:	bf 01       	movw	r22, r30
 d38:	ff 27       	eor	r31, r31
 d3a:	93 58       	subi	r25, 0x83	; 131
 d3c:	5f 4f       	sbci	r21, 0xFF	; 255
 d3e:	3a f0       	brmi	.+14     	; 0xd4e <__divsf3_pse+0x70>
 d40:	9e 3f       	cpi	r25, 0xFE	; 254
 d42:	51 05       	cpc	r21, r1
 d44:	78 f0       	brcs	.+30     	; 0xd64 <__divsf3_pse+0x86>
 d46:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_inf>
 d4a:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_szero>
 d4e:	5f 3f       	cpi	r21, 0xFF	; 255
 d50:	e4 f3       	brlt	.-8      	; 0xd4a <__divsf3_pse+0x6c>
 d52:	98 3e       	cpi	r25, 0xE8	; 232
 d54:	d4 f3       	brlt	.-12     	; 0xd4a <__divsf3_pse+0x6c>
 d56:	86 95       	lsr	r24
 d58:	77 95       	ror	r23
 d5a:	67 95       	ror	r22
 d5c:	b7 95       	ror	r27
 d5e:	f7 95       	ror	r31
 d60:	9f 5f       	subi	r25, 0xFF	; 255
 d62:	c9 f7       	brne	.-14     	; 0xd56 <__divsf3_pse+0x78>
 d64:	88 0f       	add	r24, r24
 d66:	91 1d       	adc	r25, r1
 d68:	96 95       	lsr	r25
 d6a:	87 95       	ror	r24
 d6c:	97 f9       	bld	r25, 7
 d6e:	08 95       	ret
 d70:	e1 e0       	ldi	r30, 0x01	; 1
 d72:	66 0f       	add	r22, r22
 d74:	77 1f       	adc	r23, r23
 d76:	88 1f       	adc	r24, r24
 d78:	bb 1f       	adc	r27, r27
 d7a:	62 17       	cp	r22, r18
 d7c:	73 07       	cpc	r23, r19
 d7e:	84 07       	cpc	r24, r20
 d80:	ba 07       	cpc	r27, r26
 d82:	20 f0       	brcs	.+8      	; 0xd8c <__divsf3_pse+0xae>
 d84:	62 1b       	sub	r22, r18
 d86:	73 0b       	sbc	r23, r19
 d88:	84 0b       	sbc	r24, r20
 d8a:	ba 0b       	sbc	r27, r26
 d8c:	ee 1f       	adc	r30, r30
 d8e:	88 f7       	brcc	.-30     	; 0xd72 <__divsf3_pse+0x94>
 d90:	e0 95       	com	r30
 d92:	08 95       	ret

00000d94 <__floatunsisf>:
 d94:	e8 94       	clt
 d96:	09 c0       	rjmp	.+18     	; 0xdaa <__floatsisf+0x12>

00000d98 <__floatsisf>:
 d98:	97 fb       	bst	r25, 7
 d9a:	3e f4       	brtc	.+14     	; 0xdaa <__floatsisf+0x12>
 d9c:	90 95       	com	r25
 d9e:	80 95       	com	r24
 da0:	70 95       	com	r23
 da2:	61 95       	neg	r22
 da4:	7f 4f       	sbci	r23, 0xFF	; 255
 da6:	8f 4f       	sbci	r24, 0xFF	; 255
 da8:	9f 4f       	sbci	r25, 0xFF	; 255
 daa:	99 23       	and	r25, r25
 dac:	a9 f0       	breq	.+42     	; 0xdd8 <__floatsisf+0x40>
 dae:	f9 2f       	mov	r31, r25
 db0:	96 e9       	ldi	r25, 0x96	; 150
 db2:	bb 27       	eor	r27, r27
 db4:	93 95       	inc	r25
 db6:	f6 95       	lsr	r31
 db8:	87 95       	ror	r24
 dba:	77 95       	ror	r23
 dbc:	67 95       	ror	r22
 dbe:	b7 95       	ror	r27
 dc0:	f1 11       	cpse	r31, r1
 dc2:	f8 cf       	rjmp	.-16     	; 0xdb4 <__floatsisf+0x1c>
 dc4:	fa f4       	brpl	.+62     	; 0xe04 <__floatsisf+0x6c>
 dc6:	bb 0f       	add	r27, r27
 dc8:	11 f4       	brne	.+4      	; 0xdce <__floatsisf+0x36>
 dca:	60 ff       	sbrs	r22, 0
 dcc:	1b c0       	rjmp	.+54     	; 0xe04 <__floatsisf+0x6c>
 dce:	6f 5f       	subi	r22, 0xFF	; 255
 dd0:	7f 4f       	sbci	r23, 0xFF	; 255
 dd2:	8f 4f       	sbci	r24, 0xFF	; 255
 dd4:	9f 4f       	sbci	r25, 0xFF	; 255
 dd6:	16 c0       	rjmp	.+44     	; 0xe04 <__floatsisf+0x6c>
 dd8:	88 23       	and	r24, r24
 dda:	11 f0       	breq	.+4      	; 0xde0 <__floatsisf+0x48>
 ddc:	96 e9       	ldi	r25, 0x96	; 150
 dde:	11 c0       	rjmp	.+34     	; 0xe02 <__floatsisf+0x6a>
 de0:	77 23       	and	r23, r23
 de2:	21 f0       	breq	.+8      	; 0xdec <__floatsisf+0x54>
 de4:	9e e8       	ldi	r25, 0x8E	; 142
 de6:	87 2f       	mov	r24, r23
 de8:	76 2f       	mov	r23, r22
 dea:	05 c0       	rjmp	.+10     	; 0xdf6 <__floatsisf+0x5e>
 dec:	66 23       	and	r22, r22
 dee:	71 f0       	breq	.+28     	; 0xe0c <__floatsisf+0x74>
 df0:	96 e8       	ldi	r25, 0x86	; 134
 df2:	86 2f       	mov	r24, r22
 df4:	70 e0       	ldi	r23, 0x00	; 0
 df6:	60 e0       	ldi	r22, 0x00	; 0
 df8:	2a f0       	brmi	.+10     	; 0xe04 <__floatsisf+0x6c>
 dfa:	9a 95       	dec	r25
 dfc:	66 0f       	add	r22, r22
 dfe:	77 1f       	adc	r23, r23
 e00:	88 1f       	adc	r24, r24
 e02:	da f7       	brpl	.-10     	; 0xdfa <__floatsisf+0x62>
 e04:	88 0f       	add	r24, r24
 e06:	96 95       	lsr	r25
 e08:	87 95       	ror	r24
 e0a:	97 f9       	bld	r25, 7
 e0c:	08 95       	ret

00000e0e <__fp_inf>:
 e0e:	97 f9       	bld	r25, 7
 e10:	9f 67       	ori	r25, 0x7F	; 127
 e12:	80 e8       	ldi	r24, 0x80	; 128
 e14:	70 e0       	ldi	r23, 0x00	; 0
 e16:	60 e0       	ldi	r22, 0x00	; 0
 e18:	08 95       	ret

00000e1a <__fp_nan>:
 e1a:	9f ef       	ldi	r25, 0xFF	; 255
 e1c:	80 ec       	ldi	r24, 0xC0	; 192
 e1e:	08 95       	ret

00000e20 <__fp_pscA>:
 e20:	00 24       	eor	r0, r0
 e22:	0a 94       	dec	r0
 e24:	16 16       	cp	r1, r22
 e26:	17 06       	cpc	r1, r23
 e28:	18 06       	cpc	r1, r24
 e2a:	09 06       	cpc	r0, r25
 e2c:	08 95       	ret

00000e2e <__fp_pscB>:
 e2e:	00 24       	eor	r0, r0
 e30:	0a 94       	dec	r0
 e32:	12 16       	cp	r1, r18
 e34:	13 06       	cpc	r1, r19
 e36:	14 06       	cpc	r1, r20
 e38:	05 06       	cpc	r0, r21
 e3a:	08 95       	ret

00000e3c <__fp_round>:
 e3c:	09 2e       	mov	r0, r25
 e3e:	03 94       	inc	r0
 e40:	00 0c       	add	r0, r0
 e42:	11 f4       	brne	.+4      	; 0xe48 <__fp_round+0xc>
 e44:	88 23       	and	r24, r24
 e46:	52 f0       	brmi	.+20     	; 0xe5c <__fp_round+0x20>
 e48:	bb 0f       	add	r27, r27
 e4a:	40 f4       	brcc	.+16     	; 0xe5c <__fp_round+0x20>
 e4c:	bf 2b       	or	r27, r31
 e4e:	11 f4       	brne	.+4      	; 0xe54 <__fp_round+0x18>
 e50:	60 ff       	sbrs	r22, 0
 e52:	04 c0       	rjmp	.+8      	; 0xe5c <__fp_round+0x20>
 e54:	6f 5f       	subi	r22, 0xFF	; 255
 e56:	7f 4f       	sbci	r23, 0xFF	; 255
 e58:	8f 4f       	sbci	r24, 0xFF	; 255
 e5a:	9f 4f       	sbci	r25, 0xFF	; 255
 e5c:	08 95       	ret

00000e5e <__fp_split3>:
 e5e:	57 fd       	sbrc	r21, 7
 e60:	90 58       	subi	r25, 0x80	; 128
 e62:	44 0f       	add	r20, r20
 e64:	55 1f       	adc	r21, r21
 e66:	59 f0       	breq	.+22     	; 0xe7e <__fp_splitA+0x10>
 e68:	5f 3f       	cpi	r21, 0xFF	; 255
 e6a:	71 f0       	breq	.+28     	; 0xe88 <__fp_splitA+0x1a>
 e6c:	47 95       	ror	r20

00000e6e <__fp_splitA>:
 e6e:	88 0f       	add	r24, r24
 e70:	97 fb       	bst	r25, 7
 e72:	99 1f       	adc	r25, r25
 e74:	61 f0       	breq	.+24     	; 0xe8e <__fp_splitA+0x20>
 e76:	9f 3f       	cpi	r25, 0xFF	; 255
 e78:	79 f0       	breq	.+30     	; 0xe98 <__fp_splitA+0x2a>
 e7a:	87 95       	ror	r24
 e7c:	08 95       	ret
 e7e:	12 16       	cp	r1, r18
 e80:	13 06       	cpc	r1, r19
 e82:	14 06       	cpc	r1, r20
 e84:	55 1f       	adc	r21, r21
 e86:	f2 cf       	rjmp	.-28     	; 0xe6c <__fp_split3+0xe>
 e88:	46 95       	lsr	r20
 e8a:	f1 df       	rcall	.-30     	; 0xe6e <__fp_splitA>
 e8c:	08 c0       	rjmp	.+16     	; 0xe9e <__fp_splitA+0x30>
 e8e:	16 16       	cp	r1, r22
 e90:	17 06       	cpc	r1, r23
 e92:	18 06       	cpc	r1, r24
 e94:	99 1f       	adc	r25, r25
 e96:	f1 cf       	rjmp	.-30     	; 0xe7a <__fp_splitA+0xc>
 e98:	86 95       	lsr	r24
 e9a:	71 05       	cpc	r23, r1
 e9c:	61 05       	cpc	r22, r1
 e9e:	08 94       	sec
 ea0:	08 95       	ret

00000ea2 <__fp_zero>:
 ea2:	e8 94       	clt

00000ea4 <__fp_szero>:
 ea4:	bb 27       	eor	r27, r27
 ea6:	66 27       	eor	r22, r22
 ea8:	77 27       	eor	r23, r23
 eaa:	cb 01       	movw	r24, r22
 eac:	97 f9       	bld	r25, 7
 eae:	08 95       	ret

00000eb0 <__mulsf3>:
 eb0:	0e 94 6b 07 	call	0xed6	; 0xed6 <__mulsf3x>
 eb4:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__fp_round>
 eb8:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_pscA>
 ebc:	38 f0       	brcs	.+14     	; 0xecc <__mulsf3+0x1c>
 ebe:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fp_pscB>
 ec2:	20 f0       	brcs	.+8      	; 0xecc <__mulsf3+0x1c>
 ec4:	95 23       	and	r25, r21
 ec6:	11 f0       	breq	.+4      	; 0xecc <__mulsf3+0x1c>
 ec8:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_inf>
 ecc:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_nan>
 ed0:	11 24       	eor	r1, r1
 ed2:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_szero>

00000ed6 <__mulsf3x>:
 ed6:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__fp_split3>
 eda:	70 f3       	brcs	.-36     	; 0xeb8 <__mulsf3+0x8>

00000edc <__mulsf3_pse>:
 edc:	95 9f       	mul	r25, r21
 ede:	c1 f3       	breq	.-16     	; 0xed0 <__mulsf3+0x20>
 ee0:	95 0f       	add	r25, r21
 ee2:	50 e0       	ldi	r21, 0x00	; 0
 ee4:	55 1f       	adc	r21, r21
 ee6:	62 9f       	mul	r22, r18
 ee8:	f0 01       	movw	r30, r0
 eea:	72 9f       	mul	r23, r18
 eec:	bb 27       	eor	r27, r27
 eee:	f0 0d       	add	r31, r0
 ef0:	b1 1d       	adc	r27, r1
 ef2:	63 9f       	mul	r22, r19
 ef4:	aa 27       	eor	r26, r26
 ef6:	f0 0d       	add	r31, r0
 ef8:	b1 1d       	adc	r27, r1
 efa:	aa 1f       	adc	r26, r26
 efc:	64 9f       	mul	r22, r20
 efe:	66 27       	eor	r22, r22
 f00:	b0 0d       	add	r27, r0
 f02:	a1 1d       	adc	r26, r1
 f04:	66 1f       	adc	r22, r22
 f06:	82 9f       	mul	r24, r18
 f08:	22 27       	eor	r18, r18
 f0a:	b0 0d       	add	r27, r0
 f0c:	a1 1d       	adc	r26, r1
 f0e:	62 1f       	adc	r22, r18
 f10:	73 9f       	mul	r23, r19
 f12:	b0 0d       	add	r27, r0
 f14:	a1 1d       	adc	r26, r1
 f16:	62 1f       	adc	r22, r18
 f18:	83 9f       	mul	r24, r19
 f1a:	a0 0d       	add	r26, r0
 f1c:	61 1d       	adc	r22, r1
 f1e:	22 1f       	adc	r18, r18
 f20:	74 9f       	mul	r23, r20
 f22:	33 27       	eor	r19, r19
 f24:	a0 0d       	add	r26, r0
 f26:	61 1d       	adc	r22, r1
 f28:	23 1f       	adc	r18, r19
 f2a:	84 9f       	mul	r24, r20
 f2c:	60 0d       	add	r22, r0
 f2e:	21 1d       	adc	r18, r1
 f30:	82 2f       	mov	r24, r18
 f32:	76 2f       	mov	r23, r22
 f34:	6a 2f       	mov	r22, r26
 f36:	11 24       	eor	r1, r1
 f38:	9f 57       	subi	r25, 0x7F	; 127
 f3a:	50 40       	sbci	r21, 0x00	; 0
 f3c:	9a f0       	brmi	.+38     	; 0xf64 <__mulsf3_pse+0x88>
 f3e:	f1 f0       	breq	.+60     	; 0xf7c <__mulsf3_pse+0xa0>
 f40:	88 23       	and	r24, r24
 f42:	4a f0       	brmi	.+18     	; 0xf56 <__mulsf3_pse+0x7a>
 f44:	ee 0f       	add	r30, r30
 f46:	ff 1f       	adc	r31, r31
 f48:	bb 1f       	adc	r27, r27
 f4a:	66 1f       	adc	r22, r22
 f4c:	77 1f       	adc	r23, r23
 f4e:	88 1f       	adc	r24, r24
 f50:	91 50       	subi	r25, 0x01	; 1
 f52:	50 40       	sbci	r21, 0x00	; 0
 f54:	a9 f7       	brne	.-22     	; 0xf40 <__mulsf3_pse+0x64>
 f56:	9e 3f       	cpi	r25, 0xFE	; 254
 f58:	51 05       	cpc	r21, r1
 f5a:	80 f0       	brcs	.+32     	; 0xf7c <__mulsf3_pse+0xa0>
 f5c:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_inf>
 f60:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_szero>
 f64:	5f 3f       	cpi	r21, 0xFF	; 255
 f66:	e4 f3       	brlt	.-8      	; 0xf60 <__mulsf3_pse+0x84>
 f68:	98 3e       	cpi	r25, 0xE8	; 232
 f6a:	d4 f3       	brlt	.-12     	; 0xf60 <__mulsf3_pse+0x84>
 f6c:	86 95       	lsr	r24
 f6e:	77 95       	ror	r23
 f70:	67 95       	ror	r22
 f72:	b7 95       	ror	r27
 f74:	f7 95       	ror	r31
 f76:	e7 95       	ror	r30
 f78:	9f 5f       	subi	r25, 0xFF	; 255
 f7a:	c1 f7       	brne	.-16     	; 0xf6c <__mulsf3_pse+0x90>
 f7c:	fe 2b       	or	r31, r30
 f7e:	88 0f       	add	r24, r24
 f80:	91 1d       	adc	r25, r1
 f82:	96 95       	lsr	r25
 f84:	87 95       	ror	r24
 f86:	97 f9       	bld	r25, 7
 f88:	08 95       	ret

00000f8a <__umulhisi3>:
 f8a:	a2 9f       	mul	r26, r18
 f8c:	b0 01       	movw	r22, r0
 f8e:	b3 9f       	mul	r27, r19
 f90:	c0 01       	movw	r24, r0
 f92:	a3 9f       	mul	r26, r19
 f94:	70 0d       	add	r23, r0
 f96:	81 1d       	adc	r24, r1
 f98:	11 24       	eor	r1, r1
 f9a:	91 1d       	adc	r25, r1
 f9c:	b2 9f       	mul	r27, r18
 f9e:	70 0d       	add	r23, r0
 fa0:	81 1d       	adc	r24, r1
 fa2:	11 24       	eor	r1, r1
 fa4:	91 1d       	adc	r25, r1
 fa6:	08 95       	ret

00000fa8 <_exit>:
 fa8:	f8 94       	cli

00000faa <__stop_program>:
 faa:	ff cf       	rjmp	.-2      	; 0xfaa <__stop_program>
